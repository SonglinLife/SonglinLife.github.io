{
    "version": "https://jsonfeed.org/version/1",
    "title": "Life",
    "subtitle": null,
    "icon": "https://songlinlife.top/images/favicon.ico",
    "description": "Life is not about lifestyle, it means Lithium and Ferrum.",
    "home_page_url": "https://songlinlife.top",
    "items": [
        {
            "id": "https://songlinlife.top/2022/MIT6-824-zookeeper/",
            "url": "https://songlinlife.top/2022/MIT6-824-zookeeper/",
            "title": "MIT6.824: zookeeper",
            "date_published": "2022-03-05T02:13:48.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<blockquote>\n<p>Zookeeper，a service for coordinating processes of distributed applications.</p>\n</blockquote>\n<h1 id=\"the-zookeeper-service\"><a class=\"anchor\" href=\"#the-zookeeper-service\">#</a> The ZooKeeper service</h1>\n<h2 id=\"zookeeper-guarantees\"><a class=\"anchor\" href=\"#zookeeper-guarantees\">#</a> ZooKeeper guarantees</h2>\n<p>zookeeper 有两个基本的 ordering guarantee：</p>\n<p><code>Linearizable write</code> ：zookeeper 保证所有关于 update 的 request 都是 serializabel。</p>\n<p><code>FIFO client order</code> ：来自一个 client 所有的 request 执行顺序遵从 client 发送这些 request 的顺序，也就是 FIFO。</p>\n<h3 id=\"关于configuration\"><a class=\"anchor\" href=\"#关于configuration\">#</a> 关于 configuration</h3>\n<p>zookeeper 使用 leader/worker 机制，这就意味着当 leader 改变的时候，有大量的 configuration 参数也需要改变。但是必须满足：</p>\n<ul>\n<li>当 leader 开始对 configuration make change，其他 processes 不应该使用这些已经改变的 configuration。</li>\n<li>如果 leader 在 configuration 整个 update 完了之前就 dead 了，我们不希望这个 partial configuration 被使用。</li>\n</ul>\n<p>对于第一个要求，可以使用分布式锁来控制，即 leader 写的时候其他 worker 不应该读。但是分布式锁可能导致性能下降，所以 zookeeper 提出了一个 <code>ready znode</code>  机制。</p>\n",
            "tags": [
                "MIT6.824"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/grimoireLab-%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E7%BB%84%E4%BB%B6/",
            "url": "https://songlinlife.top/2022/grimoireLab-%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E7%BB%84%E4%BB%B6/",
            "title": "grimoireLab: 平台管理组件",
            "date_published": "2022-02-27T12:18:08.000Z",
            "content_html": "<h3 id=\"mordred\"><a class=\"anchor\" href=\"#mordred\">#</a> Mordred</h3>\n<blockquote>\n<p>SirMordred is the tool used to coordinate the execution of the GrimoireLab platform, via two main configuration files, the  <code>setup.cfg</code>  and  <code>projects.json</code> , which are summarized in their corresponding sections.</p>\n</blockquote>\n<p>也就是说这个工具是管理平台用的。主要的配置文件有两个 <code>Setup.cfg</code>  和 <code>Projects.json</code> 。</p>\n<h4 id=\"setupcfg\"><a class=\"anchor\" href=\"#setupcfg\">#</a> Setup.cfg</h4>\n<p>这个配置文件用于管理 <code>GrimoireLab</code>  的 processes。比如设置 log 日志放在哪，SortingHat 和 ElasticSearch 怎么访问，也可以设置 Perceval 的访问令牌。</p>\n<h4 id=\"projectsjson\"><a class=\"anchor\" href=\"#projectsjson\">#</a> Projects.json</h4>\n<blockquote>\n<p>The projects.json aims at describing the repositories grouped by a project that will be shown on the dashboards.</p>\n</blockquote>\n<p>也就是说这个配置文件用于配置 repos 是如何被 grouped by a project 然后在 dashboard 上显示的。</p>\n<h3 id=\"grimoirelab-toolkit\"><a class=\"anchor\" href=\"#grimoirelab-toolkit\">#</a> grimoirelab-toolkit</h3>\n<p>grimoirelab projects 经常用到的包，比如处理日期的函数。</p>\n<h3 id=\"grimoirelab-bestiary\"><a class=\"anchor\" href=\"#grimoirelab-bestiary\">#</a> grimoirelab-bestiary</h3>\n<blockquote>\n<p>A tool to visually manage software development ecosystems description.</p>\n</blockquote>\n<p>用于直观描述软件开发生态的工具。</p>\n<h3 id=\"hatstall\"><a class=\"anchor\" href=\"#hatstall\">#</a> Hatstall</h3>\n<blockquote>\n<p>Hatstall is a web interface for <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20vZ3JpbW9pcmVsYWIvc29ydGluZ2hhdA==\">SortingHat</span> databases developed mainly with <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGphbmdvcHJvamVjdC5jb20v\">Django</span></p>\n</blockquote>\n<p>就是 SortingHat 的 Web 接口。</p>\n<p>SortingHat 做的工作：</p>\n<ul>\n<li>they might be using several usernames in the same data source (i.e. different emails for git commits)</li>\n<li>to get a whole view, you need to take into account their contribution in different data sources (git, issues, chats, etc.). You need to merge multiple usernames under a single unique identity</li>\n<li>they might be working for several organizations during project life</li>\n</ul>\n<p>而 Hatstall 就是处理 multi-identites 更简单的工具。</p>\n",
            "tags": [
                "xlab"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/grimoireLab-%E6%95%B0%E6%8D%AE%E6%B6%88%E8%B4%B9%E7%BB%84%E4%BB%B6/",
            "url": "https://songlinlife.top/2022/grimoireLab-%E6%95%B0%E6%8D%AE%E6%B6%88%E8%B4%B9%E7%BB%84%E4%BB%B6/",
            "title": "grimoireLab: 数据消费组件",
            "date_published": "2022-02-27T11:26:10.000Z",
            "content_html": "<h3 id=\"kibiter\"><a class=\"anchor\" href=\"#kibiter\">#</a> Kibiter</h3>\n<p><code>Kibiter</code>  就是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9raWJhbmEv\"> Kibana</span> 的定制化 fork。</p>\n<p>下图为 kibana：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220227192947022.png\" alt=\"image-20220227192947022\" /></p>\n<p>可以看到这个就是一个仪表盘。。。</p>\n<h4 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h4>\n<h5 id=\"面板菜单\"><a class=\"anchor\" href=\"#面板菜单\">#</a> 面板菜单</h5>\n<p><img data-src=\"https://camo.githubusercontent.com/5719bb8ee2bd3caadb0293bc6c2a4e56c8571ec10dc173b2886d548b32614281/68747470733a2f2f692e696d6775722e636f6d2f36684f346145562e706e67\" alt=\"img\" /></p>\n<h5 id=\"new-visualization-plugins\"><a class=\"anchor\" href=\"#new-visualization-plugins\">#</a> New visualization plugins</h5>\n<p><code>Kibiter</code>  默认安装了一些可视化插件，比如 Network plugin，允许用户通过图方式查看数据。</p>\n<h3 id=\"sigils\"><a class=\"anchor\" href=\"#sigils\">#</a> sigils</h3>\n<p>这个就是一个 Json 文件夹，包含了所有关于 kibana dashboard 的信息。</p>\n<ul>\n<li>Original indexes where the information come from.</li>\n<li>Searches on those indexes that provide a sub-set of the information.</li>\n<li>Widgets either built on top of the original indexes or on top of the searches.</li>\n<li>Final panels that are an aggregation of several widgets.</li>\n</ul>\n<p>这就说就是关于 Dash Board 的配置。</p>\n<h3 id=\"kidash\"><a class=\"anchor\" href=\"#kidash\">#</a> Kidash</h3>\n<p>这个就是管理 Kibana-related dashboards 的命令行工具。</p>\n<h3 id=\"manuscripts\"><a class=\"anchor\" href=\"#manuscripts\">#</a> Manuscripts</h3>\n<p>这个组件用于自动生成 enrich 数据的 Report。</p>\n",
            "tags": [
                "xlab"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/grimoireLab-%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/",
            "url": "https://songlinlife.top/2022/grimoireLab-%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/",
            "title": "grimoireLab: 数据增强相关组件",
            "date_published": "2022-02-27T09:39:07.000Z",
            "content_html": "<h3 id=\"grimoireelk\"><a class=\"anchor\" href=\"#grimoireelk\">#</a> GrimoireELK</h3>\n<p><code>GrimoireELK</code>  就是一个数据增强组件，这个组件基于 ElasticSearch。这个组件的作用有两个。</p>\n<ol>\n<li>存储 <code>perceval</code>  获得的数据，这样就不用反复拉取。</li>\n<li>对原来的数据进行加工和 enrich，使其能被 K 从 bit 而使用。</li>\n</ol>\n<p>关于 raw 数据和 enrich 数据可以直接查看 https://github.com/chaoss/grimoirelab-elk，这里不多描述。</p>\n<h3 id=\"ceres\"><a class=\"anchor\" href=\"#ceres\">#</a> Ceres</h3>\n<p><code>Ceres</code>  就是一个数据解析工具，他负责解析从 <code>perceval</code>  获取得到的数据。</p>\n<p>它的工作逻辑如下：</p>\n<h4 id=\"eventize\"><a class=\"anchor\" href=\"#eventize\">#</a> Eventize</h4>\n<p><code>perceval</code>  会产生 JSON 格式的数据，而 ceres 做的就是 <code>split</code> 。通过 <code>eventizing</code> ，ceres 将 json 文件辨析为 Pandas 的 DataFrame 格式。ceres 有两种解析程度，这个后续再看。</p>\n<h4 id=\"format\"><a class=\"anchor\" href=\"#format\">#</a> Format</h4>\n<p>format 功能就是格式转换，比如将时间从 string 转换为 Date 格式。</p>\n<h4 id=\"filter\"><a class=\"anchor\" href=\"#filter\">#</a> Filter</h4>\n<p>filter 可以用于过滤某一行的信息。</p>\n<h4 id=\"data-enrich\"><a class=\"anchor\" href=\"#data-enrich\">#</a> Data Enrich</h4>\n<p>数据增强，虽然我不知道它是怎么做到的。</p>\n<h3 id=\"sorting-hat\"><a class=\"anchor\" href=\"#sorting-hat\">#</a> Sorting Hat</h3>\n<blockquote>\n<p>A tool to manage identities.</p>\n</blockquote>\n<p>这是简介对于 Sorting Hat 的描述，也就是说它是处理 identities 的。但是简介好像没有说这个 identities 到底是什么，好像只说有唯一 uuid，对于每一独特的 identity 可以定义一个 profile。</p>\n<p>identity 可以对应不同时间段的从属关系。</p>\n<p>Sorting Hat 使用 Perceval 的检索数据，并把获得的 identities 保存到数据库中。</p>\n<p>这玩意的用法我还是没怎么搞懂，identites 和 profile 到底怎么搞？</p>\n",
            "tags": [
                "xlab"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/MIT6-824-lab2-Raft/",
            "url": "https://songlinlife.top/2022/MIT6-824-lab2-Raft/",
            "title": "MIT6.824: lab2 Raft",
            "date_published": "2022-02-26T03:38:28.000Z",
            "content_html": "<p>首先我是读了论文之后再写这个 lab 的，但 raft 论文的内容太多了，只能慢慢一点点看。现在还是先把 lab 完成。</p>\n<p>强烈安利：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbFViVkJWenZOVnhoZ2JjSFFCYmtrUQ==\">https://mp.weixin.qq.com/s/lUbVBVzvNVxhgbcHQBbkkQ</span></p>\n<h3 id=\"part-2a\"><a class=\"anchor\" href=\"#part-2a\">#</a> Part 2A</h3>\n<p><strong>任务要求</strong>：实现选举算法和心跳包。如果旧的 leader 没有问题就让旧的 leader 继续执行，如果旧的 leader 有问题那么就选举新的 leader。</p>\n<p>这意味着我们不用设置 normal term，只要考虑 leader fail 这种情况。</p>\n<p><strong>任务提示</strong>：</p>\n<ul>\n<li>完成 <code>raft.go</code></li>\n<li>完成 <code>RequestVote</code>   RPC</li>\n<li>实现 <code>AppendEntries</code>  RPC</li>\n<li>注意不要发生同时进行选举的情况。</li>\n<li>要求 leader 发生心跳包每秒不超过 10 次。</li>\n<li>要求旧的 leader fail 5 秒内完成选举。</li>\n<li>因为 tester 旅程每秒只能发送 10 次心跳，所以 election timeout 必须要大于 paper 里描述的 150-300。</li>\n</ul>\n<h3 id=\"part2b\"><a class=\"anchor\" href=\"#part2b\">#</a> Part2B</h3>\n<hr />\n<h4 id=\"33更新\"><a class=\"anchor\" href=\"#33更新\">#</a> 3.3 更新</h4>\n<p>我真的想干死他妈了，折腾了好几天终于无伤打过 LAB2B，运行 100 次也没有出错，这里面的坑点真的很多。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220303115450291.png\" alt=\"image-20220303115450291\" /></p>\n<p>首先需要明确 committed 是如何被确认的：</p>\n<p>对于 leader 来说：<strong>nextIndex -&gt; matchIndex -&gt; commitIndex -&gt; applyIndex</strong></p>\n<blockquote>\n<p>If there exists an N such that N &gt; commitIndex, a majority of matchIndex[i] ≥ N, and log[N].term == currentTerm:  set commitIndex = N</p>\n</blockquote>\n<p>刚开始我也搞不懂这个 <code>matchIndex</code>  是什么东西，leader 是通过 check majority matchIndex 并且如果该 log entry 属于当前 term 就确认 committed。</p>\n<p>对于 follower: **preLogIndex -(匹配成功)&gt; len (logs) -compart with leadercommitted&gt; commitIndex -&gt; applyIndex **</p>\n<p><strong>commitIndex = min(len(logs) , leaderCommitted</strong></p>\n<p>对于 follower 来说可以是 leader 告知 committed，也可以是通过 append log 后自己确认，总之这个过程逻辑自洽。</p>\n<p>但是这个有一个很严重的坑点，会导致时不时出现 <strong>index out of range</strong> 这个错误。这个错误其实有在 raft guide 上写明，但是我当时并没有看懂，导致执行 100 次总有几次报这个 out of range 错误。。。。</p>\n<p>出现这个问题的原因就是 follower 应用了 stale AppendEntries PRC，然后给 leader 发送了 reply success = true。因为 leader 会重复发送 AppendEntries PRC，如果某个 AppendEntries PRC 返回 true 后，leader 就会执行：<strong>nextIndex[server] += len(args.entries)</strong>，这就导致有时候 leader 会将相同的 AppendEntries PRC 应用两次后，nextIndex [server] += len (args.entries) 也执行两次。最后导致 nextIndex [server] 要超过了 log 的长度。</p>\n<p>解决方法：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>last <span class=\"token operator\">:=</span> rf<span class=\"token punctuation\">.</span>logs<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">.</span>PrevLogIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">.</span>logs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 难点在于如何判断旧的 rpc</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>Entries<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断要 append 的 log entries 是不是已经 append 上了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    flag <span class=\"token operator\">:=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> last<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>TermNumber <span class=\"token operator\">!=</span> args<span class=\"token punctuation\">.</span>Entries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>TermNumber <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> flag <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        reply<span class=\"token punctuation\">.</span>XTerm <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token comment\">// 表示这个是过时的 rpc</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>还有一个很严重的坑点，就是选举超时重置，它会导致<strong> rejoin of partitioned leader <em>...</em></strong> 这个测试时不时失败，这是因为选举不当，导致 cluster 没有及时选举出 leader。</p>\n<p>这里需要注意，什么时候才会重置 election timeout：</p>\n<ul>\n<li>当 follower 升级为 candidate 时会重置。</li>\n<li>当 follower 投出自己的一票时会重置。</li>\n<li>当 follower 接受到 leader 的 appendEntries PRC 时会重置。</li>\n</ul>\n<p>第一种情况很简单，就是因为超时才会升级为 candidate，所以成为 candidate 后必须重置。</p>\n<p>第二情况有些复杂，如果一个 leader 或者 candidate 接受到一个 vote request，其中 rf.currentTerm &lt; args.Term。这说明该 leader 或者 candidate 已经 out of date，必须强制转换为 follower，注意，强制转换为 follower 并不代表它可以重置它自身的 election timeout。只有满足严格选举要求，把自己的票投出去后才可以重置。follower 在每一个 Term 有且只有一张选票！但 server 进行 term 提升后就可以分配一张新选票。</p>\n<p>第三种情况其实和第二种情况类似，appendEntries PRC 只能由 leader 发出，一旦当前 server 确认其自身的 currentTerm &lt;= args.Term 就会把选举时间重置。</p>\n<p>只要注意这两个问题：旧 AppendEntries 和 election timeout，就可以轻松 pass all test 了！</p>\n<h3 id=\"part-2c\"><a class=\"anchor\" href=\"#part-2c\">#</a> Part 2C</h3>\n<p>这个 lab 要求我们实现 persistence。</p>\n<h4 id=\"33更新-2\"><a class=\"anchor\" href=\"#33更新-2\">#</a> 3.3 更新</h4>\n<p>无伤通关，就很 nice！</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220303191029815.png\" alt=\"image-20220303191029815\" /></p>\n<p>执行超过 100 次，仍然这么坚挺！太佩服我自己了，嘿嘿😄</p>\n<p>这个基本思路很简单，就是实现 <code>persist</code> ，然后把 <code>persist()</code>  插入到 persist state 变换的地方，通过 figure 2 不难知道：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220303172723928.png\" alt=\"image-20220303172723928\" /></p>\n<p>只要这三个变量改变的时候，我们就插入 <code>persist</code> 。</p>\n<p>但是这里也有一个坑点，这就 appendEntries RPC 会因为网络出错，下面我来描述一下出错情境：</p>\n<p>首先明确，因为我们会不断重复发 AppendEntries RPC，这就导致 follower 需要检查，这个 AppendEntries RPC 是否已经过时，如果过时就返回 false，如果没过时就返回 true</p>\n<h5 id=\"testfigure8unreliable2c报错返回true的appendentriesrpc丢失问题\"><a class=\"anchor\" href=\"#testfigure8unreliable2c报错返回true的appendentriesrpc丢失问题\">#</a> TestFigure8Unreliable2C 报错，返回 true 的 AppendEntriesRPC 丢失问题</h5>\n<p>原因在于，leader 首先发送了一份 entries，follower 通过 AppendEntries 收到了这份 Entries。follower 检查到这个 AppendEntries 中携带的 Entries 没有被 Append 到自己的 logs 中，于是它 append，并返回 true。但是这个本该返回 true 的 AppendEntries RPC 因为网络没有返回（永久丢失，或者返回很慢，leader 超时不再接受），leader 于是又重新发送了一份相同的 Entries。follower 检查到这个 AppendEntries 中携带的 Entries 之前已经 Append 过了，于是它返回给 leader false。leader 收到 false 后于是重复发送，于是整个系统陷入了 <code>living lock</code> 。</p>\n<p><strong>解决办法</strong>：当 follower 检测到 stale AppendEntriesRPC 时，它告诉 leader，这个 RPC 过时了，并且同时返回 follower 自己的 <code>len(logs)</code>  也就是 <code>XIndex</code> 。leader 检查到过时的 RPC，它通过检查 <code>reply.XIndex == len(args.Entris) + rf.nextIndex[server]</code>  ，如果满足说明它没有接受到那个返回 true 的 AppendEntries，于是它将 <code>rf.nextIndex[server] = reply.Xindex</code> 。至此，我们就能够解决返回 true 的 AppendEntriesRPC 丢失问题。</p>\n<h5 id=\"unreliable-churn-out-of-range-问题\"><a class=\"anchor\" href=\"#unreliable-churn-out-of-range-问题\">#</a> unreliable churn out of range 问题</h5>\n<p>原因在于，网络太混乱了。在上面我们提到，返回 true 的 AppendEntriesRPC 会因为网络丢失，然后 leader 一直陷入活锁。我们的解决办法是告诉 leader，这个 AppendEntries 过时了，leader 来检查需不需要修改 <code>rf.nextIndex</code> 。</p>\n<p>但是！！！</p>\n<p>你有没有想过，因为网络很乱，如果 stale appendEntriesRPC 要比那个返回 true 的 AppendEntriesRPC 先返回呢？leader 对于 stale AppendEntriesRPC，它会认为自己之前的那个返回 True 的 AppendEntriesRPC 丢失了。于是 leader 修改了自己的 nextIndex。但是那个返回 true 的 AppendEntries 因为网络还可以，最后还是成功返回了。leader 于是又修改了自己的 <code>nextIndex</code> 。这就导致了 out of range 的出现，并且这个问题是偶发性的，因为这属于网络中的极端情况。</p>\n<p>我们的解决办法也很简单，如果 leader 要修改自己的 nextIndex，必须满足：</p>\n<p><code>reply.XIndex == len(args.Entries) + rf.nextIndex[server]</code></p>\n<h5 id=\"testfigure8unreliable2c稀有out-of-range\"><a class=\"anchor\" href=\"#testfigure8unreliable2c稀有out-of-range\">#</a> TestFigure8Unreliable2C 稀有 out of range</h5>\n<p>因为我的 log 日志的 index 是从 1 开始的，于是在初始化时候，我会默认将 index = 0 设置为 0， applyindex =0 , commitIndex= 0。</p>\n<p>但是在设置 nextIndex，因为日志不匹配，我就需要遍历找到最优的 Index，但是这里我的遍历条件是：</p>\n<p><code>for i = len(rf.logs) - 1; i &gt;= 0; i--</code></p>\n<p>这就会导致在很罕见的情况下，i 会被归为 0，而我们用 0 给 nextIndex 赋值，就导致 preLogIndex 变成了 - 1。这就会出现 out of range。但这个情况很少见，100 次里能出现 1 次？</p>\n<p>改成： <code>for i = len(rf.logs) - 1; i &gt;= 1; i--</code>  就行了。</p>\n<p><strong>都是细节！真的太细了。。。。</strong></p>\n<h3 id=\"part2d\"><a class=\"anchor\" href=\"#part2d\">#</a> Part2D</h3>\n<p>这个 lab 要求我们完成 log compaction。</p>\n<p>需要实现 <code>Snapshot(index int, snapshot []byte)</code> ，tester 来定期调用。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220303200330913.png\" alt=\"image-20220303200330913\" /></p>\n<h4 id=\"无伤通关34更新\"><a class=\"anchor\" href=\"#无伤通关34更新\">#</a> 无伤通关！！！！！（3.4 更新）</h4>\n<p>终于无伤通关了 lab2 了，真的服了我自己了，只用了一个礼拜就搞懂了 raft，现在我可以说我是懂一些分布式知识了，真的舒服啊。我就是天才！yes！happy！</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220304214412025.png\" alt=\"image-20220304214412025\" /></p>\n<p>批量测试还在跑，但是问题不大，嘿嘿。</p>\n<p>2D 其实很简单，就是需要将原来的索引进行替换，我的选择是写两个转换函数：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>rf <span class=\"token operator\">*</span>Raft<span class=\"token punctuation\">)</span> <span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> index <span class=\"token operator\">-</span> rf<span class=\"token punctuation\">.</span>lastIncludedIndex</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>rf <span class=\"token operator\">*</span>Raft<span class=\"token punctuation\">)</span> <span class=\"token function\">Reconvert</span><span class=\"token punctuation\">(</span>index <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> index <span class=\"token operator\">+</span> rf<span class=\"token punctuation\">.</span>lastIncludedIndex</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在刚开始我的想法是，因为每一次做 snap 都会切断 logs，于是需要考虑处理空 log 日志的情况，但是其实没有必要，如果考虑空 log 会导致整个代码逻辑变得非常复杂。</p>\n<p>解决方法：每一次做 snapshot 得到新的 log 时候，我们在 logs 前面插入一个空 log entry，并且它的 term 等于 <code>lastIncludeTerm</code> 。于是我们之前写的代码就只要一点点改变。</p>\n<p>第二个坑点就是，选择什么时候调用 Installsnapshot。我最开始想的是在 sendAppendEntries 在这个函数的返回逻辑部分进行处理，但是由于 RPC 是建立在 UDP 上的，整个网络异常混乱，导致可能多个 Installsnapshot 调用之间顺序很乱，不利于我们的思考。</p>\n<p>解决办法：把调用 Installsnapshot 放到 heartbeat 函数里，让每一次 heartbeat 考虑要不要调用 installsnapshot。</p>\n<h4 id=\"installsnapshot-rpc\"><a class=\"anchor\" href=\"#installsnapshot-rpc\">#</a> Installsnapshot RPC</h4>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220304215521240.png\" alt=\"image-20220304215521240\" /></p>\n<p>按照要求实现这个 RPC 就行了，需要注意因为整个网络不可信，我们需要验证这个 InstallSnapshot 是否已经过时。</p>\n<h3 id=\"遗留的问题\"><a class=\"anchor\" href=\"#遗留的问题\">#</a> 遗留的问题</h3>\n<p>这是我做这个 lab 发现的一个很奇妙的现象，但我完成了 2D 的时候，回过头我检查之前的 ABC 测试，发现 B 测试中的 *😗 RPC byte count 测试出现 RPC byte count failed。</p>\n<p>这个问题是因为，整个网络是 UDP 的，会出现这么一种情况：RPC 包发出去后，因为 UDP 广播，被自己立即接受了，并返回。这样就使得整个网络变得异常臃肿。</p>\n<p>这个 Bug 出现的原因是因为，我在代码中增加了这样一个逻辑，一旦检查到自己发出的 RPC 包被自己接收后就 return。</p>\n<p>但是我至今也没搞懂，为什么不行！</p>\n<p>这个问题，未来的我，你可以解决的对吧？😏</p>\n<h3 id=\"raft-basic\"><a class=\"anchor\" href=\"#raft-basic\">#</a> Raft Basic</h3>\n<p>将 servers 分为三种状态：leader、follower 和 candidate。</p>\n<p>follower 是消极的，他们只能响应 leader 或者 candidate 的请求。candidate 是选举时产生的。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226123046018.png\" alt=\"image-20220226123046018\" /></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226123113136.png\" alt=\"image-20220226123113136\" /></p>\n<p>就像图中描述的，term 分为两个阶段 election 和 normal。每个 term 都有对于的 current term number。<strong>如果 candidate 或者 leader 发现他的 term 过时了，那么他们会自动变为 follows。</strong></p>\n<p>RequestVote RPCs 在选举时由 candidate 进行初始化，并且 AppendEntries RPCs 被 leader 初始化用于复制 log entries 和提供 heartbeat（就是空的 AppendEntries）。</p>\n<p><strong>记住 raft 中的节点其实就是状态机！</strong></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220228220844868.png\" alt=\"image-20220228220844868\" /></p>\n<p>这里我有一个想法，因为是 state machine，由于 raft 层记录了 lastApply，而且 state machine 只能 apply committed entries。所有的机子都会 apply 相同的 committed entries。因此这里可能会出现重复响应情况，比如 client 发送请求给 leader，leader committed 请求后返回给 client 响应之后马上挂掉了，raft 通过选举产生了新的 leader，那么新的 leader 可能会让 state machine 重复 apply，也就是重复发送响应。</p>\n<p><strong>但是这没有问题！重复是 tcp 层应该解决的问题。</strong></p>\n<p>LastApply 永远应该小于或等于 committed index！</p>\n<h3 id=\"leader选举\"><a class=\"anchor\" href=\"#leader选举\">#</a> Leader 选举</h3>\n<p>server 开启，初始状态为 follower，并且如果他收到 <code>leader</code>  或者 <code>candidate</code>  的有效 RPCs，那么就会一直维持 follower。如果 follower 在 election timeout 内没有收到任何 RPCs，那么他就会增加 current term 并且成为 candidate 开启选举。</p>\n<h4 id=\"follower\"><a class=\"anchor\" href=\"#follower\">#</a> follower</h4>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226150941941.png\" alt=\"image-20220226150941941\" /></p>\n<h4 id=\"candidate\"><a class=\"anchor\" href=\"#candidate\">#</a> candidate</h4>\n<p>通过 RequestVote RPC 同时向集群中所有的 server 要求投票。</p>\n<h5 id=\"requestvote-rpc的结构\"><a class=\"anchor\" href=\"#requestvote-rpc的结构\">#</a> RequestVote RPC 的结构：</h5>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226150031701.png\" alt=\"image-20220226150031701\" /></p>\n<h5 id=\"candidate需要做的\"><a class=\"anchor\" href=\"#candidate需要做的\">#</a> candidate 需要做的：</h5>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226150232338.png\" alt=\"image-20220226150232338\" /></p>\n<p>这里其实还少些了一个很重要的条件：</p>\n<blockquote>\n<p>Current terms are exchanged whenever servers communicate; if one server’s current term is smaller than the other’s, then it updates its current term to the larger value. If a candidate or leader discovers that its term is out of date, it immediately reverts to follower state. If a server receives a request with a stale term number, it rejects the request.</p>\n</blockquote>\n<p>也就说如果 leader 或者 candidate 发现有人的 current term number 比它的还要大，那么就自动变成 follower，这个特性很重要！</p>\n<h4 id=\"关于randomized-election-timeouts\"><a class=\"anchor\" href=\"#关于randomized-election-timeouts\">#</a> 关于 randomized election timeouts</h4>\n<p>论文中提到：</p>\n<blockquote>\n<p>raft uses randomized election timeouts to ensure that split votes are rare and that they are resolved quickly.</p>\n</blockquote>\n<p>这个一直困恼我，整个随机 election timeouts 是如何解决 split votes。因为有一段话：</p>\n<blockquote>\n<p>This spreads out the servers so that in most cases only a single server will time out; it wins the election and sends heartbeats before any other servers time out.</p>\n</blockquote>\n<p>这段话的意思是说先 timeout 的 server 会获得选举胜利。这里就有一个疑问为什么先 timeout 的 server 一定会获得选举胜利。其实要搞懂还得看 follower。follower 做了一件事：</p>\n<blockquote>\n<p>If a follower receives no communication over a period of time called the election timeout, then it assumes there is no viable leader and begins an election to choose a new leader.</p>\n</blockquote>\n<p>如果 follower 在 <code>election timeout</code>  没有收到 leader 或 candidate 的 rpc，那么它会开启选举，注意这里的超时时间是 <code>election timeout</code> 。也就是说过 leader 挂了的话，那么 <code>election timeout</code>  最小的那个机子就会先意识到，于是他成为 candidate 并且向其他 server 发送 RequestVote RPC。而 raft 的投票机制就是先来先到规则，先发起投票的那个 server 很有可能可以赢得选举。</p>\n<p>candidate 初始化也做了一件事：</p>\n<blockquote>\n<p>Each candidate restarts its randomized election timeout at the start of an<br />\nelection, and it waits for that timeout to elapse before starting the next election</p>\n</blockquote>\n<p>candidate 初始化后也会重新随机初始化这个 <code>election timeout</code> 。如果在这个阶段发生了 split vote 情况，那么 <code>election timeout</code>  最小的 candidate 就会率先超时，并且开启新的投票，于是其他 candidate 看到新的 RequestVote 中的 <code>current term</code>  大于自身的 term number，于是这些 candidate 就会自动变成 followers 并给新的 candidate 投票。于是 splitvote 问题就可以很好地解决了！</p>\n<h3 id=\"state\"><a class=\"anchor\" href=\"#state\">#</a> State</h3>\n<h5 id=\"所有的server都有的状态\"><a class=\"anchor\" href=\"#所有的server都有的状态\">#</a> 所有的 server 都有的状态</h5>\n<p><code>committedIndex</code> ：这就是 logs 中 committed highest log entry index，这个初始化为 0。</p>\n<p><code>log[]</code> ：log 初始化中会把 index 为 0 初始化，也就是后续添加 entry 的 index 都是从 1 开始。</p>\n<p><code>lastApplied</code> ：index of highes log entry applied to state machine。通过 heartbeat 发送了 entry 之后受到了 confirm，确定是 committed 之后就可以执行了。这个 lab 可能不会涉及。</p>\n<p><code>commitIndex</code> ：通过 heartbeat 得到回复，leader 就可以确认 committed 了。</p>\n<h5 id=\"leader-维护的状态\"><a class=\"anchor\" href=\"#leader-维护的状态\">#</a> leader 维护的状态</h5>\n<p><code>matchIndex[]</code> ：对于每个 server，需要复制的最高 log entry index，初始化为 0。我还没搞懂这个最高需要被复制为啥要初始化为 0。</p>\n<p><code>nextIndex[]</code> : leader 会保存下一个为 server 发送了 log entry 的 index。这里的 index 我直接设定为 log 的索引。（初始化为 <code>len(logs)</code> ）</p>\n<h3 id=\"关于54-safety\"><a class=\"anchor\" href=\"#关于54-safety\">#</a> 关于 5.4 Safety</h3>\n<p>有个大前提：leader 可以无限 append log，但是它不能通过选举然后增大自己的 term。</p>\n<h4 id=\"严格选举\"><a class=\"anchor\" href=\"#严格选举\">#</a> 严格选举</h4>\n<p>Raft 保证新选举出来的 leader 必须拥有之前 term 所有的 committed entries，也就是说 log entries 只能通过 leader 流向 follower 而不能从 follower 流向 leader。</p>\n<p>这里 candidate 赢得选举的条件有所不同。</p>\n<p>candidate 在请求投票时，会发送自己的 last log entry 和 follower 的 last log entry 进行对比。如果 candidate last log 的 term 要大，获得 term 相同时 candidate log entry 的 index 要大，则认为 candidate 是优先的，这时候才能进行投票。</p>\n<h4 id=\"committed规则\"><a class=\"anchor\" href=\"#committed规则\">#</a> committed 规则</h4>\n<p>论文的 figure 8 给出了这样一个情况：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220228215916592.png\" alt=\"image-20220228215916592\" /></p>\n<p>在 <code>c</code>  情况下， <code>s1</code>  作为 leader 将 index 2 复制给了 s2、s3。然后问题来了，这样 index 2 就是一个 committed entry 了，但是如果 s1 这时候挂掉，s5 参与到选举，由于 s5 在 term3 时候赢得了选举，所以他有 term3 的 log entry，那么 s5 在 <code>d</code>  情况可以赢得 term5 选举，并把 index 2 复制给了其他 server。可以看到此时的 index 2 的 term 变成了 3。之前的 committed 被覆盖了！</p>\n<p>于是 raft 规定，只有当前 term 的 log entries 才能通过计算 replicas 数的方式进行 <code>committed</code> 。</p>\n<p>这里又会有新的问题出现了！如果一个 command 对应了 log entries 是之前的 term，那么及时当前 leader 收到了 majority 的 confirm，那么 leader 也不能 apply 这个 log entry。一直到当前的 term 下来了 new command。那么这个旧 term 下的 log entry 才会得到 confirm。</p>\n<h4 id=\"safety-argument\"><a class=\"anchor\" href=\"#safety-argument\">#</a> Safety argument</h4>\n<p><strong>针对 figure 9 的情况</strong></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220228224051518.png\" alt=\"image-20220228224051518\" /></p>\n<p>我对于这张图的理解</p>\n<p>如果 s5 可以获得大部分选票的话，那么至少会出现 s3 这种既收到了之前 leader 的 log entry。请注意，论文描述严格选举有一个前提，那就是：赢得选举的 server 必须要在 majority 中保证 up-to-date log entry。这意味着 leader 如果自己任期内的 committed entry 一直是 up-to-date。也就是说 s5 不可能通过选举！</p>\n<p>有一说一，还是有的抽象。。。。</p>\n<h4 id=\"timing-and-availability\"><a class=\"anchor\" href=\"#timing-and-availability\">#</a> Timing and availability</h4>\n<p>需要保证</p>\n<p><strong>broadcastTime≪electionTimeout≪MTBF</strong></p>\n<p><code>broadcastTime</code>  就是平行发送 RPCs 的平均发送时间 + 接受响应时间。</p>\n<p><code>electionTimeout</code> ：这个就是之前提到了选举超时。</p>\n<p><code>MTBF</code>  ：the average time between failures for a single server</p>\n<p><strong>MTBFs are several months or more</strong>，所以这个不等式很容易满足</p>\n<h3 id=\"log-compaction\"><a class=\"anchor\" href=\"#log-compaction\">#</a> Log compaction</h3>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220301092739411.png\" alt=\"image-20220301092739411\" /></p>\n<p>raft 的 snap 机制用于压缩日志，其实它也很简单。</p>\n<p><code>last included index</code>  就是 the last entry the state machine had applied，就是 last apply index，注意，只有 committed 的 entry 才会被 apply，而 raft 可以确保所有 committed entry 都会在 state machine 得到 apply。</p>\n<p>** 并且这个 snapshot 还包含 state machine state！** 这是创建 snap 的最大开销。</p>\n<p>所以之前已经 apply 的 log entry 实际上已经没啥太大帮助了，我们只需要保存 last 用于 AppendEntries consistency check。</p>\n<p>对于特殊情况，比如 leader 现在需要废弃 log entries，但是这些 log entries 中还有一些没有发送给某个 follower，比如 follower server 执行很慢，这个 server 刚刚加入网络。。。</p>\n<p>于是这是 leader 会调用 InstallSnapShot RPC：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220301095816047.png\" alt=\"image-20220301095816047\" /></p>\n<p>leader 通过发送 chunk 方式，把 snapshot 发送给 follower。</p>\n<p>如果 follower 的 last log entry 比接收到的 snapshot 里的 last index 还要 stale，那么 follower 就把全部 log entrie 给扔了。如果 follower pre index 和 snap 里的 last index 重合，那么就只丢弃之前的。</p>\n<p>snapshot 的创建规则：</p>\n<ol>\n<li>固定 log size 触发创建 snapshot。</li>\n<li>copy-on-write 技术用于创建。</li>\n</ol>\n<h3 id=\"听讲\"><a class=\"anchor\" href=\"#听讲\">#</a> 听讲</h3>\n<p>使用 condition</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226202117673.png\" alt=\"image-20220226202117673\" /></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226202457559.png\" alt=\"image-20220226202457559\" /></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226210149391.png\" alt=\"image-20220226210149391\" /></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226210527368.png\" alt=\"image-20220226210527368\" /></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220227155319505.png\" alt=\"image-20220227155319505\" /></p>\n<p>这张图很好地解答了我的疑惑，raft 中的 server 只能是 leader 来对外提供服务，从 client 发送请求到 leader 响应过程分为：</p>\n<ul>\n<li>client 向 server 发送请求，发送给 follower 的请求会被 follower 转发给 leader。</li>\n<li>leader 把 client command 写在 log 中，并通过 Append Entites RPC 发送给其他 followers。</li>\n<li>followers 返回确认消息，如果集群中 majority 都响应了，也就是说 leader 知道了 cluster 中大部分节点就收到了这些 log entity，那么对应的 entity 就是 <code>committed</code> 。</li>\n<li>leader 确认 entity 是 committed 之后，就会开始执行 entity 对应的 command，并把执行这个 command 再次发送给 followers。</li>\n<li>followers 收到确认执行 request 之后开始执行。</li>\n</ul>\n<p>我之前想到的 split partition 问题就可以很好解决了，如果集群分裂为两个 partition，然后各自都有 leader，那么对于 min partition 来说，leader 收不到 majority 的确认，因此 leader 没法执行指令。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220301110023351.png\" alt=\"image-20220301110023351\" /></p>\n<p>raft 使用 fast backup 方法。</p>\n<h3 id=\"线性一致性\"><a class=\"anchor\" href=\"#线性一致性\">#</a> 线性一致性</h3>\n<h4 id=\"什么是线性一致性\"><a class=\"anchor\" href=\"#什么是线性一致性\">#</a> <strong>什么是线性一致性？</strong></h4>\n<p><strong>Linearizable semantics</strong> （Linearizability）(each operation appears to execute instantaneously, exactly once, at some point between its invocation and its response)</p>\n<ul>\n<li>\n<p>在一个线性一致性的系统里面，任何操作都可能在调用或者返回之间原子和瞬间执行</p>\n</li>\n<li>\n<p>线性一致性，Linearizability，也称为原子一致性（atomic consistency），强一致性（strong consistency）等</p>\n</li>\n<li>\n<p>也就是通常所说的 CAP 理论中的 C</p>\n</li>\n</ul>\n<p>实现线性一致性需要满足三点：</p>\n<ul>\n<li>瞬间完成（原子性）</li>\n<li>发生在 Inv 和 Resp 两个事件之间</li>\n<li>反映出 “最新” 的值</li>\n</ul>\n<p>1 和 2 很好理解，但 “最新” 怎么理解呢？其实很简单就看写操作：<br />\n<img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220301144626139.png\" alt=\"image-20220301144626139\" /></p>\n<p>在图中，x 的值被写操作划分为 3 个区域，每个区域内对应最新的值，也就是说 “最新” 并不代表<strong>确定</strong>！</p>\n<h4 id=\"raft里的线性一致性\"><a class=\"anchor\" href=\"#raft里的线性一致性\">#</a> Raft 里的线性一致性</h4>\n<p>在 raft 里是这样定义的：</p>\n<ul>\n<li>同一个 client 的操作不能并发。</li>\n<li>如果读操作观察到写操作，那么读操作必须等待写操作完成之后才能执行。</li>\n</ul>\n<p>这样我们就可以把下面这种情况拆开，变成一个线性一致的操作。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturespicturespicturesimage-20220301122149285.png\" alt=\"image-20220301122149285\" /></p>\n<h3 id=\"遇到的问题\"><a class=\"anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h3>\n<h4 id=\"227日更新\"><a class=\"anchor\" href=\"#227日更新\">#</a> 2.27 日更新：</h4>\n<p>成功完成了 Lab2A，但是还遗留了一个问题，那就是为什么限制选举执行时间才能通过 test，按道理只要选举超时之后，之前选举的结果就会被废弃的。。。</p>\n<pre><code>Test (2A): initial election ...\nlabgob warning: Decoding into a non-default variable/field Term may not work\n  ... Passed --   3.0  3   56    6872    0\nTest (2A): election after network failure ...\n  ... Passed --   9.2  3  238   17813    0\nTest (2A): multiple elections ...\n  ... Passed --   6.5  7  642   55493    0\nPASS\nok  \t6.824/raft\t18.733s\n\n</code></pre>\n<h4 id=\"31号更新\"><a class=\"anchor\" href=\"#31号更新\">#</a> 3.1 号更新</h4>\n<p>raft 在 leader 当选之后会立即在 leader 的 log 中生成一条 no-hup 日志并通过 heartbeat 传递给其他 server。但是在 MIT6.824 实验中没办法实现 no-hup。</p>\n<h4 id=\"34-更新\"><a class=\"anchor\" href=\"#34-更新\">#</a> 3.4 更新</h4>\n<p>愉快通关！</p>\n",
            "tags": [
                "MIT6.824"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Artur-%E8%B0%83%E5%BA%A6%E5%99%A8/",
            "url": "https://songlinlife.top/2022/Artur-%E8%B0%83%E5%BA%A6%E5%99%A8/",
            "title": "Artur: 调度器",
            "date_published": "2022-02-25T13:46:15.000Z",
            "content_html": "<p>这玩意有点像我之前写过的 MapReduce，也是单 master 负责调度，多 worker 负责执行 task。并且一个 worker 只允许执行一个任务，但执行完任务后可以重新申请 task。</p>\n<p>Artur 就是负责之前 <code>perceval</code>  任务的调度，分为 <code>arthurd</code>  和  <code>arthurw</code> 。 <code>arthurd</code>  也就是服务端，负责 assign task。而  <code>arturw</code>  负责申请 task 然后执行。</p>\n<h3 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h3>\n<p><code>Arturd</code> ：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">arthur</span><span class=\"token punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">archive_path</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/tmp/.arthur/archive</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">debug</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">log_path</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/tmp/logs/arthurd</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">no_archive</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">True</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">sync_mode</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">connection</span><span class=\"token punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">127.0.0.1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">8080</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">elasticsearch</span><span class=\"token punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">es_index</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">http://localhost:9200/items</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">redis</span><span class=\"token punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">database</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">redis://localhost/8</span></pre></td></tr></table></figure><p>可以指定 port，用于提供服务。</p>\n<p><code>Arturw</code> ：</p>\n<pre><code class=\"language-sh\">arthurw -d redis://localhost/8\n</code></pre>\n<p>直接给 redis 数据库地址。</p>\n<h3 id=\"添加task\"><a class=\"anchor\" href=\"#添加task\">#</a> 添加 task</h3>\n<pre><code class=\"language-sh\">$ cat tasks.json\n&#123;\n    &quot;tasks&quot;: [\n        &#123;\n            &quot;task_id&quot;: &quot;arthur.git&quot;,\n            &quot;backend&quot;: &quot;git&quot;,\n            &quot;backend_args&quot;: &#123;\n                &quot;gitpath&quot;: &quot;/tmp/git/arthur.git/&quot;,\n                &quot;uri&quot;: &quot;https://github.com/chaoss/grimoirelab-kingarthur.git&quot;,\n                &quot;from_date&quot;: &quot;2015-03-01&quot;\n            &#125;,\n            &quot;category&quot;: &quot;commit&quot;,\n            &quot;scheduler&quot;: &#123;\n                &quot;delay&quot;: 10\n            &#125;\n        &#125;,\n        &#123;\n            &quot;task_id&quot;: &quot;bugzilla_mozilla&quot;,\n            &quot;backend&quot;: &quot;bugzillarest&quot;,\n            &quot;backend_args&quot;: &#123;\n                &quot;url&quot;: &quot;https://bugzilla.mozilla.org/&quot;,\n                &quot;from_date&quot;: &quot;2016-09-19&quot;\n            &#125;,\n            &quot;category&quot;: &quot;bug&quot;,\n            &quot;archive&quot;: &#123;\n                &quot;fetch_from_archive&quot;: true,\n                &quot;archived_after&quot;: &quot;2018-02-26 09:00&quot;\n            &#125;,\n            &quot;scheduler&quot;: &#123;\n                &quot;delay&quot;: 60,\n                &quot;max_retries&quot;: 5\n            &#125;\n        &#125;\n    ]\n&#125;\n</code></pre>\n<p>然后发送：</p>\n<pre><code class=\"language-sh\">curl -H &quot;Content-Type: application/json&quot; --data @tasks.json http://127.0.0.1:8080/add\n</code></pre>\n<p>可以这很 restful。</p>\n<h3 id=\"后续\"><a class=\"anchor\" href=\"#后续\">#</a> 后续</h3>\n<p>本来想自己运行一下的，但是呃呃我的 redis 镜像一直拉不下来，就懒得弄了。</p>\n",
            "tags": [
                "xlab"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Graal-%E5%AD%98%E5%82%A8%E5%BA%93%E5%88%86%E6%9E%90%E5%99%A8/",
            "url": "https://songlinlife.top/2022/Graal-%E5%AD%98%E5%82%A8%E5%BA%93%E5%88%86%E6%9E%90%E5%99%A8/",
            "title": "Graal: 存储库分析器",
            "date_published": "2022-02-25T12:08:11.000Z",
            "content_html": "<p>Graal leverages on the Git backend of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYW9zcy9ncmltb2lyZWxhYi1wZXJjZXZhbA==\">Perceval</span> and enhances it to set up ad-hoc source code analysis. Thus, it fetches the commits from a Git repository and provides a mechanism to plug third party tools/libraries focused on source code analysis.</p>\n<p>Graal 就是使用了之前提到的 perceval 组件的 git backend。拉取 repo 的 commits 并且提供一种方法使用第三方工具用于源码分析。</p>\n<h2 id=\"how-it-works\"><a class=\"anchor\" href=\"#how-it-works\">#</a> How it works</h2>\n<p>就是拉取一个 git repo 镜像以及 commits 的 meta data。通过创建工作树来执行 checkout 操作。Graal 获取 json 后，分为三步：</p>\n<ul>\n<li>Filter。通过 json 文档，选择或者丢弃 commit。然后在工作树上用 commit hash 来执行 checkout 操作。</li>\n<li>Analyze。就是引入分析工具。</li>\n<li>Post-process。最后一步处理 json 文档，比如删除或者重命名。</li>\n</ul>\n<h3 id=\"安装教程\"><a class=\"anchor\" href=\"#安装教程\">#</a> 安装教程</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYW9zcy9ncmltb2lyZWxhYi1ncmFhbA==\">https://github.com/chaoss/grimoirelab-graal</span></p>\n<h3 id=\"常见后端\"><a class=\"anchor\" href=\"#常见后端\">#</a> 常见后端</h3>\n<p><strong>CoCom</strong>: 代码复杂度分析。</p>\n<p><strong>CoDep</strong>：解析 python 模块的依赖并且转换为 json 格式，而且还可以使用 graph 可视化。</p>\n<p><strong>CoQua</strong>：检查代码的质量。</p>\n<p><strong>CoVuln</strong>：检查代码的安全性比如将在的 sql 注入、shell 注入。</p>\n<p><strong>CoLic</strong> ：扫描代码并且提取 licens 和版权信息。</p>\n<p><strong>CoLang</strong> ：获得 git repo 的代码语言分布洞察。</p>\n<h3 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h3>\n<p>和 <code>perceval</code>  相类似：</p>\n<pre><code class=\"language-sh\">$ graal cocom https://github.com/chaoss/grimoirelab-perceval --git-path /tmp/graal-cocom &gt; /graal-cocom.test\nStarting the quest for the Graal.\nGit worktree /tmp/... created!\nFetching commits: ...\nGit worktree /tmp/... deleted!\nFetch process completed: .. commits inspected\nQuest completed.\n</code></pre>\n<h4 id=\"python中\"><a class=\"anchor\" href=\"#python中\">#</a> python 中：</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#! /usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> graal<span class=\"token punctuation\">.</span>backends<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>cocom <span class=\"token keyword\">import</span> CoCom</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># URL for the git repo to analyze</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>repo_uri <span class=\"token operator\">=</span> ’http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>chaoss<span class=\"token operator\">/</span>grimoirelab<span class=\"token operator\">-</span>perceval’</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># directory where to mirror the repo</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>repo_dir <span class=\"token operator\">=</span> ’<span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>graal<span class=\"token operator\">-</span>cocom’</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># Cocom object initialization</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cc <span class=\"token operator\">=</span> CoCom<span class=\"token punctuation\">(</span>uri<span class=\"token operator\">=</span>repo_uri<span class=\"token punctuation\">,</span> git_path<span class=\"token operator\">=</span>repo_dir<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># fetch all commits</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>commits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>commit <span class=\"token keyword\">for</span> commit <span class=\"token keyword\">in</span> cc<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure>",
            "tags": [
                "xlab"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/MIT6.824/MIT6-824-The-Design-of-a-Practical-System-for-Fault-Tolerant-Virtual-Machines/",
            "url": "https://songlinlife.top/2022/MIT6.824/MIT6-824-The-Design-of-a-Practical-System-for-Fault-Tolerant-Virtual-Machines/",
            "title": "MIT6.824: The Design of a Practical System for Fault-Tolerant Virtual Machines",
            "date_published": "2022-02-25T02:18:21.000Z",
            "content_html": "<h3 id=\"错误容忍\"><a class=\"anchor\" href=\"#错误容忍\">#</a> 错误容忍</h3>\n<h3 id=\"论文\"><a class=\"anchor\" href=\"#论文\">#</a> 论文</h3>\n<h4 id=\"primarybackup\"><a class=\"anchor\" href=\"#primarybackup\">#</a> primary/backup</h4>\n<p>这篇 paper 提出了一种 VM 错误容忍的方法，简单来说就是设置 Primary/backup。primary 用于提供服务，而 backup 用于做 primary 的备份。如果 primary 挂掉之后，那么 backup 能够自动地接管服务，给外界 client 一种没有发生过故障的错觉。</p>\n<p>该方法的核心思想就是保证 primary 和 backup 状态相同，方法也很简单。primary 执行什么操作，backup 也执行什么操作。如果有一个不确定的信息，那么这些信息会被 primary 传送给 backup。这样保证若 backup 和 primary 一直状态相同。</p>\n<p>The Design of a Practical System for Fault-Tolerant</p>\n<h4 id=\"基本设计\"><a class=\"anchor\" href=\"#基本设计\">#</a> 基本设计</h4>\n<p>首先是 shared disk 架构，如图所示：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225110519498.png\" alt=\"image-20220225110519498\" /></p>\n<p>只有 primary 会被暴露在网络中，所以 client 的输入都会输出给 primary。primary 的所有输出都通过 logging channel 给传送给 backup。</p>\n<p>确定操作的三个要求：</p>\n<ul>\n<li>primary 必须捕获确定的和非确定的信息。</li>\n<li>确地将输入和不确定信息应用到 backup</li>\n<li>不能降低性能</li>\n</ul>\n<h4 id=\"ft协议\"><a class=\"anchor\" href=\"#ft协议\">#</a> FT 协议</h4>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225113932596.png\" alt=\"image-20220225113932596\" /></p>\n<p>primary 将 output operation 传递给 backup，并推迟 output，知道 backup 返回确认。但是这也有一个问题，如果 primary 发送 output operation 后立即挂了，那么 output 也会被发送 2 次。但是 tcp 协议可以处理这些重复包。</p>\n",
            "tags": [
                "MIT6.824"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/xlab/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Perceval/",
            "url": "https://songlinlife.top/2022/xlab/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Perceval/",
            "title": "数据采集组件——Perceval",
            "date_published": "2022-02-24T13:54:45.000Z",
            "content_html": "<h1 id=\"数据采集组件perceval\"><a class=\"anchor\" href=\"#数据采集组件perceval\">#</a> 数据采集组件 ——Perceval</h1>\n<h3 id=\"官方文档\"><a class=\"anchor\" href=\"#官方文档\">#</a> 官方文档</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZXJjZXZhbC5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3Qv\">https://perceval.readthedocs.io/en/latest/</span></p>\n<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYW9zcy9ncmltb2lyZWxhYi1wZXJjZXZhbA==\">Perceval</span> is a Python module for retrieving data from repositories related to software development. It works with many data sources, from git repositories and GitHub projects to mailing lists, Gerrit or StackOverflow, In this chapter, you will learn the basics of working with Perceval, including how to use it to retrieve information from some kinds of repositories. You’re on your way to software development analysis!</p>\n</blockquote>\n<p><code>perceval</code>  就是 <code>grimoirelab</code>  的数据源采集组件，也就是最基础的组件。</p>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<pre><code class=\"language-sh\">pip3 install perceval\n</code></pre>\n<p>或者也可以用 docker 方式：</p>\n<pre><code class=\"language-sh\">docker run -it grimoirelab/perceval\n</code></pre>\n<h3 id=\"食用方式\"><a class=\"anchor\" href=\"#食用方式\">#</a> 食用方式</h3>\n<p>这个工具说白了就是采集工具，它支持的后端有：</p>\n<pre><code>    askbot           Fetch questions and answers from Askbot site\n    bugzilla         Fetch bugs from a Bugzilla server\n    bugzillarest     Fetch bugs from a Bugzilla server (&gt;=5.0) using its REST API\n    confluence       Fetch contents from a Confluence server\n    discourse        Fetch posts from Discourse site\n    dockerhub        Fetch repository data from Docker Hub site\n    gerrit           Fetch reviews from a Gerrit server\n    git              Fetch commits from Git\n    github           Fetch issues, pull requests and repository information from GitHub\n    gitlab           Fetch issues, merge requests from GitLab\n    gitter           Fetch messages from a Gitter room\n    googlehits       Fetch hits from Google API\n    groupsio         Fetch messages from Groups.io\n    hyperkitty       Fetch messages from a HyperKitty archiver\n    jenkins          Fetch builds from a Jenkins server\n    jira             Fetch issues from JIRA issue tracker\n    launchpad        Fetch issues from Launchpad issue tracker\n    mattermost       Fetch posts from a Mattermost server\n    mbox             Fetch messages from MBox files\n    mediawiki        Fetch pages and revisions from a MediaWiki site\n    meetup           Fetch events from a Meetup group\n    nntp             Fetch articles from a NNTP news group\n    pagure           Fetch issues from Pagure\n    phabricator      Fetch tasks from a Phabricator site\n    pipermail        Fetch messages from a Pipermail archiver\n    redmine          Fetch issues from a Redmine server\n    rocketchat       Fetch messages from a Rocket.Chat channel\n    rss              Fetch entries from a RSS feed server\n    slack            Fetch messages from a Slack channel\n    stackexchange    Fetch questions from StackExchange sites\n    supybot          Fetch messages from Supybot log files\n    telegram         Fetch messages from the Telegram server\n    twitter          Fetch tweets from the Twitter Search API\n</code></pre>\n<p>有点意外，我没有想到连 Twitter 都能支持。。。。</p>\n<h4 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> git</h4>\n<pre><code class=\"language-sh\">time perceval git https://github.com/grimoirelab/perceval.git \\\n  --git-path /tmp/perceval.git &gt; /tmp/perceval.test\n</code></pre>\n<p>这条命令会将拉取到的 git commit 数据保存到对应了文件，格式为 json。</p>\n<p>同时还支持 python 脚本的方式：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#! /usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> perceval<span class=\"token punctuation\">.</span>backends<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>git <span class=\"token keyword\">import</span> Git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># url for the git repo to analyze</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>repo_url <span class=\"token operator\">=</span> <span class=\"token string\">'http://github.com/grimoirelab/perceval.git'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># directory for letting Perceval clone the git repo</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>repo_dir <span class=\"token operator\">=</span> <span class=\"token string\">'/tmp/perceval.git'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># create a Git object, pointing to repo_url, using repo_dir for cloning</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>repo <span class=\"token operator\">=</span> Git<span class=\"token punctuation\">(</span>uri<span class=\"token operator\">=</span>repo_url<span class=\"token punctuation\">,</span> gitpath<span class=\"token operator\">=</span>repo_dir<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># fetch all commits as an iterator, and iterate it printing each hash</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> commit <span class=\"token keyword\">in</span> repo<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>commit<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'commit'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"github\"><a class=\"anchor\" href=\"#github\">#</a> github</h4>\n<pre><code class=\"language-sh\"> perceval github grimoirelab perceval --sleep-for-rate \\\n    -t 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 &gt; ~/tmp/github.json\n</code></pre>\n<p>通过 perceval  backend repoOwner 这种方式来获取数据</p>\n<p>通过  <code>--category issue</code>  来指定获取 issue 信息，值得注意的是 github 会把 pr 当做 issue 进行处理，所以也会自动得到所有 pr 信息。</p>\n<pre><code class=\"language-获取数据格式\">&#123;\n    &quot;backend_name&quot;: &quot;GitHub&quot;,\n    &quot;backend_version&quot;: &quot;0.27.0&quot;,\n    &quot;category&quot;: &quot;issue&quot;,\n    &quot;classified_fields_filtered&quot;: null,\n    &quot;data&quot;: &#123;\n        &quot;active_lock_reason&quot;: null,\n        &quot;assignee&quot;: null,\n        &quot;assignee_data&quot;: &#123;&#125;,\n        &quot;assignees&quot;: [],\n        &quot;assignees_data&quot;: [],\n        &quot;author_association&quot;: &quot;CONTRIBUTOR&quot;,\n        &quot;body&quot;: &quot;Based on Sphynx, prepared for ReadTheDocs.\\n\\nRight now, this produces (from jgbarah/perceval repository) [this documentation in ReadTheDocs](http://perceval.readthedocs.org). Once this PR is accepted, I plan to switch ReadTheDocs to point to this repostory (master branch), so that the documentation gets rebuilt every time changes are made to the source code.\\n\\nThe configuration (docs/conf.py) include lines for running sphinx-apidoc, which generates automatically the docs/perceval.rst file, which is the entry point for the automatically generated documentation, produced based on the docstring comments in the source code.\\n\\nThe file index.rst is still a bare bones schema. It should be completed in a later patch, with more detailed information about Perceval itself.\\n&quot;,\n        &quot;closed_at&quot;: &quot;2016-01-04T13:51:56Z&quot;,\n        &quot;comments&quot;: 0,\n        &quot;comments_data&quot;: [],\n        &quot;comments_url&quot;: &quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/comments&quot;,\n        &quot;created_at&quot;: &quot;2016-01-03T23:46:04Z&quot;,\n        &quot;draft&quot;: false,\n        &quot;events_url&quot;: &quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/events&quot;,\n        &quot;html_url&quot;: &quot;https://github.com/chaoss/grimoirelab-perceval/pull/3&quot;,\n        &quot;id&quot;: 124679251,\n        &quot;labels&quot;: [],\n        &quot;labels_url&quot;: &quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/labels&#123;/name&#125;&quot;,\n        &quot;locked&quot;: false,\n        &quot;milestone&quot;: null,\n        &quot;node_id&quot;: &quot;MDExOlB1bGxSZXF1ZXN0NTQ5MzUxODA=&quot;,\n        &quot;number&quot;: 3,\n        &quot;performed_via_github_app&quot;: null,\n        &quot;pull_request&quot;: &#123;\n            &quot;diff_url&quot;: &quot;https://github.com/chaoss/grimoirelab-perceval/pull/3.diff&quot;,\n            &quot;html_url&quot;: &quot;https://github.com/chaoss/grimoirelab-perceval/pull/3&quot;,\n            &quot;merged_at&quot;: null,\n            &quot;patch_url&quot;: &quot;https://github.com/chaoss/grimoirelab-perceval/pull/3.patch&quot;,\n            &quot;url&quot;: &quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/3&quot;\n        &#125;,\n        &quot;reactions&quot;: &#123;\n            &quot;+1&quot;: 0,\n            &quot;-1&quot;: 0,\n            &quot;confused&quot;: 0,\n            &quot;eyes&quot;: 0,\n            &quot;heart&quot;: 0,\n            &quot;hooray&quot;: 0,\n            &quot;laugh&quot;: 0,\n            &quot;rocket&quot;: 0,\n            &quot;total_count&quot;: 0,\n            &quot;url&quot;: &quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/reactions&quot;\n        &#125;,\n        &quot;reactions_data&quot;: [],\n        &quot;repository_url&quot;: &quot;https://api.github.com/repos/chaoss/grimoirelab-perceval&quot;,\n        &quot;state&quot;: &quot;closed&quot;,\n        &quot;timeline_url&quot;: &quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/timeline&quot;,\n        &quot;title&quot;: &quot;Config files for a documentation, using Sphinx.&quot;,\n        &quot;updated_at&quot;: &quot;2016-01-04T17:42:23Z&quot;,\n        &quot;url&quot;: &quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3&quot;,\n        &quot;user&quot;: &#123;\n            &quot;avatar_url&quot;: &quot;https://avatars.githubusercontent.com/u/1039693?v=4&quot;,\n            &quot;events_url&quot;: &quot;https://api.github.com/users/jgbarah/events&#123;/privacy&#125;&quot;,\n            &quot;followers_url&quot;: &quot;https://api.github.com/users/jgbarah/followers&quot;,\n            &quot;following_url&quot;: &quot;https://api.github.com/users/jgbarah/following&#123;/other_user&#125;&quot;,\n            &quot;gists_url&quot;: &quot;https://api.github.com/users/jgbarah/gists&#123;/gist_id&#125;&quot;,\n            &quot;gravatar_id&quot;: &quot;&quot;,\n            &quot;html_url&quot;: &quot;https://github.com/jgbarah&quot;,\n            &quot;id&quot;: 1039693,\n            &quot;login&quot;: &quot;jgbarah&quot;,\n            &quot;node_id&quot;: &quot;MDQ6VXNlcjEwMzk2OTM=&quot;,\n            &quot;organizations_url&quot;: &quot;https://api.github.com/users/jgbarah/orgs&quot;,\n            &quot;received_events_url&quot;: &quot;https://api.github.com/users/jgbarah/received_events&quot;,\n            &quot;repos_url&quot;: &quot;https://api.github.com/users/jgbarah/repos&quot;,\n            &quot;site_admin&quot;: false,\n            &quot;starred_url&quot;: &quot;https://api.github.com/users/jgbarah/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,\n            &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/jgbarah/subscriptions&quot;,\n            &quot;type&quot;: &quot;User&quot;,\n            &quot;url&quot;: &quot;https://api.github.com/users/jgbarah&quot;\n        &#125;,\n        &quot;user_data&quot;: &#123;\n            &quot;avatar_url&quot;: &quot;https://avatars.githubusercontent.com/u/1039693?v=4&quot;,\n            &quot;bio&quot;: null,\n            &quot;blog&quot;: &quot;http://gsyc.es/~jgb&quot;,\n            &quot;company&quot;: null,\n            &quot;created_at&quot;: &quot;2011-09-09T21:47:40Z&quot;,\n            &quot;email&quot;: null,\n            &quot;events_url&quot;: &quot;https://api.github.com/users/jgbarah/events&#123;/privacy&#125;&quot;,\n            &quot;followers&quot;: 100,\n            &quot;followers_url&quot;: &quot;https://api.github.com/users/jgbarah/followers&quot;,\n            &quot;following&quot;: 0,\n            &quot;following_url&quot;: &quot;https://api.github.com/users/jgbarah/following&#123;/other_user&#125;&quot;,\n            &quot;gists_url&quot;: &quot;https://api.github.com/users/jgbarah/gists&#123;/gist_id&#125;&quot;,\n            &quot;gravatar_id&quot;: &quot;&quot;,\n            &quot;hireable&quot;: null,\n            &quot;html_url&quot;: &quot;https://github.com/jgbarah&quot;,\n            &quot;id&quot;: 1039693,\n            &quot;location&quot;: null,\n            &quot;login&quot;: &quot;jgbarah&quot;,\n            &quot;name&quot;: &quot;Jesus M. Gonzalez-Barahona&quot;,\n            &quot;node_id&quot;: &quot;MDQ6VXNlcjEwMzk2OTM=&quot;,\n            &quot;organizations&quot;: [\n                &#123;\n                    &quot;avatar_url&quot;: &quot;https://avatars.githubusercontent.com/u/1843608?v=4&quot;,\n                    &quot;description&quot;: null,\n                    &quot;events_url&quot;: &quot;https://api.github.com/orgs/MetricsGrimoire/events&quot;,\n                    &quot;hooks_url&quot;: &quot;https://api.github.com/orgs/MetricsGrimoire/hooks&quot;,\n                    &quot;id&quot;: 1843608,\n                    &quot;issues_url&quot;: &quot;https://api.github.com/orgs/MetricsGrimoire/issues&quot;,\n                    &quot;login&quot;: &quot;MetricsGrimoire&quot;,\n                    &quot;members_url&quot;: &quot;https://api.github.com/orgs/MetricsGrimoire/members&#123;/member&#125;&quot;,\n                    &quot;node_id&quot;: &quot;MDEyOk9yZ2FuaXphdGlvbjE4NDM2MDg=&quot;,\n                    &quot;public_members_url&quot;: &quot;https://api.github.com/orgs/MetricsGrimoire/public_members&#123;/member&#125;&quot;,\n                    &quot;repos_url&quot;: &quot;https://api.github.com/orgs/MetricsGrimoire/repos&quot;,\n                    &quot;url&quot;: &quot;https://api.github.com/orgs/MetricsGrimoire&quot;\n                &#125;,\n                &#123;\n                    &quot;avatar_url&quot;: &quot;https://avatars.githubusercontent.com/u/1918070?v=4&quot;,\n                    &quot;description&quot;: null,\n                    &quot;events_url&quot;: &quot;https://api.github.com/orgs/Bitergia/events&quot;,\n                    &quot;hooks_url&quot;: &quot;https://api.github.com/orgs/Bitergia/hooks&quot;,\n                    &quot;id&quot;: 1918070,\n                    &quot;issues_url&quot;: &quot;https://api.github.com/orgs/Bitergia/issues&quot;,\n                    &quot;login&quot;: &quot;Bitergia&quot;,\n                    &quot;members_url&quot;: &quot;https://api.github.com/orgs/Bitergia/members&#123;/member&#125;&quot;,\n                    &quot;node_id&quot;: &quot;MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=&quot;,\n                    &quot;public_members_url&quot;: &quot;https://api.github.com/orgs/Bitergia/public_members&#123;/member&#125;&quot;,\n                    &quot;repos_url&quot;: &quot;https://api.github.com/orgs/Bitergia/repos&quot;,\n                    &quot;url&quot;: &quot;https://api.github.com/orgs/Bitergia&quot;\n                &#125;,\n                &#123;\n                    &quot;avatar_url&quot;: &quot;https://avatars.githubusercontent.com/u/2191340?v=4&quot;,\n                    &quot;description&quot;: null,\n                    &quot;events_url&quot;: &quot;https://api.github.com/orgs/VizGrimoire/events&quot;,\n                    &quot;hooks_url&quot;: &quot;https://api.github.com/orgs/VizGrimoire/hooks&quot;,\n                    &quot;id&quot;: 2191340,\n                    &quot;issues_url&quot;: &quot;https://api.github.com/orgs/VizGrimoire/issues&quot;,\n                    &quot;login&quot;: &quot;VizGrimoire&quot;,\n                    &quot;members_url&quot;: &quot;https://api.github.com/orgs/VizGrimoire/members&#123;/member&#125;&quot;,\n                    &quot;node_id&quot;: &quot;MDEyOk9yZ2FuaXphdGlvbjIxOTEzNDA=&quot;,\n                    &quot;public_members_url&quot;: &quot;https://api.github.com/orgs/VizGrimoire/public_members&#123;/member&#125;&quot;,\n                    &quot;repos_url&quot;: &quot;https://api.github.com/orgs/VizGrimoire/repos&quot;,\n                    &quot;url&quot;: &quot;https://api.github.com/orgs/VizGrimoire&quot;\n                &#125;,\n                &#123;\n                    &quot;avatar_url&quot;: &quot;https://avatars.githubusercontent.com/u/3017044?v=4&quot;,\n                    &quot;description&quot;: null,\n                    &quot;events_url&quot;: &quot;https://api.github.com/orgs/AlertProject/events&quot;,\n                    &quot;hooks_url&quot;: &quot;https://api.github.com/orgs/AlertProject/hooks&quot;,\n                    &quot;id&quot;: 3017044,\n                    &quot;issues_url&quot;: &quot;https://api.github.com/orgs/AlertProject/issues&quot;,\n                    &quot;login&quot;: &quot;AlertProject&quot;,\n                    &quot;members_url&quot;: &quot;https://api.github.com/orgs/AlertProject/members&#123;/member&#125;&quot;,\n                    &quot;node_id&quot;: &quot;MDEyOk9yZ2FuaXphdGlvbjMwMTcwNDQ=&quot;,\n                    &quot;public_members_url&quot;: &quot;https://api.github.com/orgs/AlertProject/public_members&#123;/member&#125;&quot;,\n                    &quot;repos_url&quot;: &quot;https://api.github.com/orgs/AlertProject/repos&quot;,\n                    &quot;url&quot;: &quot;https://api.github.com/orgs/AlertProject&quot;\n                &#125;,\n                &#123;\n                    &quot;avatar_url&quot;: &quot;https://avatars.githubusercontent.com/u/16151805?v=4&quot;,\n                    &quot;description&quot;: &quot;&quot;,\n                    &quot;events_url&quot;: &quot;https://api.github.com/orgs/grimoirelab/events&quot;,\n                    &quot;hooks_url&quot;: &quot;https://api.github.com/orgs/grimoirelab/hooks&quot;,\n                    &quot;id&quot;: 16151805,\n                    &quot;issues_url&quot;: &quot;https://api.github.com/orgs/grimoirelab/issues&quot;,\n                    &quot;login&quot;: &quot;grimoirelab&quot;,\n                    &quot;members_url&quot;: &quot;https://api.github.com/orgs/grimoirelab/members&#123;/member&#125;&quot;,\n                    &quot;node_id&quot;: &quot;MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1&quot;,\n                    &quot;public_members_url&quot;: &quot;https://api.github.com/orgs/grimoirelab/public_members&#123;/member&#125;&quot;,\n                    &quot;repos_url&quot;: &quot;https://api.github.com/orgs/grimoirelab/repos&quot;,\n                    &quot;url&quot;: &quot;https://api.github.com/orgs/grimoirelab&quot;\n                &#125;\n            ],\n            &quot;organizations_url&quot;: &quot;https://api.github.com/users/jgbarah/orgs&quot;,\n            &quot;public_gists&quot;: 0,\n            &quot;public_repos&quot;: 41,\n            &quot;received_events_url&quot;: &quot;https://api.github.com/users/jgbarah/received_events&quot;,\n            &quot;repos_url&quot;: &quot;https://api.github.com/users/jgbarah/repos&quot;,\n            &quot;site_admin&quot;: false,\n            &quot;starred_url&quot;: &quot;https://api.github.com/users/jgbarah/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,\n            &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/jgbarah/subscriptions&quot;,\n            &quot;twitter_username&quot;: null,\n            &quot;type&quot;: &quot;User&quot;,\n            &quot;updated_at&quot;: &quot;2022-02-16T16:51:43Z&quot;,\n            &quot;url&quot;: &quot;https://api.github.com/users/jgbarah&quot;\n        &#125;\n    &#125;,\n    &quot;origin&quot;: &quot;https://github.com/grimoirelab/perceval&quot;,\n    &quot;perceval_version&quot;: &quot;0.17.16&quot;,\n    &quot;search_fields&quot;: &#123;\n        &quot;item_id&quot;: &quot;124679251&quot;,\n        &quot;owner&quot;: &quot;grimoirelab&quot;,\n        &quot;repo&quot;: &quot;perceval&quot;\n    &#125;,\n    &quot;tag&quot;: &quot;https://github.com/grimoirelab/perceval&quot;,\n    &quot;timestamp&quot;: 1645709133.739694,\n    &quot;updated_on&quot;: 1451929343.0,\n    &quot;uuid&quot;: &quot;c403532b196ed4020cc86d001feb091c009d3d26&quot;\n&#125;\n</code></pre>\n<h3 id=\"获取器的架构\"><a class=\"anchor\" href=\"#获取器的架构\">#</a> 获取器的架构</h3>\n<p>Client: interacts directly with the data source.</p>\n<p>Backend: orchestrates the fetching process by using the Client.</p>\n<p>CommandLine: defines the arguments to initialize and run the Backend from the command line.</p>\n",
            "tags": [
                "xlab"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/MIT6.824/MIT6-824-GFS/",
            "url": "https://songlinlife.top/2022/MIT6.824/MIT6-824-GFS/",
            "title": "MIT6.824: GFS",
            "date_published": "2022-02-23T02:56:45.000Z",
            "content_html": "<h3 id=\"gfsgoogle-file-system\"><a class=\"anchor\" href=\"#gfsgoogle-file-system\">#</a> GFS（Google File System）</h3>\n<blockquote>\n<p>In this paper, we present file system interface extensions designed to support distributed applications, discuss many aspects of our design, and report measurements from both micro-benchmarks and real world use.</p>\n</blockquote>\n<p>这篇文章介绍旨在<strong>支持分布式应用程序的文件系统接口扩展</strong>，讨论了我们设计的许多方面，并报告了从微基准测试和真实世界使用两方面的测量结果。</p>\n<h4 id=\"keywords\"><a class=\"anchor\" href=\"#keywords\">#</a> Keywords</h4>\n<p>Fault tolerance, scalability, data storage, clustered storage</p>\n<h4 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\">#</a> Introduction</h4>\n<blockquote>\n<p>constant monitoring, error detection, fault tolerance, and automatic recovery must be integral to the system.</p>\n</blockquote>\n<p>作者认为持续监控，错误检测，故障容忍，自动恢复是系统的关键所在。</p>\n<h4 id=\"设计理念\"><a class=\"anchor\" href=\"#设计理念\">#</a> 设计理念</h4>\n<ul>\n<li>系统由许多便宜的机器组成，所以经常会有 fail 情况，监控、检测、故障恢复是日常。</li>\n<li>系统会存储很多 GB 级别的大文件。</li>\n<li>读负载主要分为两种：大流式读和小的随机读。</li>\n<li>写负载通常是 append data。也就是说文件是被 append 而不是修改。因此一个文件一旦写完之后就很少被修改。</li>\n<li>系统实现了多客户端并发 append 同一个文件</li>\n<li>高稳定带宽比低延迟更重要。</li>\n</ul>\n<h4 id=\"架构\"><a class=\"anchor\" href=\"#架构\">#</a> 架构</h4>\n<p>一个 master 机（以及多个 master 机的 remote 副本），多个 chunkservers，以及多个 clients。</p>\n<p>每一个 chunk 有 64M，并且被一个 64bit 的 chunk handle 给唯一标识。chunkhandle 是 chunk 创建时由 master 机分配的，并且如果 client 要访问 chunk 并且持有 chunk handle。</p>\n<h4 id=\"读操作\"><a class=\"anchor\" href=\"#读操作\">#</a> 读操作</h4>\n<ol>\n<li>client 将 filename 和 byte offset 转成 chunk index。</li>\n<li>client 向 master 发送 request，包含 chunk index 和 filename</li>\n<li>master 返回 chunk handle 和副本的 location。</li>\n<li>client 使用 filename 和 chunk index 作为 key，将 master 返回的数据作为 value，缓存起来。这样 client 在一段时间内就可以不用再和 master 沟通了。</li>\n<li>client 访问距离它最近的 replicas。</li>\n</ol>\n<h4 id=\"metadata\"><a class=\"anchor\" href=\"#metadata\">#</a> MetaData</h4>\n<p>三种主要的 MetaData：the file and chunk namespaces, the mapping from files to chunks, and the locations of each chunk’s replicas。</p>\n<p>主要 MetaData 都是存放在 Master 机的内存中，但是 <code>namespace</code>  和 <code>mapping</code>  是会写到 local disk 的 log 中，并且在 remote 机中存放备份。但是 location 不会有持续存储。</p>\n<p>因为集群经常会有机器加入、宕机、重启等情况，所以持续化存储 location 不是一个好的选择，最好还是周期性询问 chunkservers。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223133116965.png\" alt=\"image-20220223133116965\" /></p>\n<h4 id=\"consistent和defined\"><a class=\"anchor\" href=\"#consistent和defined\">#</a> consistent 和 defined</h4>\n<p>如果所有 client 看到相同的数据，就被认为是 consistent。</p>\n<p>如果文件数据改动后，file region 还是 consistent 的，并且所有 client 都会看到 mutation writes 的全部内容，那么就说明 region 是_defined_。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225093959514.png\" alt=\"image-20220225093959514\" /></p>\n<p>对于 GFS 来说，write 和 append 虽然都是 mutation 但是他们还是有不同的。</p>\n<h4 id=\"write和append\"><a class=\"anchor\" href=\"#write和append\">#</a> Write 和 Append</h4>\n<p>说实话我读第一遍论文时候搞不懂为什么 write 操作是 undefined 但 consistent 而 Record Append 操作是 defined 但 inconsistent。其实这个不同点就是 GFS 设计的巧妙之处，write chunk 操作需要制定 offset，而 Append 操作则不用。</p>\n<p>教授关于 Append 操作的这个例子讲的很好：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225095400456.png\" alt=\"image-20220225095400456\" /></p>\n<p>对于 append 操作，如果第一次 Append 操作失败之后，那么会重新发起 append 请求，也就是 primary 再写一遍然后让其他副本也写一遍，那么问题就来了，之前的 Append 操作中，有的 replicas 成功写入了 data，有的没有。失败的操作不会要求这些 replicas 删除之前 append 失败操作写的数据，而是重新再尾部进行 Append，并且要求同一个 Records 在所有的 replicas 中具有相同的 offset。那么很显然上述的三个 replicas 中数据是不一致的，但我们可以看到每一个 append 操作写的数据，数据不会被覆盖，那么他就是一个 defined 操作。</p>\n<p>对于 write 操作，因为所有 client 机并发写相同的 offset，那么及时失败后，有的 replicas 写了，有的没有，那么在下一次重新发起 Write 操作中，会写覆盖掉之前写的数据。因此 write 操作是一致的，并且因为写覆盖，我们没法知道到底是什么序列写的，所有是 undefined。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225094811181.png\" alt=\"image-20220225094811181\" /></p>\n<h4 id=\"snapshot\"><a class=\"anchor\" href=\"#snapshot\">#</a> snapshot</h4>\n<p>说实话，我没看懂块引用。。。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223150359437.png\" alt=\"image-20220223150359437\" /></p>\n<h3 id=\"上课\"><a class=\"anchor\" href=\"#上课\">#</a> 上课</h3>\n<p>consistency 会导致 low performance</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223182829839.png\" alt=\"image-20220223182829839\" /></p>\n<p>不好的分布式系统：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223184155101.png\" alt=\"image-20220223184155101\" /></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223185145057.png\" alt=\"image-20220223185145057\" /></p>\n",
            "tags": [
                "MIT6.824"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/MIT6.824/MIT6-824-mapreduce/",
            "url": "https://songlinlife.top/2022/MIT6.824/MIT6-824-mapreduce/",
            "title": "MIT6.824: mapreduce",
            "date_published": "2022-02-20T02:28:51.000Z",
            "content_html": "<h3 id=\"开新坑了\"><a class=\"anchor\" href=\"#开新坑了\">#</a> 开新坑了！</h3>\n<p>令人感叹，自己虽然开了很多个坑，但是能够完成的却很少，这次的 MIT6.824 是我确定学的一门课程，要想入门分布式绕不开的一门课，没办法，老老实实学一次，把所有的 lab 做完，这就是我的目标！</p>\n<h3 id=\"论文阅读\"><a class=\"anchor\" href=\"#论文阅读\">#</a> 论文阅读</h3>\n<p>因为这门课必须要看论文，所以就很痛苦。。。</p>\n<h4 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h4>\n<p>原有的计算是很简单的，但是因为数据很大需要做成分布式系统，所以如何 <code>并行化计算</code> 、 <code>分发数据</code> 和 <code>处理故障</code> 等问题使得原本简单的计算变得晦涩难懂，需要大量复杂的代码来处理这些问题。</p>\n<h4 id=\"mapreduce函数\"><a class=\"anchor\" href=\"#mapreduce函数\">#</a> MapReduce 函数</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">map</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> String value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// key: document name</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// value: document contents</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> each word w in value<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token function\">EmitIntermediate</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> Iterator values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// key: a word</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// values: a list of counts</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> each v in values<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \tresult <span class=\"token operator\">+=</span> <span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Emit</span><span class=\"token punctuation\">(</span><span class=\"token function\">AsString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>map 用于发射中间键值对，而 reduce 函数则负责对中间键值对中相同的 key 进行 aggregate 处理。</p>\n<h4 id=\"执行概述\"><a class=\"anchor\" href=\"#执行概述\">#</a> 执行概述</h4>\n<p>首先明确 map 机和 reduce 机组成了一个分布式系统，所以这里有一个 master 机用于 assign 任务。</p>\n<ol>\n<li>将 raw data 切分为 M 个 splits。每一个 split 大小可以由用户进行指定。</li>\n<li>master 机将 map 任务和 reduce 任务分别自拍给不同的 workers。</li>\n<li>map 机读取 input split，通过 <code>Map</code>  函数将 k/v 对进行输出。这些中间键值对缓存在 map 机的内存中。</li>\n<li>这些缓存的键值对会定期存本地磁盘，同时会被分区函数分为 R 个 regions。可以用 hash (key) mod R。local disk 的位置会被发送给 master 即，master 机来告诉 reduce 机存储位置。</li>\n<li>reduce 机被 master 机告知存储位置后，通过 rpc 远程调用来读取有 map 机制造的缓存 kv 中间对。当 reduce 机读取完了所有的数据后，会通过 sort 操作来将相同 key 进行 group。因为中间数据可以过大，以至于难以读入到内存中，因此 sort 操作是必须的。</li>\n<li>reduce 即使用 <code>Reduce</code>  函数来对这些数据进行处理，并将数据输出到最终的分区。</li>\n<li>当 mapreduce 操作执行完毕后，master 机负责唤醒用户程序，并把 MapReduce 调用输出返回给用户程序。</li>\n</ol>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220220115958846.png\" alt=\"image-20220220115958846\" /></p>\n<h4 id=\"使用例子\"><a class=\"anchor\" href=\"#使用例子\">#</a> 使用例子</h4>\n<p>计算 URL 的频率，这个就和 wordcount 函数相同。</p>\n<p>ReverseWeb-Link Graph: map 函数输出 &lt;target, source&gt;，target 是对应的 url，而 source 就是 target url 出现的网页 URL，而 reduce 负责将 source 进行 concat，输出 &lt; target, list (source)&gt;</p>\n<p>Inverted Index: 和上面的例子类似。</p>\n<h3 id=\"分布式系统的特性\"><a class=\"anchor\" href=\"#分布式系统的特性\">#</a> 分布式系统的特性</h3>\n<h4 id=\"错误容忍\"><a class=\"anchor\" href=\"#错误容忍\">#</a> 错误容忍</h4>\n<p>Availability：即使一些机器发生了故障，系统依旧可以提供无误的服务，注意，如果很多机器都宕机，available system 仍然会停止运行，但得到修复后，系统可以继续正确运行。</p>\n<p>Recoverability：系统发生故障后，经过修复仍然可以正确运行，因此 Availability 就包含了系统需要 Recoverability。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220221152942785.png\" alt=\"image-20220221152942785\" /></p>\n<h3 id=\"lab1\"><a class=\"anchor\" href=\"#lab1\">#</a> LAB1</h3>\n<h4 id=\"job\"><a class=\"anchor\" href=\"#job\">#</a> Job</h4>\n<p>实现分布式 MapReduce，包含两个程序，master 和 worker。worker 和 master 之间通信通过 RPC，每个 worker process 将会向 master 询问任务，读取任务输入，执行任务，并将任务结果输出到一个或多个文件中。如果 worker 不不能在 10s 的时间内完成任务，master 需要将任务分配给另一个 worker。</p>\n<p>执行过程：</p>\n<p>生成插件</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">go</span> build <span class=\"token operator\">-</span>buildmode<span class=\"token operator\">=</span>plugin <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>mrapps<span class=\"token operator\">/</span>wc<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span></pre></td></tr></table></figure><p>在 main 目录下执行：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">go</span> run mrmaster<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span> pg<span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>txt</pre></td></tr></table></figure><p>这个就是 master 函数</p>\n<p>执行 worker</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">go</span> run mrworker<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span> wc<span class=\"token punctuation\">.</span>so</pre></td></tr></table></figure><h4 id=\"需要遵守的规则\"><a class=\"anchor\" href=\"#需要遵守的规则\">#</a> 需要遵守的规则</h4>\n<ol>\n<li>map 函数传递的中间 key 需要分配到 nReduce 个 bucket 中，而 <code>NReduce</code>  这个参数会被 <code>main/mrmaster.go</code>  传递给 <code>MakeMaster()</code></li>\n<li>结果需要保持为 <code>mr-out-X</code>  这种格式，其中 <code>X</code>  是 <code>reduce</code>  的编号。</li>\n<li><code>mr-out-x</code>  文件中每一行记录了 reduce 的输出，并且格式为  <code>%v %v</code></li>\n<li>只能改动这三个文件 <code>mr/worker.go</code> ,  <code>mr/master.go</code> ,  <code>mr/rpc.go</code> 。</li>\n<li>worker 需要把 map 的中间结果保存到当前目录中。</li>\n<li>mr/master.go 中需要实现 <code>Done()</code>  方法，如果返回 <code>true</code>  表示 MapReduce 任务执行完成，  <code>mrmaster.go</code>  才会退出。</li>\n<li>worker 还需要实现 <code>call</code>  方法，如果 worker 不能和 master 进行沟通，那么 worker 就会终止。（还可以实现一个 pseudo-task，这个任务就是”please exit&quot;.</li>\n</ol>\n<h4 id=\"提示\"><a class=\"anchor\" href=\"#提示\">#</a> 提示</h4>\n<ol>\n<li><code>mr/worker.go</code>  通过 RPC 向 master 进行 task，master 发送一个还没进过 map 的文件名，然后 worker 就开始读取这个文件并调用 Map 函数。</li>\n<li>Map 和 Reduce 函数不用自己写，已经在 plugin 保重实现了。</li>\n<li>每次都要先 ``go build -buildmode=plugin ../mrapps/wc.go`</li>\n<li><code>mr-X-Y</code>  的方式给中间文件命名，X 值 Map task， Y 指 Reduce task。</li>\n<li>kv 键值对可以使用 json 文件格式进行存储。</li>\n<li>The map part of your worker can use the  <code>ihash(key)</code>  function (in  <code>worker.go</code> ) to pick the reduce task for a given key。也就是说 <code>ihash</code>  方式在 map 阶段就知道这个 key 该由哪个 reduce 进行处理。</li>\n<li><code>mrsequential.go</code>  的代码可以借鉴。<strong>注意 sort。</strong></li>\n<li>master 作为 RPC 服务器，它是并发的，所以到注意加锁。</li>\n<li><code>go build -race</code>  可以用作检查并发。</li>\n<li>所有的 map 执行完毕之后 reduce 才会执行，所以 reduce worker 需要等待。</li>\n<li>对于执行超时的 worker，master 需要重新分配任务。</li>\n<li><code>mrapps/crash.go</code>  用于检测崩溃回复。</li>\n<li>map 函数先用一个临时文件写中间数据，当所有的数据写完之后，在将文件名自动重命名。</li>\n</ol>\n<h4 id=\"遇到的问题\"><a class=\"anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h4>\n<ol>\n<li>taskstate 0 空闲 1 处理中 2 处理完毕</li>\n<li>坑点：只有当前 worker 执行完了一个 maptask 或者 reduce task 才能再执行 map 或者 reduce task。不能在一个 worker 机上同时并发执行多个 Map 或 reduce 函数。</li>\n<li>写中间文件需要使用 os.O_TRUNC，不然执行 sh 脚本会出错。</li>\n<li>最后的测试点只能用 Sock 方式进行 rpc，不能用 tcp 方式。</li>\n</ol>\n<h4 id=\"repo\"><a class=\"anchor\" href=\"#repo\">#</a> Repo</h4>\n<p>代码放在了 github 上：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NvbmdsaW5MaWZlL01hcFJlZHVjZQ==\">MapReduce</span></p>\n<p>完成了所有测试点：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220224114038738.png\" alt=\"image-20220224114038738\" /></p>\n",
            "tags": [
                "MIT6.824"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Bot/Bot-%E8%8E%B7%E5%8F%96%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE/",
            "url": "https://songlinlife.top/2022/Bot/Bot-%E8%8E%B7%E5%8F%96%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE/",
            "title": "Bot: 获取基础数据",
            "date_published": "2022-02-19T08:46:11.000Z",
            "content_html": "<h3 id=\"筛选账号\"><a class=\"anchor\" href=\"#筛选账号\">#</a> 筛选账号</h3>\n<p>我的初始想法是先获取头部前 10000 名活跃的 github 账号。</p>\n<p>github 日志数据有的 action 种类：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PublicEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"WatchEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"started\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IssueCommentEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"created\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ForkEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PullRequestEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"opened\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CreateEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DeleteEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PullRequestEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"closed\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PushEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IssuesEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"reopened\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IssuesEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"closed\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PullRequestReviewCommentEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"created\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IssuesEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"opened\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MemberEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"added\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CommitCommentEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ReleaseEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"published\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GollumEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"PullRequestEvent\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"reopened\"</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>对于这些行为，我目前还没法确认哪些是 github bot 账号不能有的。</p>\n<p>所以，我打算先直接计算这些行为的数，然后确定 bot。</p>\n<h4 id=\"根据日期和行为数进行筛选\"><a class=\"anchor\" href=\"#根据日期和行为数进行筛选\">#</a> 根据日期和行为数进行筛选</h4>\n<p>先筛选  <code>2020-6-20</code>  到 <code>2020-6-26</code>  的这一周数据。</p>\n",
            "tags": [
                "Bot"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/%E6%88%91%E7%9A%84node%E8%AE%BE%E7%BD%AE/",
            "url": "https://songlinlife.top/2022/%E6%88%91%E7%9A%84node%E8%AE%BE%E7%BD%AE/",
            "title": "我的node设置",
            "date_published": "2022-02-17T02:52:20.000Z",
            "content_html": "<p>这个文章用于记录我的 node 设置</p>\n<h3 id=\"安装nvm\"><a class=\"anchor\" href=\"#安装nvm\">#</a> 安装 nvm</h3>\n<pre><code class=\"language-sh\">cd ~/\ngit clone https://github.com/nvm-sh/nvm.git .nvm\ncd ~/.nvm\nsource ~/.nvm/nvm.sh\nexport NVM_DIR=&quot;$HOME/.nvm&quot;\n[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm\n[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion\n</code></pre>\n<h3 id=\"安装node\"><a class=\"anchor\" href=\"#安装node\">#</a> 安装 node</h3>\n<pre><code class=\"language-sh\">nvm install 6\nnvm use 16\nnode -v\n</code></pre>\n<h3 id=\"使用cnpm代替npm命令\"><a class=\"anchor\" href=\"#使用cnpm代替npm命令\">#</a> 使用 cnpm 代替 npm 命令</h3>\n<pre><code class=\"language-sh\">alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \\\n--cache=$HOME/.npm/.cache/cnpm \\\n--disturl=https://npm.taobao.org/dist \\\n--userconfig=$HOME/.cnpmrc&quot;\n</code></pre>\n<h3 id=\"创建global文件夹\"><a class=\"anchor\" href=\"#创建global文件夹\">#</a> 创建 global 文件夹</h3>\n<pre><code class=\"language-sh\">mkdir ~/.npm-global\nnpm config set prefix '~/.npm-global'\nexport PATH=$PATH:$/.npm-global/bin\n</code></pre>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AF%86%E7%A0%81%E5%AD%A601/",
            "url": "https://songlinlife.top/2022/%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%AF%86%E7%A0%81%E5%AD%A601/",
            "title": "密码学01",
            "date_published": "2022-02-16T06:47:27.000Z",
            "content_html": "<h3 id=\"对称加密\"><a class=\"anchor\" href=\"#对称加密\">#</a> 对称加密</h3>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220216151636419.png\" alt=\"image-20220216151636419\" /></p>\n<p>证明 OTP 是 prefect secrecy。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220216165451603.png\" alt=\"image-20220216165451603\" /></p>\n<p>前缀预测：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220216173007164.png\" alt=\"image-20220216173007164\" /></p>\n<p>可忽略与不可忽略：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220216174024970.png\" alt=\"image-20220216174024970\" /></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220216190332209.png\" alt=\"image-20220216190332209\" /></p>\n<p>Salsa20：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220216201312134.png\" alt=\"image-20220216201312134\" /></p>\n",
            "tags": [
                "密码学"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/js/js%E5%AD%A6%E4%B9%A0/",
            "url": "https://songlinlife.top/2022/js/js%E5%AD%A6%E4%B9%A0/",
            "title": "js学习",
            "date_published": "2022-01-28T14:35:17.000Z",
            "content_html": "<h3 id=\"var\"><a class=\"anchor\" href=\"#var\">#</a> Var</h3>\n<h3 id=\"定义变量\"><a class=\"anchor\" href=\"#定义变量\">#</a> 定义变量</h3>\n<h4 id=\"var-2\"><a class=\"anchor\" href=\"#var-2\">#</a> var</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token comment\">// 定义了 a</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>var 是定义变量的一种方式，它的作用于就是当前的局部环境，可以是函数里的局部变量。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>这样的未声明变量就是全局变量</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span>y<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>来看这段代码，打印是是 <code>0 1</code>  而不是报错未定义。因为 <code>x</code>  在全局被定义，而 <code>y</code>  虽然在函数 <code>f</code>  里被定义，但被声明为了全部变量。</p>\n<p>但是注意，如果这样写：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>就会报错，因为定义 y 为局部变量。</p>\n<p>多个变量初始化：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>还是看这个代码，它会先定义两个变量， <code>x</code>  和  <code>y</code> ，其中 <code>x</code>  会被先赋值为 0，然后再将 x 的值赋值给 y，最后两个变量都被初始化为 0.</p>\n<p>但是如果是：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span>y<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>x 就是 <code>undefined</code> ，因为 x 用 y 赋值，而此时 y 还没有赋值。</p>\n<p>重复定义：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>用 <code>var</code>  来重复定义变量不会报错。</p>\n<h3 id=\"变量提升\"><a class=\"anchor\" href=\"#变量提升\">#</a> 变量提升</h3>\n<p>变量提升指的是：</p>\n<blockquote>\n<p>由于变量声明（以及其他声明）总是在任意代码执行之前处理的，所以在代码中的任意位置声明变量总是等效于在代码开头声明。这意味着变量可以在声明之前使用，这个行为叫做 “hoisting”。“hoisting” 就像是把所有的变量声明移动到函数或者全局代码的开头位置。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bla <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> bla<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 可以隐式地（implicitly）将以上代码理解为：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> bla<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>bla <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>说白了，就是用 <code>var</code>  声明的变量会把声明（注意是声明，而不是赋值）自动挪动到作用域的顶部。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> s </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s <span class=\"token operator\">=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>打印：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220128230024614.png\" alt=\"image-20220128230024614\" /></p>\n<p>第一个打印代码  <code>console.log(s)</code> ， <code>s</code>  虽然没有定义，但是由于变量提升，var 挪动到了最前边，所以结果是  <code>undefined</code>  而不是报错。</p>\n<h3 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h3>\n<h5 id=\"数组push\"><a class=\"anchor\" href=\"#数组push\">#</a> 数组 push</h5>\n<p>push 是在后面进行插入</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> newFirstElement <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newFirstElement<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> newArray <span class=\"token operator\">=</span> array</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<p><code>[ 3, 2, 1, 4 ]</code></p>\n<p>用 <code>pop（）</code> 来取出最后一个元素</p>\n<h5 id=\"在前面插入\"><a class=\"anchor\" href=\"#在前面插入\">#</a> 在前面插入</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> newFirstElement <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>array<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>newFirstElement<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 4, 3, 2, 1 ]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用 <code>unshift</code>  在前面插入，用 <code>shift</code>  取出前面的那个数。</p>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/HTML%EF%BC%9A%E5%AD%A6%E4%B9%A0/",
            "url": "https://songlinlife.top/2022/HTML%EF%BC%9A%E5%AD%A6%E4%B9%A0/",
            "title": "HTML与CSS学习",
            "date_published": "2022-01-24T12:39:15.000Z",
            "content_html": "<h1 id=\"从零开始写html\"><a class=\"anchor\" href=\"#从零开始写html\">#</a> 从零开始写 HTML。。。</h1>\n<p>无语了，为了实现一些项目。。。。必须学一下前端知识了。。。</p>\n<pre><code>&lt;div&gt; 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。\n</code></pre>\n<h3 id=\"html5新增的特性\"><a class=\"anchor\" href=\"#html5新增的特性\">#</a> html5 新增的特性：</h3>\n<ul>\n<li>用于绘画的 canvas 元素</li>\n<li>用于媒介回放的 video 和 audio 元素</li>\n<li>对本地离线存储的更好的支持</li>\n<li>新的特殊内容元素，比如 article、footer、header、nav、section</li>\n<li>新的表单控件，比如 calendar、date、time、email、url、search</li>\n</ul>\n<p>Canvas 是重点！我需要的就是绘图界面。。。</p>\n<h3 id=\"下拉选择\"><a class=\"anchor\" href=\"#下拉选择\">#</a> 下拉选择</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>weather<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Select the weather type today: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>weather<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>--Make a choice--<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sunny<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Sunny<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rainy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Rainy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>snowing<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Snowing<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>overcast<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Overcast<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>效果：</p>\n<p>&lt;select id=&quot;weather&quot;&gt;<br />\n&lt;option value=&quot;&quot;&gt;--Make a choice--&lt;/option&gt;<br />\n&lt;option value=&quot;sunny&quot;&gt;Sunny&lt;/option&gt;<br />\n&lt;option value=&quot;rainy&quot;&gt;Rainy&lt;/option&gt;<br />\n&lt;option value=&quot;snowing&quot;&gt;Snowing&lt;/option&gt;<br />\n&lt;option value=&quot;overcast&quot;&gt;Overcast&lt;/option&gt;<br />\n&lt;/select&gt;</p>\n<h3 id=\"from表单\"><a class=\"anchor\" href=\"#from表单\">#</a> from 表单</h3>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220127162528190.png\" alt=\"image-20220127162528190\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://106.54.162.114:2021/web<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>post</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1500<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>form</code>  表单中 <code>action</code>  表示要跳转到哪里去， <code>method</code>  表示用什么请求协议， <code>id</code>  用于表示这个 <code>form</code>  表单的 <code>id</code> 。这样 js 脚本就可以用到。</p>\n<p>根据 <code>input</code>  的 type，选择 <code>submit</code>  这个类别，它会在点击的时候，把其 name 和 value 键值对送出去，这样就发送了一次请求。</p>\n<p>效果图：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220127164138654.png\" alt=\"image-20220127164138654\" /></p>\n<p>还可以这样写：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://106.54.162.114:2021/web<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>post</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>提交<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220127164734689.png\" alt=\"image-20220127164734689\" /></p>\n<p>点击提交后也能送出 <code>post</code>  请求。</p>\n<h3 id=\"css\"><a class=\"anchor\" href=\"#css\">#</a> CSS</h3>\n<h4 id=\"引用css文件\"><a class=\"anchor\" href=\"#引用css文件\">#</a> 引用 css 文件</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/css/style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这里  <code>href</code>  我用的是静态链接，目前还没搞清楚咋用文件路径。。。</p>\n<h4 id=\"盒子\"><a class=\"anchor\" href=\"#盒子\">#</a> 盒子</h4>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220128162131652.png\" alt=\"image-20220128162131652\" /></p>\n<p><code>padding</code> ： 内边框。</p>\n<p><code>margin</code> ：外边框。</p>\n<p><code>border</code> ：边框</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 10px dashed #555<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 平滑 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px 15px 15px 15px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 设置 padding 大小 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 设置外边框 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 防止出现界面不够用情况 */</span></pre></td></tr></table></figure><p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220128162501705.png\" alt=\"image-20220128162501705\" /></p>\n<h6 id=\"float\"><a class=\"anchor\" href=\"#float\">#</a> float</h6>\n<p>用完 float 记得要 clear，这里给出一个方法。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.clear</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样在 <code>html</code>  里就用写：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clear<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"background\"><a class=\"anchor\" href=\"#background\">#</a> background</h5>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"/img/back.jpg\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以添加上图片，并且是以 cover 形式加上的。</p>\n<h4 id=\"字体\"><a class=\"anchor\" href=\"#字体\">#</a> 字体</h4>\n<p><code>text-aligin: justify</code>  对齐</p>\n<h4 id=\"选择器\"><a class=\"anchor\" href=\"#选择器\">#</a> 选择器</h4>\n<h5 id=\"多个类指向一个类\"><a class=\"anchor\" href=\"#多个类指向一个类\">#</a> 多个类指向一个类</h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>notebox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    This is an informational note.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>notebox warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    This note shows a warning.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>notebox danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    This note shows danger!</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    This won't get styled — it also needs to have the notebox class</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.notebox</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid #666<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> .5em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">.notebox.warning</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token selector\">.notebox.danger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以不加空格应用类。</p>\n<h5 id=\"指向特定元素的类\"><a class=\"anchor\" href=\"#指向特定元素的类\">#</a> 指向特定元素的类</h5>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">span.highlight</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">h1.highlight</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>针对 <code>span</code>  和  <code>h1</code> ，虽然类名都为 <code>highlight</code> ，但应用不同颜色。</p>\n<h5 id=\"id选择器\"><a class=\"anchor\" href=\"#id选择器\">#</a> ID 选择器</h5>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#one</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">h1#heading</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> rebeccapurple<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二个代码块指的是 <code>h1</code>  元素的 <code>heading</code>  类。</p>\n",
            "tags": [
                "琐事"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Golang%EF%BC%9Amongodb%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/",
            "url": "https://songlinlife.top/2022/Golang%EF%BC%9Amongodb%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/",
            "title": "Golang：mongodb增删改",
            "date_published": "2022-01-24T08:19:26.000Z",
            "content_html": "<h3 id=\"插入一条数据\"><a class=\"anchor\" href=\"#插入一条数据\">#</a> 插入一条数据：</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tclient     <span class=\"token operator\">=</span> mongodb<span class=\"token punctuation\">.</span><span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\terr        <span class=\"token builtin\">error</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tcollection <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Collection</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tiResult    <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>InsertOneResult</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tid         primitive<span class=\"token punctuation\">.</span>ObjectID</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 选择数据库 my_db 里的某个表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcollection <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_collection\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 插入某一条数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tlogRecord <span class=\"token operator\">:=</span> model<span class=\"token punctuation\">.</span>LogRecord<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tJobName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"job1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tCommand<span class=\"token punctuation\">:</span> <span class=\"token string\">\"echo 1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tErr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tContent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tTp<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>ExecTime<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tStartTime<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tEndTime<span class=\"token punctuation\">:</span>   time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">if</span> iResult<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">InsertOne</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> logRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//_id: 默认生成一个全局唯一 ID</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tid <span class=\"token operator\">=</span> iResult<span class=\"token punctuation\">.</span>InsertedID<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>primitive<span class=\"token punctuation\">.</span>ObjectID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"自增ID\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">Hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"插入多条数据\"><a class=\"anchor\" href=\"#插入多条数据\">#</a> 插入多条数据</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tclient <span class=\"token operator\">=</span> mongodb<span class=\"token punctuation\">.</span><span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\terr        <span class=\"token builtin\">error</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tcollection <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Collection</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tresult     <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>InsertManyResult</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tid         primitive<span class=\"token punctuation\">.</span>ObjectID</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tcollection <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 批量插入</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tresult<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">InsertMany</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmodel<span class=\"token punctuation\">.</span>LogRecord<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tJobName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"job multi1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tCommand<span class=\"token punctuation\">:</span> <span class=\"token string\">\"echo multi1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tErr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tContent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tTp<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>ExecTime<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\tStartTime<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\tEndTime<span class=\"token punctuation\">:</span>   time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmodel<span class=\"token punctuation\">.</span>LogRecord<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tJobName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"job multi2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tCommand<span class=\"token punctuation\">:</span> <span class=\"token string\">\"echo multi2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tErr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tContent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tTp<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>ExecTime<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\tStartTime<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\tEndTime<span class=\"token punctuation\">:</span>   time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Unix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> result <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result nil\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> result<span class=\"token punctuation\">.</span>InsertedIDs <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tid <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>primitive<span class=\"token punctuation\">.</span>ObjectID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"自增ID\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">Hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行 <code>Insert</code>  命令后，还要再执行</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> result<span class=\"token punctuation\">.</span>InsertedIDs <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\tid <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>primitive<span class=\"token punctuation\">.</span>ObjectID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"自增ID\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">Hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 <code>bson</code>  设置 <code>ObjectID</code></p>\n<h3 id=\"设置find-limit\"><a class=\"anchor\" href=\"#设置find-limit\">#</a> 设置 find limit</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tclient     <span class=\"token operator\">=</span> mongodb<span class=\"token punctuation\">.</span><span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcollection <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Collection</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\terr        <span class=\"token builtin\">error</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tcursor     <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Cursor</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcollection <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfilter <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span>M<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"jobName\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"job multi1\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> cursor<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">,</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetSkip</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">var</span> results <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>model<span class=\"token punctuation\">.</span>LogRecord</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">All</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> result <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> results <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"update\"><a class=\"anchor\" href=\"#update\">#</a> update</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tclient     <span class=\"token operator\">=</span> mongodb<span class=\"token punctuation\">.</span><span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcollection <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Collection</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\terr        <span class=\"token builtin\">error</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tuResult    <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>UpdateResult</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcollection <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfilter <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span>M<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"jobName\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"job multi1\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tupdate <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span>M<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"$set\"</span><span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tUpdateByJobName<span class=\"token punctuation\">&#123;</span>Command<span class=\"token punctuation\">:</span> <span class=\"token string\">\"byModel\"</span><span class=\"token punctuation\">,</span>Content<span class=\"token punctuation\">:</span><span class=\"token string\">\"model\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> uResult<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">UpdateMany</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//uResult.MatchedCount 表示符合过滤条件的记录数，即更新了多少条数据。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>uResult<span class=\"token punctuation\">.</span>MatchedCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"删除数据\"><a class=\"anchor\" href=\"#删除数据\">#</a> 删除数据</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sql</span> :<span class=\"token operator\">=</span> <span class=\"token punctuation\">`</span>&#123;<span class=\"token string\">\"name\"</span>:<span class=\"token string\">\"jack\"</span>&#125;<span class=\"token punctuation\">`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var bs interface&#123;&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bson<span class=\"token punctuation\">.</span>UnmarshalExtJSON<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>byte<span class=\"token punctuation\">(</span><span class=\"token keyword\">sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>bs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>collection<span class=\"token punctuation\">.</span>DeleteMany<span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>TODO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bs<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同样的，先 <code>sqlstr</code>  转 <code>interface</code> ， 然而直接传入参数。</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/Golang%EF%BC%9A%E6%9F%A5%E8%AF%A2MongoDB/",
            "url": "https://songlinlife.top/2022/Go/Golang%EF%BC%9A%E6%9F%A5%E8%AF%A2MongoDB/",
            "title": "Golang：查询MongoDB",
            "date_published": "2022-01-24T07:42:28.000Z",
            "content_html": "<h3 id=\"连接数据库\"><a class=\"anchor\" href=\"#连接数据库\">#</a> 连接数据库</h3>\n<ol>\n<li>打开 sshtunnel</li>\n<li>获取 client</li>\n</ol>\n<h3 id=\"获得collection\"><a class=\"anchor\" href=\"#获得collection\">#</a> 获得 collection</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">GetNpmRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Collection <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tclient <span class=\"token operator\">:=</span> <span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tdb <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ts<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">ListCollectionNames</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bson<span class=\"token punctuation\">.</span>M<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s: %v\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tnpm_records <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"npm_records\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> npm_records</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h3>\n<h4 id=\"通过struct进行关联\"><a class=\"anchor\" href=\"#通过struct进行关联\">#</a> 通过 struct 进行关联</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CursorTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tnpm_records <span class=\"token operator\">:=</span> <span class=\"token function\">GetNpmRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tsqlstr <span class=\"token operator\">:=</span> <span class=\"token string\">`[&#123;\"$match\":&#123;\"name\":\"response-json-formatter\"&#125;&#125;,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t&#123;\"$project\":&#123;\"name\":1, \"version\":1&#125;&#125;,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t&#123;\"$limit\":5&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t]`</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> bdoc <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\terr2 <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span><span class=\"token function\">UnmarshalExtJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>sqlstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err2: %v\\n\"</span><span class=\"token punctuation\">,</span> err2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bdoc: %v\\n\"</span><span class=\"token punctuation\">,</span> bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcursor<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> npm_records<span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">defer</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ttmp <span class=\"token operator\">:=</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tName    <span class=\"token builtin\">string</span> <span class=\"token string\">`bson:\"name\"`</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tVersion <span class=\"token builtin\">string</span> <span class=\"token string\">`bson:\"version\"`</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcursor<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>核心命令是  <code>bson.UnmarshalExtJSON([]byte(sqlstr), true, &amp;bdoc)</code> ，将查询的 SQL 语句转换为 <code>bson</code> 。</p>\n<p>然后直接调用 <code>Aggregate</code>  进行查询。</p>\n<h3 id=\"获取bson结果\"><a class=\"anchor\" href=\"#获取bson结果\">#</a> 获取 bson 结果</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CursorTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tnpm_records <span class=\"token operator\">:=</span> <span class=\"token function\">GetNpmRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tsqlstr <span class=\"token operator\">:=</span> <span class=\"token string\">`[&#123;\"$match\":&#123;\"name\":\"response-json-formatter\"&#125;&#125;,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t&#123;\"$project\":&#123;\"name\":1, \"version\":1&#125;&#125;,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t&#123;\"$limit\":5&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t]`</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> bdoc <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\terr2 <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span><span class=\"token function\">UnmarshalExtJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>sqlstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err2: %v\\n\"</span><span class=\"token punctuation\">,</span> err2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bdoc: %v\\n\"</span><span class=\"token punctuation\">,</span> bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcursor<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> npm_records<span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">defer</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">var</span> results <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>bson<span class=\"token punctuation\">.</span>M <span class=\"token comment\">// 定义 bson</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcursor<span class=\"token punctuation\">.</span><span class=\"token function\">All</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>results<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 然后 ALL</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> results <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tb<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span><span class=\"token function\">MarshalExtJSON</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>results<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b: %v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// mongo.Pipeline&#123;bson.D(bdoc)&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>通过游标方式可以获取一个个的数据，但是如何一次性获得数据后，处理并保存。。。。</p>\n<p>这里做了一个实验：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tcursor<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>读 10000 个数据，使用了并发和没使用并发耗时根本没区别。。。。</p>\n<p>Decode 不是限制性能原因吧。。。</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/MongoDB-%E5%B8%B8%E7%94%A8%E7%AE%A1%E9%81%93%E5%87%BD%E6%95%B0/",
            "url": "https://songlinlife.top/2022/MongoDB-%E5%B8%B8%E7%94%A8%E7%AE%A1%E9%81%93%E5%87%BD%E6%95%B0/",
            "title": "MongoDB 常用管道函数",
            "date_published": "2022-01-23T15:08:16.000Z",
            "content_html": "<p>因为 <code>mongoDB</code>  里和 <code>aggregate</code>  实在是太强大了，导致他有一堆指令。。。。这个文章主要为了记录我在使用 MongoDB 是否遇到的各种各样命令。</p>\n<p>指令基本格式：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>COLLECTION_NAME<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span>AGGREGATE_OPERATION<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>它类似这样的命令格式：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      &#123; $<span class=\"token keyword\">match</span>: &#123; <span class=\"token keyword\">status</span>: <span class=\"token string\">\"A\"</span> &#125; &#125;<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      &#123; $<span class=\"token keyword\">group</span>: &#123; _id: <span class=\"token string\">\"$cust_id\"</span><span class=\"token punctuation\">,</span> total: &#123; $sum: <span class=\"token string\">\"$amount\"</span> &#125; &#125; &#125;<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      &#123; $sort: &#123; total: <span class=\"token operator\">-</span><span class=\"token number\">1</span> &#125; &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   &#123; <span class=\"token keyword\">explain</span>: <span class=\"token boolean\">true</span> &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"count\"><a class=\"anchor\" href=\"#count\">#</a> count</h3>\n<p><code>mongoDB5.0</code>  有 <code>count</code>  命令，但是但 <code>mongoDB4.4</code>  中是没有 count 命令的。</p>\n<p><code>count</code>  等价于  <code>sum:1</code></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>&#123; <span class=\"token string\">\"$group\"</span>:&#123;<span class=\"token string\">\"_id\"</span>:<span class=\"token string\">\"$title\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"num\"</span>:&#123;<span class=\"token string\">\"$sum\"</span>:<span class=\"token number\">1</span> &#125; &#125; &#125; <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"$group\"</span>:&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token string\">\"_id\"</span>:<span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token string\">\"cnt\"</span>:&#123;<span class=\"token string\">\"$sum\"</span>:<span class=\"token number\">1</span>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面这条命令用于查询集合中文档总数</p>\n<h3 id=\"unset\"><a class=\"anchor\" href=\"#unset\">#</a> unset</h3>\n<p><code>&#123; $unset: &quot;&lt;field&gt;&quot; &#125;</code></p>\n<blockquote>\n<p>To remove a single field, the <a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/unset/#mongodb-pipeline-pipe.-unset\"> <code>$unset</code> </a> takes a string that specifies the field to remove:</p>\n</blockquote>\n<p>删除字段。</p>\n<h3 id=\"group\"><a class=\"anchor\" href=\"#group\">#</a> group</h3>\n<p>group 命令，就是制定 <code>_id</code>  和  <code>聚合函数</code> 。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  $<span class=\"token keyword\">group</span>:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      _id: <span class=\"token operator\">&lt;</span>expression<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Group By Expression</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">&lt;</span>field1<span class=\"token operator\">></span>: &#123; <span class=\"token operator\">&lt;</span>accumulator1<span class=\"token operator\">></span> : <span class=\"token operator\">&lt;</span>expression1<span class=\"token operator\">></span> &#125;<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> &#125;</pre></td></tr></table></figure><h4 id=\"常用聚合函数\"><a class=\"anchor\" href=\"#常用聚合函数\">#</a> 常用聚合函数</h4>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220124102625554.png\" alt=\"image-20220124102625554\" /></p>\n<h3 id=\"常用管道函数\"><a class=\"anchor\" href=\"#常用管道函数\">#</a> 常用管道函数</h3>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220124103901304.png\" alt=\"image-20220124103901304\" /></p>\n",
            "tags": [
                "琐事",
                "mongodb"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/ss/golang%E5%92%8Cpython%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91MongoDB%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://songlinlife.top/2022/ss/golang%E5%92%8Cpython%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91MongoDB%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "golang和python连接阿里云MongoDB云数据库（解决ReplicaSetNoPrimary错误）",
            "date_published": "2022-01-23T13:33:34.000Z",
            "content_html": "<p>最近一直被这个连接问题给困恼。。。怎么都没法连接上阿里云的云服务器。对于 golang 我用的是  <code>github.com/mongodb/mongo-go-driver </code> ，每一项都按照了文档去设置但是死活连接不上，于是更换为 <code>github.com/globalsign/mgo</code>  ，这样就可以正常连接。对于 python，如果使用了 <code>pymongo4.0.1</code>  版本也是无法连接，但是更换为 <code>pymongo3.6</code>  就可以正常连接。</p>\n<p>这两个现象都非常奇怪，但都有相同的特点，无论是 <code>golang</code>  里的 <code>mgo</code>  库还是 <code>python</code>  的 <code>pymong3.6</code>  都是挺老的版本。</p>\n<h4 id=\"golang报错日志\"><a class=\"anchor\" href=\"#golang报错日志\">#</a> golang 报错日志：</h4>\n<p>2022/01/23 21:38:18 server selection error: server selection timeout, current topology: { Type: ReplicaSetNoPrimary, Servers: [{ Addr: 139.196.245.210:3717, Type: Unknown, Last error: connection() error occured during connection handshake: connection(139.196.245.210:3717[-127]) socket was unexpectedly closed: EOF }, { Addr: 139.196.245.214:3717, Type: Unknown, Last error: connection() error occured during connection handshake: connection(139.196.245.214:3717[-128]) socket was unexpectedly closed: EOF }, ] }</p>\n<h4 id=\"python报错日志\"><a class=\"anchor\" href=\"#python报错日志\">#</a> python 报错日志</h4>\n<p>pymongo.errors.ServerSelectionTimeoutError: 139.196.245.214:3717: connection closed,139.196.245.210:3717: connection closed, Timeout: 30s, Topology Description: &lt;TopologyDescription id: 61ed5945eba641d6e1b58800, topology_type: ReplicaSetNoPrimary, servers: [&lt;ServerDescription ('139.196.245.210', 3717) server_type: Unknown, rtt: None, error=AutoReconnect('139.196.245.210:3717: connection closed')&gt;, &lt;ServerDescription ('139.196.245.214', 3717) server_type: Unknown, rtt: None, error=AutoReconnect('139.196.245.214:3717: connection closed')&gt;]&gt;</p>\n<p>看到这个错误日志真的令人迷惑，为啥会出现这么多的 server，我只是通过跳板机访问了一个服务。</p>\n<p>查找资料后发现，这些云数据库都是容器化管理，也就是我的一台 mongodb 云数据库，其实有多个容器组成的集群，这些容器之间可以相互访问，但是外部无法访问集群的节点。</p>\n<p>这里非常感谢，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xNWRkZjU5NWE2Y2M=\">连接 Replica Set 出现问题</span>给出了解释：</p>\n<blockquote>\n<p>MongoDB driver will attempt  <code>server discovery</code>  from given a replica set member(s); it will find all of other nodes within the replica set (via <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmRvY3MubW9uZ29kYi5jb20lMkZtYW51YWwlMkZyZWZlcmVuY2UlMkZtZXRob2QlMkZycy5jb25mJTJG\">rs.conf</span>). The problem here is the replica set is set with name  <code>mongo&lt;N&gt;</code> , the driver (run in Docker host) would not be able to resolve these names. You can confirm this by trying to ping  <code>mongo1</code>  from Docker host.</p>\n<p>You can either try running the application from another Docker instance sharing the same Docker network as the replica set. Or, modify the Docker networking as such to allow resolvable hostnames.</p>\n<p>UPDATE:</p>\n<p>Regarding your comment on why using <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmRvY3MubW9uZ29kYi5jb20lMkZtYW51YWwlMkZtb25nbyUyRg==\">mongo</span> shell, or <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmFwaS5tb25nb2RiLmNvbSUyRnB5dGhvbiUyRmN1cnJlbnQlMkY=\">PyMongo</span> works.</p>\n<p>This is due to the difference in connection mode. When specifying a single node, i.e.  <code>mongodb://node1:27017</code>  in shell or PyMongo, server discovery are not being made. Instead it will attempt to connect to that single node (not as part as a replica set). The catch is that you need to connect to the primary node of the replica set to write (you have to know which one). If you would like to connect as a replica set, you have to define the replica set name.</p>\n<p>In contrast to the  <code>mongo-go-driver</code> , by default it would perform server discovery and attempt to connect as a replica set. If you would like to connect as a single node, then you need to specify  <code>connect=direct</code>  in the connection URI.</p>\n</blockquote>\n<p>也就是说 driver 会默认开启 <code>服务发现</code> ，这就导致我们会从容器的外部来访问这个集群的其他机器。</p>\n<p>在 <code>pymongo</code>  和 <code>mgo</code>  这些比较旧的服务器里，因为那时还没有流行这种集群化管理，所以没有服务发现的功能。</p>\n<h3 id=\"解决办法\"><a class=\"anchor\" href=\"#解决办法\">#</a> 解决办法</h3>\n<blockquote>\n<p>In contrast to the  <code>mongo-go-driver</code> , by default it would perform server discovery and attempt to connect as a replica set. If you would like to connect as a single node, then you need to specify  <code>connect=direct</code>  in the connection URI.</p>\n</blockquote>\n<p>采用 <code>direct</code>  的连接方式。</p>\n<p>这里可以看 <code>golang</code>  给出的 <code>docs</code> ：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"context\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"go.mongodb.org/mongo-driver/mongo\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"go.mongodb.org/mongo-driver/mongo/options\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// Create a direct connection to a host. The driver will send all requests</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// to that host and will not automatically discover other hosts in the</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// deployment.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tclientOpts <span class=\"token operator\">:=</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyURI</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token string\">\"mongodb://localhost:27017/?connect=direct\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tclient<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mongo<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clientOpts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> client</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ApplyURI</code>  把  <code>connect=direct</code>  加入，这样就可以愉快连接了。</p>\n<h4 id=\"pymongo\"><a class=\"anchor\" href=\"#pymongo\">#</a> pymongo</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>client <span class=\"token operator\">=</span> MongoClient<span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb://localhost'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     port<span class=\"token operator\">=</span><span class=\"token number\">3733</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     authSource<span class=\"token operator\">=</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                     directConnection <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                     authMechanism<span class=\"token operator\">=</span><span class=\"token string\">'SCRAM-SHA-1'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                     <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>pymongo</code>  中有个字段  <code>directConnection</code> ，这个字段设置为 <code>True</code>  代表直接连接。</p>\n<h3 id=\"这里附上我连接的代码\"><a class=\"anchor\" href=\"#这里附上我连接的代码\">#</a> 这里附上我连接的代码</h3>\n<h4 id=\"golang\"><a class=\"anchor\" href=\"#golang\">#</a> golang</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"context\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token string\">\"github.com/elliotchance/sshtunnel\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token string\">\"go.mongodb.org/mongo-driver/mongo\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token string\">\"go.mongodb.org/mongo-driver/mongo/options\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"golang.org/x/crypto/ssh\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ttunnel <span class=\"token operator\">:=</span> sshtunnel<span class=\"token punctuation\">.</span><span class=\"token function\">NewSSHTunnel</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 在这里设置你的跳板机地址.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token string\">\"username@ipv4:port\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 选择 sshpassword 的连接方式</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tssh<span class=\"token punctuation\">.</span><span class=\"token function\">Password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 阿里云 mongodb 的地址.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token string\">\"dds-uf61fd4**********44-pub.mongodb.rds.aliyuncs.com:3717\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 设置本地绑定端口</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token string\">\"3733\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\ttunnel<span class=\"token punctuation\">.</span>Log <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Lmicroseconds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">go</span> tunnel<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 等待开启 tunnel</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">var</span> mgoCli <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Client</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">initDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tcredential <span class=\"token operator\">:=</span> options<span class=\"token punctuation\">.</span>Credential<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tAuthMechanism<span class=\"token punctuation\">:</span> <span class=\"token string\">\"SCRAM-SHA-1\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 阿里云服务的</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tUsername<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mongodb 用户名</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tPassword<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mongodb 密码</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tAuthSource<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认 admin 不需要改</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tPasswordSet<span class=\"token punctuation\">:</span>   <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tclientOpts <span class=\"token operator\">:=</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyURI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongodb://localhost:3733\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">SetAuth</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 连接到 MongoDB</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置 5s 超时</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tclient<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mongo<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> clientOpts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 检查连接</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\terr <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Client <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">if</span> mgoCli <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token function\">initDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">return</span> mgoCli</pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"pymongo-2\"><a class=\"anchor\" href=\"#pymongo-2\">#</a> pymongo</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pymongo <span class=\"token keyword\">import</span> MongoClient</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sshtunnel <span class=\"token keyword\">import</span> SSHTunnelForwarder</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> pprint <span class=\"token keyword\">import</span> pprint</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tunnel <span class=\"token operator\">=</span> SSHTunnelForwarder<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token string\">\"跳板机ip\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        ssh_username<span class=\"token operator\">=</span><span class=\"token string\">r\"跳板机用户名\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        ssh_password<span class=\"token operator\">=</span><span class=\"token string\">r\"跳板机密码\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        remote_bind_address<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"dds-uf61f**********b.mongodb.rds.aliyuncs.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3717</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        local_bind_address<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3733</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>tunnel<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tunnel<span class=\"token punctuation\">.</span>local_bind_port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">from</span> pymongo <span class=\"token keyword\">import</span> MongoClient</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>client <span class=\"token operator\">=</span> MongoClient<span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb://localhost'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                     port<span class=\"token operator\">=</span><span class=\"token number\">3733</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                     username<span class=\"token operator\">=</span><span class=\"token string\">'数据库用户名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                     password<span class=\"token operator\">=</span><span class=\"token string\">'数据库密码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                     authSource<span class=\"token operator\">=</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                     directConnection <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 使用直接连接方式</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                     authMechanism<span class=\"token operator\">=</span><span class=\"token string\">'SCRAM-SHA-256'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                     <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">[</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>npm <span class=\"token operator\">=</span> db<span class=\"token punctuation\">[</span><span class=\"token string\">'npm_records'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> npm<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    pprint<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>tunnel<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "琐事"
            ]
        }
    ]
}