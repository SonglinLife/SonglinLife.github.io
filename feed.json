{
    "version": "https://jsonfeed.org/version/1",
    "title": "Life",
    "subtitle": null,
    "icon": "https://songlinlife.top/images/favicon.ico",
    "description": "Life is not about lifestyle, it means Lithium and Ferrum.",
    "home_page_url": "https://songlinlife.top",
    "items": [
        {
            "id": "https://songlinlife.top/2022/Golang%EF%BC%9A%E6%9F%A5%E8%AF%A2MongoDB/",
            "url": "https://songlinlife.top/2022/Golang%EF%BC%9A%E6%9F%A5%E8%AF%A2MongoDB/",
            "title": "Golang：查询MongoDB",
            "date_published": "2022-01-24T07:42:28.000Z",
            "content_html": "<h3 id=\"连接数据库\"><a class=\"anchor\" href=\"#连接数据库\">#</a> 连接数据库</h3>\n<ol>\n<li>打开 sshtunnel</li>\n<li>获取 client</li>\n</ol>\n<h3 id=\"获得collection\"><a class=\"anchor\" href=\"#获得collection\">#</a> 获得 collection</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">GetNpmRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Collection <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tclient <span class=\"token operator\">:=</span> <span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tdb <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ts<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">ListCollectionNames</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bson<span class=\"token punctuation\">.</span>M<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s: %v\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tnpm_records <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"npm_records\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> npm_records</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h3>\n<h4 id=\"通过struct进行关联\"><a class=\"anchor\" href=\"#通过struct进行关联\">#</a> 通过 struct 进行关联</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CursorTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tnpm_records <span class=\"token operator\">:=</span> <span class=\"token function\">GetNpmRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tsqlstr <span class=\"token operator\">:=</span> <span class=\"token string\">`[&#123;\"$match\":&#123;\"name\":\"response-json-formatter\"&#125;&#125;,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t&#123;\"$project\":&#123;\"name\":1, \"version\":1&#125;&#125;,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t&#123;\"$limit\":5&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t]`</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> bdoc <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\terr2 <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span><span class=\"token function\">UnmarshalExtJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>sqlstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err2: %v\\n\"</span><span class=\"token punctuation\">,</span> err2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bdoc: %v\\n\"</span><span class=\"token punctuation\">,</span> bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcursor<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> npm_records<span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">defer</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ttmp <span class=\"token operator\">:=</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tName    <span class=\"token builtin\">string</span> <span class=\"token string\">`bson:\"name\"`</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tVersion <span class=\"token builtin\">string</span> <span class=\"token string\">`bson:\"version\"`</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tcursor<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>核心命令是  <code>bson.UnmarshalExtJSON([]byte(sqlstr), true, &amp;bdoc)</code> ，将查询的 SQL 语句转换为 <code>bson</code> 。</p>\n<p>然后直接调用 <code>Aggregate</code>  进行查询。</p>\n<h3 id=\"获取bson结果\"><a class=\"anchor\" href=\"#获取bson结果\">#</a> 获取 bson 结果</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CursorTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tnpm_records <span class=\"token operator\">:=</span> <span class=\"token function\">GetNpmRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tsqlstr <span class=\"token operator\">:=</span> <span class=\"token string\">`[&#123;\"$match\":&#123;\"name\":\"response-json-formatter\"&#125;&#125;,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t&#123;\"$project\":&#123;\"name\":1, \"version\":1&#125;&#125;,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t&#123;\"$limit\":5&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t]`</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> bdoc <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\terr2 <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span><span class=\"token function\">UnmarshalExtJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>sqlstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err2: %v\\n\"</span><span class=\"token punctuation\">,</span> err2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bdoc: %v\\n\"</span><span class=\"token punctuation\">,</span> bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tcursor<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> npm_records<span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bdoc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">defer</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">var</span> results <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>bson<span class=\"token punctuation\">.</span>M <span class=\"token comment\">// 定义 bson</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcursor<span class=\"token punctuation\">.</span><span class=\"token function\">All</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>results<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 然后 ALL</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> results <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tb<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> bson<span class=\"token punctuation\">.</span><span class=\"token function\">MarshalExtJSON</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>results<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b: %v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// mongo.Pipeline&#123;bson.D(bdoc)&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>通过游标方式可以获取一个个的数据，但是如何一次性获得数据后，处理并保存。。。。</p>\n<p>这里做了一个实验：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tcursor<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>读 10000 个数据，使用了并发和没使用并发耗时根本没区别。。。。</p>\n<p>Decode 不是限制性能原因吧。</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/MongoDB-%E5%B8%B8%E7%94%A8%E7%AE%A1%E9%81%93%E5%87%BD%E6%95%B0/",
            "url": "https://songlinlife.top/2022/MongoDB-%E5%B8%B8%E7%94%A8%E7%AE%A1%E9%81%93%E5%87%BD%E6%95%B0/",
            "title": "MongoDB 常用管道函数",
            "date_published": "2022-01-23T15:08:16.000Z",
            "content_html": "<p>因为 <code>mongoDB</code>  里和 <code>aggregate</code>  实在是太强大了，导致他有一堆指令。。。。这个文章主要为了记录我在使用 MongoDB 是否遇到的各种各样命令。</p>\n<p>指令基本格式：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>COLLECTION_NAME<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span>AGGREGATE_OPERATION<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>它类似这样的命令格式：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      &#123; $<span class=\"token keyword\">match</span>: &#123; <span class=\"token keyword\">status</span>: <span class=\"token string\">\"A\"</span> &#125; &#125;<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      &#123; $<span class=\"token keyword\">group</span>: &#123; _id: <span class=\"token string\">\"$cust_id\"</span><span class=\"token punctuation\">,</span> total: &#123; $sum: <span class=\"token string\">\"$amount\"</span> &#125; &#125; &#125;<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      &#123; $sort: &#123; total: <span class=\"token operator\">-</span><span class=\"token number\">1</span> &#125; &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   &#123; <span class=\"token keyword\">explain</span>: <span class=\"token boolean\">true</span> &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"count\"><a class=\"anchor\" href=\"#count\">#</a> count</h3>\n<p><code>mongoDB5.0</code>  有 <code>count</code>  命令，但是但 <code>mongoDB4.4</code>  中是没有 count 命令的。</p>\n<p><code>count</code>  等价于  <code>sum:1</code></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>&#123; <span class=\"token string\">\"$group\"</span>:&#123;<span class=\"token string\">\"_id\"</span>:<span class=\"token string\">\"$title\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"num\"</span>:&#123;<span class=\"token string\">\"$sum\"</span>:<span class=\"token number\">1</span> &#125; &#125; &#125; <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"$group\"</span>:&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token string\">\"_id\"</span>:<span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token string\">\"cnt\"</span>:&#123;<span class=\"token string\">\"$sum\"</span>:<span class=\"token number\">1</span>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面这条命令用于查询集合中文档总数</p>\n<h3 id=\"group\"><a class=\"anchor\" href=\"#group\">#</a> group</h3>\n<p>group 命令，就是制定 <code>_id</code>  和  <code>聚合函数</code> 。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  $<span class=\"token keyword\">group</span>:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      _id: <span class=\"token operator\">&lt;</span>expression<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Group By Expression</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">&lt;</span>field1<span class=\"token operator\">></span>: &#123; <span class=\"token operator\">&lt;</span>accumulator1<span class=\"token operator\">></span> : <span class=\"token operator\">&lt;</span>expression1<span class=\"token operator\">></span> &#125;<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> &#125;</pre></td></tr></table></figure><h4 id=\"常用聚合函数\"><a class=\"anchor\" href=\"#常用聚合函数\">#</a> 常用聚合函数</h4>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220124102625554.png\" alt=\"image-20220124102625554\" /></p>\n<h3 id=\"常用管道函数\"><a class=\"anchor\" href=\"#常用管道函数\">#</a> 常用管道函数</h3>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220124103901304.png\" alt=\"image-20220124103901304\" /></p>\n",
            "tags": [
                "琐事",
                "mongodb"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/ss/golang%E5%92%8Cpython%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91MongoDB%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://songlinlife.top/2022/ss/golang%E5%92%8Cpython%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91MongoDB%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "golang和python连接阿里云MongoDB云数据库（解决ReplicaSetNoPrimary错误）",
            "date_published": "2022-01-23T13:33:34.000Z",
            "content_html": "<p>最近一直被这个连接问题给困恼。。。怎么都没法连接上阿里云的云服务器。对于 golang 我用的是  <code>github.com/mongodb/mongo-go-driver </code> ，每一项都按照了文档去设置但是死活连接不上，于是更换为 <code>github.com/globalsign/mgo</code>  ，这样就可以正常连接。对于 python，如果使用了 <code>pymongo4.0.1</code>  版本也是无法连接，但是更换为 <code>pymongo3.6</code>  就可以正常连接。</p>\n<p>这两个现象都非常奇怪，但都有相同的特点，无论是 <code>golang</code>  里的 <code>mgo</code>  库还是 <code>python</code>  的 <code>pymong3.6</code>  都是挺老的版本。</p>\n<h4 id=\"golang报错日志\"><a class=\"anchor\" href=\"#golang报错日志\">#</a> golang 报错日志：</h4>\n<p>2022/01/23 21:38:18 server selection error: server selection timeout, current topology: { Type: ReplicaSetNoPrimary, Servers: [{ Addr: 139.196.245.210:3717, Type: Unknown, Last error: connection() error occured during connection handshake: connection(139.196.245.210:3717[-127]) socket was unexpectedly closed: EOF }, { Addr: 139.196.245.214:3717, Type: Unknown, Last error: connection() error occured during connection handshake: connection(139.196.245.214:3717[-128]) socket was unexpectedly closed: EOF }, ] }</p>\n<h4 id=\"python报错日志\"><a class=\"anchor\" href=\"#python报错日志\">#</a> python 报错日志</h4>\n<p>pymongo.errors.ServerSelectionTimeoutError: 139.196.245.214:3717: connection closed,139.196.245.210:3717: connection closed, Timeout: 30s, Topology Description: &lt;TopologyDescription id: 61ed5945eba641d6e1b58800, topology_type: ReplicaSetNoPrimary, servers: [&lt;ServerDescription ('139.196.245.210', 3717) server_type: Unknown, rtt: None, error=AutoReconnect('139.196.245.210:3717: connection closed')&gt;, &lt;ServerDescription ('139.196.245.214', 3717) server_type: Unknown, rtt: None, error=AutoReconnect('139.196.245.214:3717: connection closed')&gt;]&gt;</p>\n<p>看到这个错误日志真的令人迷惑，为啥会出现这么多的 server，我只是通过跳板机访问了一个服务。</p>\n<p>查找资料后发现，这些云数据库都是容器化管理，也就是我的一台 mongodb 云数据库，其实有多个容器组成的集群，这些容器之间可以相互访问，但是外部无法访问集群的节点。</p>\n<p>这里非常感谢，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xNWRkZjU5NWE2Y2M=\">连接 Replica Set 出现问题</span>给出了解释：</p>\n<blockquote>\n<p>MongoDB driver will attempt  <code>server discovery</code>  from given a replica set member(s); it will find all of other nodes within the replica set (via <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmRvY3MubW9uZ29kYi5jb20lMkZtYW51YWwlMkZyZWZlcmVuY2UlMkZtZXRob2QlMkZycy5jb25mJTJG\">rs.conf</span>). The problem here is the replica set is set with name  <code>mongo&lt;N&gt;</code> , the driver (run in Docker host) would not be able to resolve these names. You can confirm this by trying to ping  <code>mongo1</code>  from Docker host.</p>\n<p>You can either try running the application from another Docker instance sharing the same Docker network as the replica set. Or, modify the Docker networking as such to allow resolvable hostnames.</p>\n<p>UPDATE:</p>\n<p>Regarding your comment on why using <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmRvY3MubW9uZ29kYi5jb20lMkZtYW51YWwlMkZtb25nbyUyRg==\">mongo</span> shell, or <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmFwaS5tb25nb2RiLmNvbSUyRnB5dGhvbiUyRmN1cnJlbnQlMkY=\">PyMongo</span> works.</p>\n<p>This is due to the difference in connection mode. When specifying a single node, i.e.  <code>mongodb://node1:27017</code>  in shell or PyMongo, server discovery are not being made. Instead it will attempt to connect to that single node (not as part as a replica set). The catch is that you need to connect to the primary node of the replica set to write (you have to know which one). If you would like to connect as a replica set, you have to define the replica set name.</p>\n<p>In contrast to the  <code>mongo-go-driver</code> , by default it would perform server discovery and attempt to connect as a replica set. If you would like to connect as a single node, then you need to specify  <code>connect=direct</code>  in the connection URI.</p>\n</blockquote>\n<p>也就是说 driver 会默认开启 <code>服务发现</code> ，这就导致我们会从容器的外部来访问这个集群的其他机器。</p>\n<p>在 <code>pymongo</code>  和 <code>mgo</code>  这些比较旧的服务器里，因为那时还没有流行这种集群化管理，所以没有服务发现的功能。</p>\n<h3 id=\"解决办法\"><a class=\"anchor\" href=\"#解决办法\">#</a> 解决办法</h3>\n<blockquote>\n<p>In contrast to the  <code>mongo-go-driver</code> , by default it would perform server discovery and attempt to connect as a replica set. If you would like to connect as a single node, then you need to specify  <code>connect=direct</code>  in the connection URI.</p>\n</blockquote>\n<p>采用 <code>direct</code>  的连接方式。</p>\n<p>这里可以看 <code>golang</code>  给出的 <code>docs</code> ：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"context\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"go.mongodb.org/mongo-driver/mongo\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"go.mongodb.org/mongo-driver/mongo/options\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// Create a direct connection to a host. The driver will send all requests</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// to that host and will not automatically discover other hosts in the</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// deployment.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tclientOpts <span class=\"token operator\">:=</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyURI</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token string\">\"mongodb://localhost:27017/?connect=direct\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tclient<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mongo<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clientOpts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> client</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ApplyURI</code>  把  <code>connect=direct</code>  加入，这样就可以愉快连接了。</p>\n<h4 id=\"pymongo\"><a class=\"anchor\" href=\"#pymongo\">#</a> pymongo</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>client <span class=\"token operator\">=</span> MongoClient<span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb://localhost'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     port<span class=\"token operator\">=</span><span class=\"token number\">3733</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     authSource<span class=\"token operator\">=</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                     directConnection <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                     authMechanism<span class=\"token operator\">=</span><span class=\"token string\">'SCRAM-SHA-1'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                     <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>pymongo</code>  中有个字段  <code>directConnection</code> ，这个字段设置为 <code>True</code>  代表直接连接。</p>\n<h3 id=\"这里附上我连接的代码\"><a class=\"anchor\" href=\"#这里附上我连接的代码\">#</a> 这里附上我连接的代码</h3>\n<h4 id=\"golang\"><a class=\"anchor\" href=\"#golang\">#</a> golang</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"context\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token string\">\"github.com/elliotchance/sshtunnel\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token string\">\"go.mongodb.org/mongo-driver/mongo\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token string\">\"go.mongodb.org/mongo-driver/mongo/options\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"golang.org/x/crypto/ssh\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ttunnel <span class=\"token operator\">:=</span> sshtunnel<span class=\"token punctuation\">.</span><span class=\"token function\">NewSSHTunnel</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 在这里设置你的跳板机地址.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token string\">\"username@ipv4:port\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 选择 sshpassword 的连接方式</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tssh<span class=\"token punctuation\">.</span><span class=\"token function\">Password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 阿里云 mongodb 的地址.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token string\">\"dds-uf61fd4**********44-pub.mongodb.rds.aliyuncs.com:3717\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 设置本地绑定端口</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token string\">\"3733\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\ttunnel<span class=\"token punctuation\">.</span>Log <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Lmicroseconds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">go</span> tunnel<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 等待开启 tunnel</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">var</span> mgoCli <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Client</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">initDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tcredential <span class=\"token operator\">:=</span> options<span class=\"token punctuation\">.</span>Credential<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tAuthMechanism<span class=\"token punctuation\">:</span> <span class=\"token string\">\"SCRAM-SHA-1\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 阿里云服务的</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tUsername<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mongodb 用户名</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tPassword<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mongodb 密码</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tAuthSource<span class=\"token punctuation\">:</span>    <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认 admin 不需要改</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tPasswordSet<span class=\"token punctuation\">:</span>   <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tclientOpts <span class=\"token operator\">:=</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ApplyURI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongodb://localhost:3733\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">SetAuth</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 连接到 MongoDB</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置 5s 超时</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tclient<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mongo<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> clientOpts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 检查连接</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\terr <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Ping</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">MgoCli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>mongo<span class=\"token punctuation\">.</span>Client <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">if</span> mgoCli <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token function\">initDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">return</span> mgoCli</pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"pymongo-2\"><a class=\"anchor\" href=\"#pymongo-2\">#</a> pymongo</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pymongo <span class=\"token keyword\">import</span> MongoClient</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sshtunnel <span class=\"token keyword\">import</span> SSHTunnelForwarder</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> pprint <span class=\"token keyword\">import</span> pprint</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tunnel <span class=\"token operator\">=</span> SSHTunnelForwarder<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token string\">\"跳板机ip\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        ssh_username<span class=\"token operator\">=</span><span class=\"token string\">r\"跳板机用户名\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        ssh_password<span class=\"token operator\">=</span><span class=\"token string\">r\"跳板机密码\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        remote_bind_address<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"dds-uf61f**********b.mongodb.rds.aliyuncs.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3717</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        local_bind_address<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3733</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>tunnel<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tunnel<span class=\"token punctuation\">.</span>local_bind_port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">from</span> pymongo <span class=\"token keyword\">import</span> MongoClient</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>client <span class=\"token operator\">=</span> MongoClient<span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb://localhost'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                     port<span class=\"token operator\">=</span><span class=\"token number\">3733</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                     username<span class=\"token operator\">=</span><span class=\"token string\">'数据库用户名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                     password<span class=\"token operator\">=</span><span class=\"token string\">'数据库密码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                     authSource<span class=\"token operator\">=</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                     directConnection <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 使用直接连接方式</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                     authMechanism<span class=\"token operator\">=</span><span class=\"token string\">'SCRAM-SHA-256'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                     <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">[</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>npm <span class=\"token operator\">=</span> db<span class=\"token punctuation\">[</span><span class=\"token string\">'npm_records'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> npm<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    pprint<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>tunnel<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "琐事"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/Golang-%E5%86%99%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://songlinlife.top/2022/Go/Golang-%E5%86%99%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "Golang: 写正则表达式",
            "date_published": "2022-01-22T07:31:12.000Z",
            "content_html": "<p>基本语法：</p>\n<p>可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9yZWdleHAvcmVnZXhwLXN5bnRheC5odG1s\">正则表达式语法</span></p>\n<p><code>*</code> ：零次或多次</p>\n<p><code>+</code> ：一次或多次</p>\n<p><code>.</code> ：任意字符</p>\n<h3 id=\"简单匹配的实例代码\"><a class=\"anchor\" href=\"#简单匹配的实例代码\">#</a> 简单匹配的实例代码</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"regexp\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tr<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> regexp<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">`&lt;.+?>`</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ？ 表示最短匹配</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">errDeal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstr <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello&lt;35武大>445>&lt;sg34>gworld\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str[5:15]: %v\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">FindAllString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 匹配多个，并且返回一个匹配成功字符串数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\ti <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">FindAllStringIndex</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回匹配子串开始和结束的索引</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts2 <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">ReplaceAllString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 替换匹配的地方</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s2: %v\\n\"</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s: %v\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i: %v\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">errDeal</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220122161126211.png\" alt=\"image-20220122161126211\" /></p>\n<p>注意由于 golang 中的中文是使用了 3 个 byte 来存储，而 string 的索引是字节索引。</p>\n<h3 id=\"strings中的spilt\"><a class=\"anchor\" href=\"#strings中的spilt\">#</a> strings 中的 spilt</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"strings\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts <span class=\"token operator\">:=</span> <span class=\"token string\">\"I_Love_Go_Web\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tres <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> res <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tres1 <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">SplitN</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> res1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tres2 <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">SplitAfter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> res2 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tres3 <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">SplitAfterN</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> res3 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>splitAfter</code>  会保留 <code>sep</code></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220122162108149.png\" alt=\"image-20220122162108149\" /></p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/ss/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E8%BD%BB%E9%87%8F%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Efrp%E5%BC%80%E5%90%AF%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/",
            "url": "https://songlinlife.top/2022/ss/%E4%BD%BF%E7%94%A8%E8%85%BE%E8%AE%AF%E8%BD%BB%E9%87%8F%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Efrp%E5%BC%80%E5%90%AF%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/",
            "title": "10分钟使用腾讯轻量应用服务器与frp开启内网穿透实现ssh",
            "date_published": "2022-01-22T03:46:26.000Z",
            "content_html": "<h3 id=\"下载\"><a class=\"anchor\" href=\"#下载\">#</a> 下载</h3>\n<p>客户端和服务器都要下载这个文件</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycC9yZWxlYXNlcy9kb3dubG9hZC92MC4zOC4wL2ZycF8wLjM4LjBfbGludXhfYW1kNjQudGFyLmd6\">frp_0.38.0_linux_amd64.tar.gz</span></p>\n<h3 id=\"解压\"><a class=\"anchor\" href=\"#解压\">#</a> 解压</h3>\n<p>请在客户机（也就是需要进行内网穿透的本地机）和服务器执行相同操作：</p>\n<p>解压： <code>tar -xvf frp_0.38.0_linux_amd64.tar.gz</code></p>\n<p>放到 local 目录下： <code>mv frp_0.38.0_linux_amd64 /usr/local/frp</code></p>\n<p><code>cd /usr/local/frp </code></p>\n<h3 id=\"服务器配置\"><a class=\"anchor\" href=\"#服务器配置\">#</a> 服务器配置</h3>\n<p>登录到腾讯云服务器，下载解压步骤。</p>\n<p><code>ls</code>  查看目录：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220122115136816.png\" alt=\"image-20220122115136816\" /></p>\n<p>frps 是服务器对应的执行文件，frps.ini 是服务器配置文件。</p>\n<p>修改 frps 配置文件： <code>vim frps.ini</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>common<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bind_port <span class=\"token operator\">=</span> <span class=\"token number\">33300</span></pre></td></tr></table></figure><p>这个  <code>bind_port</code>  就是 frps 的监听端口，可以修改为你需要制定的端口，在云服务器中，我们一般不会使用默认端口，因为这可能会导致出现病毒攻击。</p>\n<p>腾讯云设置：找到防火墙管理规则，开放暴露端口。</p>\n<p><strong>注意</strong></p>\n<p>如果你要通过 frp 进行 ssh 访问，还要开启一个 ssh 访问端口，也就是要暴露两个端口，一个  <code>33300</code>  端口，一个  <code>33301</code>  端口，其中 <code>33301</code>  端口用于提供 ssh 服务。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220122121136085.png\" alt=\"image-20220122121136085\" /></p>\n<p>总结，修改配置文件，开放两个端口。</p>\n<p>如果执行报错，可以执行  <code>chmod 777 frps</code>  增加权限。</p>\n<h4 id=\"执行\"><a class=\"anchor\" href=\"#执行\">#</a> 执行</h4>\n<p><code>/usr/local/frp/frps -c /usr/local/frp/frps.ini </code></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220122122845140.png\" alt=\"image-20220122122845140\" /></p>\n<h4 id=\"注册为系统服务\"><a class=\"anchor\" href=\"#注册为系统服务\">#</a> 注册为系统服务</h4>\n<p><code>sudo vim /usr/lib/systemd/system/frps.service</code></p>\n<pre><code>[Unit]\nDescription=frps Service\nDocumentation=https://github.com/fatedier/frp\nAfter=network.target nss-lookup.target\n\n[Service]\nExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini \nRestart=on-failure\nRestartPreventExitStatus=23\n\n[Install]\nWantedBy=multi-user.target                                \n</code></pre>\n<p>重载服务： <code>systemctl daemon-reload</code></p>\n<p>开启服务： <code>systemctl start frps</code></p>\n<p>查看服务状态： <code>systemctl status frps</code></p>\n<p>设置开机自启动： <code>systemctl enable frps</code></p>\n<h3 id=\"客户端\"><a class=\"anchor\" href=\"#客户端\">#</a> 客户端</h3>\n<h3 id=\"客户端配置\"><a class=\"anchor\" href=\"#客户端配置\">#</a> 客户端配置</h3>\n<p>frpc 是客户端对应的执行文件，frpc.ini 是客户端配置文件。</p>\n<p><strong>执行之前相同的下载解压 cd 命令</strong></p>\n<p>修改客户端配置： <code>vim frpc.ini</code> ，[ssh] 设置了 ssh 端口， <code>remote_port</code>  指的是你的服务器应该用 <code>33301</code>  端口来提供 ssh 服务，因为我们之前开放了服务器的 33301 端口。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>common<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server_addr <span class=\"token operator\">=</span> 你的服务器公网ip</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server_port <span class=\"token operator\">=</span> <span class=\"token number\">33300</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>ssh<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">type</span> <span class=\"token operator\">=</span> tcp</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>local_ip <span class=\"token operator\">=</span> <span class=\"token number\">127.0</span>.0.1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>local_port <span class=\"token operator\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>remote_port <span class=\"token operator\">=</span> <span class=\"token number\">33301</span></pre></td></tr></table></figure><p>同样，注册为服务： <code>sudo vim /usr/lib/systemd/system/frpc.service</code></p>\n<pre><code>[Unit]\nDescription=frps Service\nDocumentation=https://github.com/fatedier/frp\nAfter=network.target nss-lookup.target\n\n[Service]\nExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini\nRestart=on-failure\nRestartPreventExitStatus=23\n\n[Install]\nWantedBy=multi-user.target\n~                                     \n</code></pre>\n<p>重载服务： <code>systemctl daemon-reload</code></p>\n<p>开启服务： <code>systemctl start frpc</code></p>\n<p>查看服务状态： <code>systemctl status frpc</code></p>\n<p>设置开机自启动： <code>systemctl enable frpc</code></p>\n<h3 id=\"ssh连接\"><a class=\"anchor\" href=\"#ssh连接\">#</a> ssh 连接</h3>\n<p>ok，现在我们可以用 ssh 来连接到这个内网主机了。</p>\n<p><code>ssh -p 33301 内网机需要登录的用户名@服务器的公网ip</code></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220122124105449.png\" alt=\"image-20220122124105449\" /></p>\n<p>完美，这样我们就完成了内网穿透实现 ssh 连接了。</p>\n",
            "tags": [
                "琐事",
                "frp"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/Golang-cookies%E4%B8%8Esessions/",
            "url": "https://songlinlife.top/2022/Go/Golang-cookies%E4%B8%8Esessions/",
            "title": "Golang: cookies与sessions",
            "date_published": "2022-01-21T08:53:38.000Z",
            "content_html": "<h3 id=\"cookies\"><a class=\"anchor\" href=\"#cookies\">#</a> cookies</h3>\n<p><code>cookies</code>  说白了就是放在浏览器的缓存，服务器通过 <code>setCookies</code>  将应该保存的信息发送给客户端浏览器，客户端收到后将  <code>cookies</code>  进行保存，然后下一次访问该网站时，就把对应的  <code>cookies</code>  放在请求头里发送给客户端。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 获得 cookie</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 说明客户端发送过来的 request 请求头没有携带 cookies，或者没有对应的 value。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\ts <span class=\"token operator\">=</span> <span class=\"token string\">\"wsl\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 设置 cookie</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">SetCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"180.162.204.156:33787\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tc<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"测试cookie\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetCookie</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> value <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> maxAge <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> domain <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> secure <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> httpOnly <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意，这里的 <code>domain</code>  用于指定主机，也就是这个 cookies 在浏览器向某个网站发送请求时，要不要携带这个 <code>Cookies</code> 。</p>\n<h3 id=\"sessions\"><a class=\"anchor\" href=\"#sessions\">#</a> Sessions</h3>\n<p><code>sessions</code>  就是为了维持服务器响应状态的，服务器为访问的客户端开一个 <code>Session</code> ，然后设置这个 <code>Session</code>  的生存时间，并且把这个 <code>Session</code>  对应的 <code>SessionID</code>  通过 <code>setCookies</code>  的方式发送给客户端，这样客户端就把 <code>SessionID</code>  通过 <code>Cookies</code>  形式保存起来了，下一次客户端发送请求时候，就会把这个 <code>Cookies</code>  放在请求头里。客户端收到 <code>Cookies</code>  里对应的 <code>SessionID</code> ，就会提供继续服务状态。</p>\n<p>代码：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"github.com/gin-contrib/sessions\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"github.com/gin-contrib/sessions/cookie\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"github.com/gin-gonic/gin\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tr <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tstore <span class=\"token operator\">:=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">NewStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>sessions<span class=\"token punctuation\">.</span><span class=\"token function\">Sessions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysession\"</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tsession <span class=\"token operator\">:=</span> sessions<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"world\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tsession<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tsession<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">:</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":33787\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Go",
                "Web"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/golang-Web%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/",
            "url": "https://songlinlife.top/2022/Go/golang-Web%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/",
            "title": "golang Web相关学习",
            "date_published": "2022-01-21T01:24:28.000Z",
            "content_html": "<h3 id=\"多路复用器\"><a class=\"anchor\" href=\"#多路复用器\">#</a> 多路复用器</h3>\n<p>也就是 ServeMux，它的作用就是实现 url 与处理器 handler 的映射（这里虽然说是处理器，但是实际上就是处理函数）</p>\n<p>golang 中的实现：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> ServeMux <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tmu    sync<span class=\"token punctuation\">.</span>RWMutex</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tm     <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>muxEntry</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tes    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>muxEntry <span class=\"token comment\">// slice of entries sorted from longest to shortest.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\thosts <span class=\"token builtin\">bool</span>       <span class=\"token comment\">// whether any patterns contain hostnames</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们使用 <code>http</code>  库写一个简单的 <code>serve</code>  端：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"io\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"net/http\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>rw http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tio<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\terr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0:33787\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>直接调用了  <code>http.handlerFunc</code> ， <code>http</code>  库会使用系统默认的  <code>ServerMux</code> ，因此，在 <code>\terr := http.ListenAndServe(&quot;0.0.0.0:33787&quot;, nil)</code>  中第二个传入的参数就是 nil。</p>\n<p>因为这个 <code>defaultServerMux</code>  是一个全局变量，也就是说，第三方代码也可以调用 http 库，然后修改这个  <code>defaultServerMux</code> 。所以我们需要自己定制一个多路复用器。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sm <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewServeMux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tsm<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>rw http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tio<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\terr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0:33787\"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>代码很简单，就是 new 一个 <code>ServerMux</code> 。然后传给 <code>listen</code> 。</p>\n<h3 id=\"静态文件访问\"><a class=\"anchor\" href=\"#静态文件访问\">#</a> 静态文件访问</h3>\n<p>可以直接调用 GIN：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\te<span class=\"token punctuation\">.</span><span class=\"token function\">Static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/files/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\te<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":33787\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\te<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>访问  <code>myip:33787/files/C.html</code> ，显示：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220121103906562.png\" alt=\"image-20220121103906562\" /></p>\n<p>直接就可以把 html 文件给显示出来。</p>\n<h3 id=\"请求头\"><a class=\"anchor\" href=\"#请求头\">#</a> 请求头</h3>\n<p>请求头格式  <code>type Header map[string]string</code></p>\n<p>可以看到请求头就是一个 string map，它会记录 request 的头信息，一般对于 request 都是取出 <code>header</code>  里信息的。</p>\n<p>这里有关于请求头的各个参数信息： <span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzMyOTMuaHRtbA==\">HTTP 请求头</span></p>\n<p>查询请求头参数：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r.Header: %v\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s: %v\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/header\"</span><span class=\"token punctuation\">,</span> Header<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\terr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":33787\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>比如查 <code>Accept</code> ，表示当前浏览器可以接受的文件类型，假设这里有 image/webp，表示当前浏览器可以支持 webp 格式的图片，那么当服务器给当前浏览器下发 webp 的图片时，可以更省流量。</p>\n<h3 id=\"请求体\"><a class=\"anchor\" href=\"#请求体\">#</a> 请求体</h3>\n<p>就是 <code>postman</code>  发 get 或 post 携带的键值对，如果是 get 请求，那么 body 会内嵌在 url 里，如果是 post 请求就发送表单，这样发送密码时用 post 就安全。</p>\n<p><code>http</code>  包： <code>req.body.read([]byte)</code></p>\n<p><code>gin</code> :  <code>c.Param(string)</code>  就能查键值对。</p>\n<p>这个请求体比请求头常用。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"响应头\"><a class=\"anchor\" href=\"#响应头\">#</a> 响应头</h3>\n<p>这里有一篇文章列出了响应头参数：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzgxNzMyL2FydGljbGUvZGV0YWlscy84MDE4Mzc5MA==\">响应头参数</span></p>\n<p><code>WriteHeader</code>  ：设置状态码</p>\n<p><code>Header().set()</code> : 设置其他参数，注意要在 writeHeader 之前进行设置。</p>\n<p>重定向：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Header</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Location\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.google.com\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tw<span class=\"token punctuation\">.</span><span class=\"token function\">WriteHeader</span><span class=\"token punctuation\">(</span><span class=\"token number\">301</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/header\"</span><span class=\"token punctuation\">,</span> Header<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0:33787\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/golang-context/",
            "url": "https://songlinlife.top/2022/Go/golang-context/",
            "title": "golang context",
            "date_published": "2022-01-18T10:01:00.000Z",
            "content_html": "<p>context 包用于做并发控制，它可以携带各种上下文，一般来说只要涉及到并发的场合，都会使用 context。context 一般作为函数的第一个参数。</p>\n<h3 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h3>\n<p>在搞懂 context 包之前，首先需要搞懂 golang 里的继承，这是 context 可以一层一层携带信息的基础。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"errors\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> runner <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">type</span> car <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cant find name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stoped\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">type</span> bus <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\trunner</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tbusname <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b bus<span class=\"token punctuation\">)</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>busname <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tc <span class=\"token operator\">:=</span> car<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">var</span> b bus <span class=\"token operator\">=</span> bus<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token string\">\"bus\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tg <span class=\"token operator\">:=</span> bus<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tb<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token string\">\"weilai\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tt <span class=\"token operator\">:=</span> bus<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token string\">\"tesla\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\terr <span class=\"token operator\">:=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buss\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我在这里定义了一个借口 runner，两个类 car 和 bus，其中 car 只是单纯实现了 runner 接口，但是 bus 还多了一个 busname 字段，以及继承了 runner 接口。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> bus <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\trunner</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tbusname <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>bus 继承了 runner 接口，那么 bus 也就默认实现了 runner 接口，可以直接 bus.run ()，调用函数。</p>\n<p>那么 bus 既然实现了 runner 接口，那么就可以把实例化的 bus 结构体作为 runner 给新的 bus 结构体初始化。可以看到我用 bus 结构体 b 初始化了 g，再用 g 初始化了 t。</p>\n<p>因此，如果要查询一个 busname 是否出现在我们的初始化过程里，比如查询  <code>buss</code>  是  <code>b, g, t</code>  的名字。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b bus<span class=\"token punctuation\">)</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>busname <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cant find name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里 car 是没有名字的，只有 bus 有名字，bus 会层层调用，直到找到 name。</p>\n<p>注意，如果用：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span>runner</pre></td></tr></table></figure><p>是会报错的，因为 runner 内没有实现 runner 字段。</p>\n<p>这里有一篇关于 context 的文章；</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvXzVnQkl3dnRYS0pNRTdBVjJXMmJxUQ==\">https://mp.weixin.qq.com/s/_5gBIwvtXKJME7AV2W2bqQ</span></p>\n<p>基本上把 context 讲明白了。</p>\n<h3 id=\"context\"><a class=\"anchor\" href=\"#context\">#</a> context</h3>\n<p>context.TODO 和 context.Background 是创建 context 的跟节点，传入下面这些函数的初始化 context。由 TODO 和 BackGround 创建的 context 是 emptycontext，所以这两个函数作用一致。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> timeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> CancelFunc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">WithValue</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> Context</pre></td></tr></table></figure><p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220118184015550.png\" alt=\"image-20220118184015550\" /></p>\n<p>WithCancel 创建 cancelcontext，用于取消，Valuecontext 用于传递 value，timeout 用于传递超时的上下文。</p>\n<p>不懂就去看 https://mp.weixin.qq.com/s/_5gBIwvtXKJME7AV2W2bqQ 就行了。</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Mysql-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "url": "https://songlinlife.top/2022/Mysql-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "title": "Mysql 常用指令",
            "date_published": "2022-01-18T07:15:59.000Z",
            "content_html": "<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<p>MySQL 的安装可以参考这篇文章：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vMjAyMGphdmFtaWFuc2hpYmFvZGlhbi9wLzEyOTIwMjQzLmh0bWw=\">https://www.cnblogs.com/2020javamianshibaodian/p/12920243.html</span></p>\n<h3 id=\"mysql的字符集\"><a class=\"anchor\" href=\"#mysql的字符集\">#</a> MySQL 的字符集</h3>\n<p>参考这篇文章 https://cloud.tencent.com/developer/article/1366841</p>\n",
            "tags": [
                "琐事"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/git-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "url": "https://songlinlife.top/2022/git-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/",
            "title": "git 常用指令",
            "date_published": "2022-01-18T02:03:25.000Z",
            "content_html": "<p><code>git reflog</code> ：查看版本号</p>\n<p><code>git reset --hard ID</code> : 修改版本</p>\n<p><code>git add filename</code> : 添加文件</p>\n<p><code>git add -u</code> : 暂存已经 add 的文件</p>\n<p><code>git commit -am &quot;msg&quot;</code>  : 暂存和 commit，主要这个暂存只暂存已经 add 的文件</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/Golang-bytes%E5%92%8Cerrors%E5%8C%85/",
            "url": "https://songlinlife.top/2022/Go/Golang-bytes%E5%92%8Cerrors%E5%8C%85/",
            "title": "Golang bytes和errors包",
            "date_published": "2022-01-16T05:21:36.000Z",
            "content_html": "<h3 id=\"bytes\"><a class=\"anchor\" href=\"#bytes\">#</a> Bytes</h3>\n<p>首先，Golang 里采用的编码方式为 UTF-8，所以不会出现中文乱码问题，但是这又会出现一些新的问题。比如：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ts <span class=\"token operator\">:=</span> <span class=\"token string\">\"byebye武带university\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>要截取其中的  <code>武带</code> ，然后你会发现 出现乱码。</p>\n<p>但是  <code>\tfmt.Println(s[6:12])</code></p>\n<p>显示却是  <code>武带</code></p>\n<p>这就是因为，golang 默认用 utf8 编码，这就导致它会将 str 的切片解释为 utf8 的切片，那么实际上 s 的表示是什么？</p>\n<p><code>[]byte(s)</code> :</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220116133500753.png\" alt=\"image-20220116133500753\" /></p>\n<p>所以它实际上是用字节组成了一个 utf8 编码。</p>\n<p>每个中文字符实际上就是一个  <code>code point</code> 。</p>\n<p>这里有一篇文章解释了 utf8 和 Unicode 的关系。<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yMzVhZDljNjNjZjI=\">搞清楚 Unicode Codepoint</span></p>\n<p>同时如果用  <code>stings.Index(s,substr string)</code>  来查找 index。</p>\n<p><code>fmt.Printf(&quot;strings.Index(s, \\&quot;带\\&quot;): %v\\n&quot;, strings.Index(s, &quot;带&quot;))</code></p>\n<p>返回  <code>9</code>  而不是  <code>7</code> ，可以看到 string 也是用的也是字节索引。</p>\n<p>问题来了，怎么找 Unicode 的位置索引呢？这个问题我现在也没想到。</p>\n<p>但是如果用  <code>[]rune(s)</code>  ，并且打印得到结果：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220116134151740.png\" alt=\"image-20220116134151740\" /></p>\n<p>可以看到 rune 是直接就解释为 Unicode 值。用这个就可以直接索引。</p>\n<p><code>fmt.Println(r[6:8])</code></p>\n<p>现在就可以打印为  <code>武带</code> 。这个方法要记住。</p>\n<h4 id=\"buffer和reader\"><a class=\"anchor\" href=\"#buffer和reader\">#</a> Buffer 和 reader</h4>\n<p>可以查看文档。</p>\n<p>记住  <code>b := bytes.NewBuffer(make([]*byte*, 0))</code>  这个会生成 buffer，这个 buffer 有一系列的 API 到时候查文档使用就行了。</p>\n<p>Reader 也一样，反正，这些接口能用到的时候再去查文档。</p>\n<h3 id=\"errors\"><a class=\"anchor\" href=\"#errors\">#</a> errors</h3>\n<p>这个库比较简单，但是我还是没怎么看懂。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"errors\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> Myerror <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tWhen time<span class=\"token punctuation\">.</span>Time</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\twhat <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e Myerror<span class=\"token punctuation\">)</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintln</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>When<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>what<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> Myerror<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tWhen<span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\twhat<span class=\"token punctuation\">:</span> <span class=\"token string\">\"有猫饼\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\terr <span class=\"token operator\">:=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tb <span class=\"token operator\">:=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b: %v\\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">if</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err.Error(): %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自定义打印一个  <code>有猫饼</code> 的错误。</p>\n<p>error 接口的定义就是实现了 <code>Error</code>  函数，而这个  <code>Error</code>  函数只返回  <code>string</code></p>\n<p>用 <code>errros.Is</code>  可以判断这个错误是否是同一个错误。如果我将  <code>test</code>  中的  <code>Myerror</code>  的生成改为  <code>when: time.Now()</code>  。那么 <code>Is</code>  就不会判断为同一错误。</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/Golang-Log%E6%97%A5%E5%BF%97/",
            "url": "https://songlinlife.top/2022/Go/Golang-Log%E6%97%A5%E5%BF%97/",
            "title": "Golang Log日志",
            "date_published": "2022-01-15T14:48:49.000Z",
            "content_html": "<h3 id=\"log日志打印\"><a class=\"anchor\" href=\"#log日志打印\">#</a> log 日志打印</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLdate         <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token boolean\">iota</span>     <span class=\"token comment\">// the date in the local time zone: 2009/01/23</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLtime                         <span class=\"token comment\">// the time in the local time zone: 01:23:23</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tLmicroseconds                 <span class=\"token comment\">// microsecond resolution: 01:23:23.123123.  assumes Ltime.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLlongfile                     <span class=\"token comment\">// full file name and line number: /a/b/c/d.go:23</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLshortfile                    <span class=\"token comment\">// final file name element and line number: d.go:23. overrides Llongfile</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tLUTC                          <span class=\"token comment\">// if Ldate or Ltime is set, use UTC rather than the local time zone</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLmsgprefix                    <span class=\"token comment\">// move the \"prefix\" from the beginning of the line to before the message</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tLstdFlags     <span class=\"token operator\">=</span> Ldate <span class=\"token operator\">|</span> Ltime <span class=\"token comment\">// initial values for the standard logger</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这是 log 的 flag 设置，flag 就是前缀的那些信息。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log.Flags(): %v\\n\"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Flags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">SetPrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mylog \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello python\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">SetFlags</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Ltime <span class=\"token operator\">|</span> log<span class=\"token punctuation\">.</span>LUTC<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Llongfile<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello python\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log.Flags(): %v\\n\"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">Flags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello go\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// log.Panic(\"not hello\")</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>O_CREATE<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_RDWR<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_TRUNC<span class=\"token punctuation\">,</span> <span class=\"token number\">0777</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> err<span class=\"token operator\">!=</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tl <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MyLog \"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Ltime<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Llongfile<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello go\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">defer</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220115225639584.png\" alt=\"image-20220115225639584\" /></p>\n<p><code>log.SetFlags(log.Ldate|log.Ltime | log.LUTC|log.Llongfile)</code></p>\n<p><code>\tlog.SetPrefix(&quot;Mylog &quot;)</code>  就是设置前缀。</p>\n<p>这个 <code>flag</code>  就是对应着二进制位数，用  <code>|</code>  或方法来相加。</p>\n<p>log 分为三种方法：print、panic、Fatal</p>\n<p><code>print</code> : 打印到日志输入。</p>\n<p><code>panic</code> : 触发 panic</p>\n<p><code>fatal</code> ：打印完毕后立即退出。</p>\n<p><code>output</code> ：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Output</span><span class=\"token punctuation\">(</span>calldepth <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span></pre></td></tr></table></figure><p>其中 <code>calldepth</code>  就是显示那一层调用了这个 output 方法，如果为 1 就是显示当前的文件 <code>log.go</code> ，我这里设置了  <code>calldepth</code>  为  <code>2</code> 。所以它会再往下一层，显示的文件为  <code>proc.go</code> 。我觉得这个用处不是很大。</p>\n<h4 id=\"logger\"><a class=\"anchor\" href=\"#logger\">#</a> logger</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>out io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> prefix <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> flag <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Logger</pre></td></tr></table></figure><p>这个会生成一个 logger 结构体，后面直接用这个 logger 来操作就行了。</p>\n<p>例如：</p>\n<p>设置 stderr 为输入 log 的地方：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l2 <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>直接打印到输出。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MyLog \"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Ltime<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Llongfile<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>后续所有输出 print 都会被定向到 f 文件。</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/Golang-%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/",
            "url": "https://songlinlife.top/2022/Go/Golang-%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/",
            "title": "Golang: 读写文件",
            "date_published": "2022-01-14T13:58:17.000Z",
            "content_html": "<h3 id=\"写文件\"><a class=\"anchor\" href=\"#写文件\">#</a> 写文件</h3>\n<p>Go 语言中读写文件还是很方便的，但是有一些点还是需要注意</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>O_CREATE<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_RDWR<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_APPEND<span class=\"token punctuation\">,</span> <span class=\"token number\">0777</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// s := []byte(\"hello world\")</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err2 <span class=\"token operator\">:=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world! \"</span><span class=\"token operator\">+</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> err2 <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">defer</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打开文件有 <code>Open</code>  和  <code>OpenFile</code>  两个 API，但是 <code>OPEN</code>  返回只读的文件句柄，而 <code>OpenFile</code>  可以自定义权限</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tO_RDONLY <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> syscall<span class=\"token punctuation\">.</span>O_RDONLY <span class=\"token comment\">// open the file read-only.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tO_WRONLY <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> syscall<span class=\"token punctuation\">.</span>O_WRONLY <span class=\"token comment\">// open the file write-only.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tO_RDWR   <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> syscall<span class=\"token punctuation\">.</span>O_RDWR   <span class=\"token comment\">// open the file read-write.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// The remaining values may be or'ed in to control behavior.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tO_APPEND <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> syscall<span class=\"token punctuation\">.</span>O_APPEND <span class=\"token comment\">// append data to the file when writing.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tO_CREATE <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> syscall<span class=\"token punctuation\">.</span>O_CREAT  <span class=\"token comment\">// create a new file if none exists.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tO_EXCL   <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> syscall<span class=\"token punctuation\">.</span>O_EXCL   <span class=\"token comment\">// used with O_CREATE, file must not exist.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tO_SYNC   <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> syscall<span class=\"token punctuation\">.</span>O_SYNC   <span class=\"token comment\">// open for synchronous I/O.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tO_TRUNC  <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> syscall<span class=\"token punctuation\">.</span>O_TRUNC  <span class=\"token comment\">// truncate regular writable file when opened.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>O_RDWD</code>  就是读写， <code>O_APPEND</code>  代表以 Append 方式写， <code>O_Create</code>  如果没有文件就创建一个文件。</p>\n<p>golang 里写文件如果不是 append 方式的话，那么写文件方式是以写覆盖方式进行的，而不是把文件清空，这点和 <code>python</code>  有一些区别。</p>\n<p>如果要清空文件只需要加上  <code>O_TRUNC,</code></p>\n<h3 id=\"按行读取文件\"><a class=\"anchor\" href=\"#按行读取文件\">#</a> 按行读取文件</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"bufio\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"io\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>O_CREATE<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_RDWR<span class=\"token punctuation\">,</span> <span class=\"token number\">0777</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\ti <span class=\"token operator\">:=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\treader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\ts<span class=\"token punctuation\">,</span> err3 <span class=\"token operator\">:=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> err3 <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s: %v\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i: %v\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\ti<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">defer</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个以  <code>\\n</code>  作为分隔符进行读取，原来文件：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220114222752410.png\" alt=\"image-20220114222752410\" /></p>\n<p>这个读取方式不会把最后那个换行读取过去。</p>\n<h3 id=\"直接读\"><a class=\"anchor\" href=\"#直接读\">#</a> 直接读</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b<span class=\"token punctuation\">,</span> err2 <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> err2 <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tall_content <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> all_content <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> v<span class=\"token operator\">==</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v: %v\\n\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一次性把所有内容读到内存，然后用 <code>split</code>  对 string 做切分，注意！</p>\n<p><code>split</code>  对下面累啦，按  <code>\\n</code>  进行切分时：</p>\n<p><code>a\\nb\\nc\\n</code></p>\n<p>它实际上返回了  <code>[&quot;a&quot;, &quot;b&quot;,&quot;c&quot;, &quot;&quot;]</code></p>\n<p>最后会有一个空字符。</p>\n<h3 id=\"按字节数读\"><a class=\"anchor\" href=\"#按字节数读\">#</a> 按字节数读</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    buf <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n: %v\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>定义定义一个 buf 大小</p>\n<p>os 包还可以做很多，比如对进程进行操作：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdW9rZTM2MC5jb20vdHV0b3JpYWwvZ29sYW5nL3N0ZC1saWItb3M0\">golang 标准库 os 包进程相关操作</span></p>\n<h3 id=\"常用的几个io包\"><a class=\"anchor\" href=\"#常用的几个io包\">#</a> 常用的几个 IO 包</h3>\n<p><code>ioutil</code>   <code>bufio</code>   <code>os</code>   <code>io</code></p>\n<p><code>io</code>  包定义了  <code>reader</code>  和  <code>writer</code>  两个接口，也就说只要实现了这个接口就可以被这些 io 包调用。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220115200648560.png\" alt=\"image-20220115200648560\" /></p>\n<p>比如， ioutil.ReadAll 的接口</p>\n<p><code>func ReadAll(r io.Reader) ([]byte, error)</code></p>\n<p>那么 <code>string.Reader</code>  可以被调用，同时 <code>os.file</code>  也就说 <code>os.Openfile</code>  返回的句柄也可以调用这个 <code>readall</code></p>\n<h4 id=\"ioutil\"><a class=\"anchor\" href=\"#ioutil\">#</a> ioutil</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>r io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">ReadDir</span><span class=\"token punctuation\">(</span>dirname <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>fs<span class=\"token punctuation\">.</span>FileInfo<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>filename <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">TempDir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> pattern <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个 TempDir，如果 pattern 中有  <code>*</code>  这个符号，比如  <code>*-logs</code>  这个作为传入的 pattern，那么会生成诸如  <code>238493589-logs</code>  这样一个临时的文件夹，前面数字是随机的，它会取代  <code>*</code>  所在位置。</p>\n<p>即使没加 defer os.removeall 它也会自动删除的。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">WriteFile</span><span class=\"token punctuation\">(</span>filename <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> perm fs<span class=\"token punctuation\">.</span>FileMode<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span></pre></td></tr></table></figure><p>如果没有文件就创建，如果有文件就清空写，默认使用 <code>truncate</code>  参数。</p>\n<p><code>Flush</code>  用于刷新缓冲区。</p>\n<h3 id=\"stdin和stdout\"><a class=\"anchor\" href=\"#stdin和stdout\">#</a> Stdin 和 stdout</h3>\n<p>这个要查直接看 <code>fmt</code>  文档就行了</p>\n<p>要记住的要， <code>%q</code>  输出字符串字面值，比如  <code>hello\\nworld</code></p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/golang-%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95%E8%8E%B7%E5%BE%97%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8/",
            "url": "https://songlinlife.top/2022/Go/golang-%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95%E8%8E%B7%E5%BE%97%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8/",
            "title": "golang 遍历目录获得文件列表",
            "date_published": "2022-01-14T12:23:04.000Z",
            "content_html": "<h3 id=\"使用filepathwalk\"><a class=\"anchor\" href=\"#使用filepathwalk\">#</a> 使用 <code>filepath.walk</code></h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"io/fs\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"path/filepath\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"strings\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test_%d.txt\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">var</span> files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfilepath<span class=\"token punctuation\">.</span><span class=\"token function\">Walk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> info fs<span class=\"token punctuation\">.</span>FileInfo<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">IsDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断是否是文件夹</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tfiles <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Ext</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 也可以用这个指令判断后缀</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tfiles <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files: %v\\n\"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>filepath.Walk</code>  需要提供一个遍历函数，按照他给的写就行了。</p>\n<p>结果：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220114203348972.png\" alt=\"image-20220114203348972\" /></p>\n<h3 id=\"使用ioutilreaddir\"><a class=\"anchor\" href=\"#使用ioutilreaddir\">#</a> 使用 <code>ioutil.ReadDir</code></h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"io/ioutil\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"strings\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfiles <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfi<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"..\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not Exit\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> fi <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".go\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 筛选后缀</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tfiles <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"files: %v\\n\"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用osfilereaddir\"><a class=\"anchor\" href=\"#使用osfilereaddir\">#</a> 使用 <code>os.File.Readdir</code></h3>\n<p>这个的使用方法也很简单：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tf<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span><span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"..\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfiles<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">ReadDir</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> files <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file.Name(): %v\\n\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tde<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">ReadDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"..\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以直接 readDir，更加方便</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> de <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file: %v\\n\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/golang-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0/",
            "url": "https://songlinlife.top/2022/Go/golang-%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0/",
            "title": "golang 并发学习",
            "date_published": "2022-01-14T03:42:20.000Z",
            "content_html": "<p>遇到一个非常离奇的事情，我使用读写锁尝试了一下，发现出现了死锁，我本来以为是死锁出现问题，后来原来我犯了一个超级低级的错误。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"sync\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> rwLock sync<span class=\"token punctuation\">.</span>RWMutex</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tData <span class=\"token operator\">:=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token comment\">// time.Sleep(time.Duration(i+1)*time.Second)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait Read\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\trwLock<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reading\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data: %v\\n\"</span><span class=\"token punctuation\">,</span> Data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token comment\">// time.Sleep(time.Second)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UnLock Read\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\trwLock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">//wg.Add(1)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">// time.Sleep(time.Duration(i+10)*time.Second)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\trwLock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"writing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\tData <span class=\"token operator\">+=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token comment\">// time.Sleep(time.Second * 5)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"writed over\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\trwLock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        wg<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//wg.Wait()</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个错误低级的可以，不是死锁出现了问题，而是 waitgroup 出现了问题，waitgroup 放在了 for 循环之内，导致其永远得不到释放。</p>\n<p>关于读写锁，这里有一篇文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96YWJsb2cubWUvMjAxNy8wOS8yNy9nb19zeW5jLw==\">go 的读写锁</span></p>\n<h4 id=\"once只执行一次\"><a class=\"anchor\" href=\"#once只执行一次\">#</a> once 只执行一次</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"sync\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> once sync<span class=\"token punctuation\">.</span>Once</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i: %v\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tonce<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ones<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tonce<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">ones</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ones\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220114145505142.png\" alt=\"image-20220114145505142\" /></p>\n<h3 id=\"go通道\"><a class=\"anchor\" href=\"#go通道\">#</a> go 通道</h3>\n<h5 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h5>\n<p><code>channel := make(chan int)</code></p>\n<p><code>channel := make(chna int, 2)</code>   可以定义有缓存的通道，这样就可以实现一步通信</p>\n<p>通道主要维护了一个锁和两个队列， <code>发送队列</code> 和  <code>接收队列</code> ，如果通道有缓冲区，那么通道还会维护维护一个缓冲队列。如果缓冲队列为空，那么发送队列一定为空，如果缓冲队列未空，那么接受队列一定为空。任意时刻，接受队列和缓冲队列一定有一个为空。</p>\n<h5 id=\"通道的遍历\"><a class=\"anchor\" href=\"#通道的遍历\">#</a> 通道的遍历</h5>\n<p>可以看这篇文章：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdW9rZTM2MC5jb20vdHV0b3JpYWwvZ29sYW5nL2NoYW5uZWwtbG9vcA==\">channel 遍历</span></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220123105905999.png\" alt=\"image-20220123105905999\" /></p>\n<h5 id=\"select来读取通道\"><a class=\"anchor\" href=\"#select来读取通道\">#</a> select 来读取通道</h5>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> chanInt <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> chanStr <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tchanInt <span class=\"token operator\">&lt;-</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tchanStr <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>chanInt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>chanStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> r <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>chanInt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chanInt: %v\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> r <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>chanStr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chanStr: %v\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意通道关闭后仍然可读，并且读到的是默认值。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220114154223547.png\" alt=\"image-20220114154223547\" /></p>\n<p>通道关闭后还可读，但通道关闭后不能写，不能 reopen 只能重新再开一个通道，并且关闭后的通道不能再关闭，否则会报 panic。</p>\n<h3 id=\"timer定时器\"><a class=\"anchor\" href=\"#timer定时器\">#</a> timer 定时器</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ttimer <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time.Now(): %v\\n\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tt1 <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>timer<span class=\"token punctuation\">.</span>C</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1: %v\\n\"</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tt2 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2: %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;-</span>t2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>&lt;- timer.C</code>  才会触发定时器，返回当前的时间</p>\n<p><code>time.After</code>  会直接 wait，并且返回一个 channel，要得到时间只需要  <code>&lt;-t2</code></p>\n<p>注意：定时器只有使用时才会触发等待，而 <code>After</code>  立即触发等待。</p>\n<h3 id=\"synccond\"><a class=\"anchor\" href=\"#synccond\">#</a> sync.Cond</h3>\n<p>这个玩意有点难理解，我想了挺久才想明白这个干嘛用的。。。。。</p>\n<p><code>Cond</code>  主要是为了解决这样一个场景 —— 一个进程通知多个进程。只有当某一个协程完成后，其他协程才能继续执行，这就需要 1 对 N 的消息通知，而 Cond 就是做这样的工作的。</p>\n<p><code>Cond</code>  初始化需要关联一个锁，这个锁用于防止消息竞争，比如对于下面这个代码中，通过加锁保证了只有一个协程可以写数据，同时也保证了只有一个协程可以读数据或校验数据，锁也可以换成读写锁。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"math/rand\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"sync\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">const</span> N <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">var</span> values <span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcond <span class=\"token operator\">:=</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">NewCond</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sync<span class=\"token punctuation\">.</span>Mutex<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\td <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 模拟一个工作负载</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tcond<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 下面的修改必须在 cond.L 被锁定的时候执行</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tvalues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tcond<span class=\"token punctuation\">.</span><span class=\"token function\">Broadcast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以在 cond.L 被解锁后发出通知</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tcond<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// 上面的通知也可以在 cond.L 未锁定的时候发出。</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">//cond.Broadcast () // 上面的调用也可以放在这里</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 此函数必须在 cond.L 被锁定的时候调用。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcheckCondition <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tf<span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">defer</span> cond<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tcond<span class=\"token punctuation\">.</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token operator\">!</span><span class=\"token function\">checkCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 这里要是 for 循环，因为只有满足条件才能执行下面的代码</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tcond<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这几行代码实现的功能就是，values 被全部填充完毕后，其他协程才能执行。 <code>checkcondition</code>  的作用就是条件检查。</p>\n<p>注意 <code>wait</code>  只有在加锁的条件下才可以使用，当 <code>wait</code>  执行时，会先 <code>Unlock</code>  然后阻塞自身，并塞到等待队列里。用 <code>signal</code>  会从等待队列中唤醒第一个协程，用 <code>Broadcast</code>  会唤醒等待队列中的所有协程。唤醒操作不需要加锁。</p>\n",
            "tags": [
                "Go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/LeetCode/22-1-13%E5%88%B7%E9%A2%98/",
            "url": "https://songlinlife.top/2022/LeetCode/22-1-13%E5%88%B7%E9%A2%98/",
            "title": "22-1-13刷题",
            "date_published": "2022-01-13T03:10:12.000Z",
            "content_html": "<h3 id=\"array\"><a class=\"anchor\" href=\"#array\">#</a> Array</h3>\n<h4 id=\"no1-两数之和\"><a class=\"anchor\" href=\"#no1-两数之和\">#</a> No.1 两数之和</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> target <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tm <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tx <span class=\"token operator\">:=</span> target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok<span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>ok<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span>m<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tm<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这道题主要是使用了 map 来做了结果保存，因为 map 的查询复杂度可以近似为 O (1)，所以这道题的时间复杂度为 O (n)，空间复杂度为 O (n)。</p>\n<p>总结：用 <code>map</code>  来保存之前结果，并且优化查询的复杂度。</p>\n<h4 id=\"no2-二分搜索\"><a class=\"anchor\" href=\"#no2-二分搜索\">#</a> No.2 二分搜索</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二分查找非递归实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>target <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> nums <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   left <span class=\"token operator\">:=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   right <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">for</span> left <span class=\"token operator\">&lt;=</span> right <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      mid <span class=\"token operator\">:=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token keyword\">return</span> mid</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">if</span> target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>奇偶性通过按位与来判断</p>\n<p><code>a &amp; 1 == 1</code> : 判断是否是奇数</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">findMedianSortedArrays</span><span class=\"token punctuation\">(</span>nums1 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> nums2 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">findMedianSortedArrays</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    m<span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    median1<span class=\"token punctuation\">,</span> median2 <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> left <span class=\"token operator\">&lt;=</span> right <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        i <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        j <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> i</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        nums_im1 <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span>MinInt32</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nums_im1 <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nums_i <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span>MaxInt32</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> m <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            nums_i <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        nums_jm1 <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span>MinInt32</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> j <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            nums_jm1 <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        nums_j <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span>MaxInt32</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> j <span class=\"token operator\">!=</span> n <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            nums_j <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> nums_im1 <span class=\"token operator\">&lt;=</span> nums_j <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            median1 <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums_im1<span class=\"token punctuation\">,</span> nums_jm1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            median2 <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nums_i<span class=\"token punctuation\">,</span> nums_j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            left <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            right <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>median1 <span class=\"token operator\">+</span> median2<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span>  <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>median1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> y <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> y</pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> y <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> y</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这道题要求给出两个以及有序的数组，求这两个数组合并后的中位数。</p>\n<p>思路，中位数实际上起到的就是划分作用，那我只要说找到这么一个划分方法就行了，我看了半天才看懂，哎，好久没写算法题了。。。</p>\n<pre><code>          left_part          |         right_part\n    A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]\n    B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]\n\n</code></pre>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWVkaWFuLW9mLXR3by1zb3J0ZWQtYXJyYXlzL3NvbHV0aW9uL3h1bi16aGFvLWxpYW5nLWdlLXlvdS14dS1zaHUtenUtZGUtemhvbmctd2VpLXMtMTE0Lw==\">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/</span></p>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/%E5%BC%80%E5%A7%8BLeetCode%E5%88%B7%E9%A2%98/",
            "url": "https://songlinlife.top/2022/%E5%BC%80%E5%A7%8BLeetCode%E5%88%B7%E9%A2%98/",
            "title": "开始LeetCode刷题",
            "date_published": "2022-01-13T01:56:19.000Z",
            "content_html": "<p>生活所迫，没办法，需要开始刷 LeetCode 准备面试了，😢 。我的人生为什么这么可悲，呜呜呜呜。</p>\n<p>语言： <code>golang</code></p>\n<p>start！</p>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/vim/Vscode%20+%20Vim/",
            "url": "https://songlinlife.top/2022/vim/Vscode%20+%20Vim/",
            "title": "Vscode+vim",
            "date_published": "2022-01-12T04:35:15.000Z",
            "content_html": "<h1 id=\"vscode-vim\"><a class=\"anchor\" href=\"#vscode-vim\">#</a> Vscode + Vim</h1>\n<h3 id=\"快捷键insert\"><a class=\"anchor\" href=\"#快捷键insert\">#</a> 快捷键 insert</h3>\n<p><code>fn + -&gt;</code>  : 跳转行末</p>\n<p><code>c-tab</code> : 切换标签</p>\n<p><code>c-\\</code> : 开分页</p>\n<p><code>c-f4</code> : 关闭标签</p>\n<p><code>c-1</code> : 切换为 1 组，或聚焦编辑器</p>\n<p><code>c +</code>  `: 聚焦终端</p>\n<p><code>a-s-a</code> : 关闭右侧 bar</p>\n<p><code>c-s-a</code> : 快速修复</p>\n<p><code>a-s-e</code> : 开启资源管理器</p>\n<p><code>c-s-f</code> : 全局搜索</p>\n<p><code>c-a-=</code> : 全部展开</p>\n<p><code>c-a-0</code> : 全部折叠</p>\n<p><code>c-s-[</code> : 折叠当前代码段</p>\n<p><code>c-s-]</code> ：展开当前代码段</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220111174047851.png\" alt=\"image-20220111174047851\" /></p>\n<h3 id=\"vim快捷键\"><a class=\"anchor\" href=\"#vim快捷键\">#</a> vim 快捷键</h3>\n<h4 id=\"normal\"><a class=\"anchor\" href=\"#normal\">#</a> normal</h4>\n<p><code>0</code> ： 直接到开头</p>\n<p><code>o</code> : 插入新的一行</p>\n<p><code>c-]</code> : 函数跳转</p>\n<p><code>c-t</code> : 跳转返回</p>\n<p><code>c-A</code> : 行末添加</p>\n<p><code>c-I</code> ：行头插入</p>\n<p><code>V</code> ：视图模式，选中多行</p>\n<p><code>y-w</code> : 复制一个单词，</p>\n<p><code>int-dd</code> : 删除下面多行</p>\n<p><code>:&lt;int,int&gt;d</code> : 删除指定行</p>\n<p><code>y-y</code> : 复制一行</p>\n<p><code>y-$</code> : 复制到行末</p>\n<p><code>ggdG</code> ：删除全部内容</p>\n<p><code>g-h</code> : 相当于鼠标悬停</p>\n<p><code>s-&lt;\\&gt;</code>  : 缩进</p>\n<p>这里有一篇替换的文章写得很好： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYXJ0dGxlLmxhbmQvMjAxNi8wOC8wOC92aW0tc2VhcmNoLWluLWZpbGUuaHRtbCVFMyU4MCU4MiVFOCVBNiU4MSVFNSVBRiVCOSVFNSU4RCU5NSVFOCVBRiU4RCVFNiU5QiVCRiVFNiU4RCVBMiVFRiVCQyU4QyVFNiVBRiU5NCVFNSVBNiU4MiVFNSVBNiU4MiVFNCVCOCU4QiVFRiVCQyU5QQ==\">https://harttle.land/2016/08/08/vim-search-in-file.html。要对单词替换，比如如下：</span></p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220111223857770.png\" alt=\"image-20220111223857770\" /></p>\n<p>想要将 main 替换为 mea，可以  <code>c-V</code>  进入 visual 模式，然后  <code>:%s/main/mea/g</code> 。这样就实现了字符串的替换。如果想实现单词级别的替换，很简单，只需要改为  <code>:%s/ main/ mea/g</code></p>\n<p>修改 Vim 中 Ctrl-c 即  <code>C-c</code>  为  <code>C-A--</code> ，这样就可以愉快用 Ctrl C 进行复制了，美滋滋。</p>\n<p>没有改动  <code>C-v</code> ，visual block 虽然我还没用过，但感觉还是一个重要功能</p>\n<h4 id=\"inset\"><a class=\"anchor\" href=\"#inset\">#</a> Inset</h4>\n<p><code>c-d</code> : 插入新的一行</p>\n",
            "tags": [
                "Vim",
                "vscode",
                "vim"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/Go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/",
            "url": "https://songlinlife.top/2022/Go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/",
            "title": "go语言基础",
            "date_published": "2022-01-12T04:35:15.000Z",
            "content_html": "<h3 id=\"go语言学习\"><a class=\"anchor\" href=\"#go语言学习\">#</a> go 语言学习</h3>\n<p>go 的初始化方式，要么用</p>\n<p><code>a :=</code>  or  <code>var a = </code></p>\n<h4 id=\"切片\"><a class=\"anchor\" href=\"#切片\">#</a> 切片</h4>\n<p>注意切片</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220112151117086.png\" alt=\"image-20220112151117086\" /></p>\n<p>拥有相同的地址空间，也就是说，切片实际上只是一个引用。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s2: %v\\n\"</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s2 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s2: %v\\n\"</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>即使用 make 指定了切片的大小，它也可以扩容。</p>\n<p>要从切片 a 中删除索引为 <code>index</code>  的元素，操作方法是 <code>a = append(a[:index], a[index+1:]...)</code></p>\n<p>用  <code>copy</code>  作为切片的拷贝，如果直接用  <code>=</code>  则是引用。</p>\n<h4 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h4>\n<p>初始化：</p>\n<p><code>aMap := make(map[keyType]valueType, cap)</code></p>\n<p><code>cap</code>  只是预设的大小，mao 是可以动态增长的，这和 C 语言很类似。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>aMap <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tmp <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>aMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>tmp</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aMap: %v\\n\"</span><span class=\"token punctuation\">,</span> aMap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tmp01 <span class=\"token operator\">:=</span> <span class=\"token operator\">*</span>aMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> tmp01<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>aMap := make (map [int]*[] int) : 设置 map 的值类型为切片指针</p>\n<p>aMap := make (map [int][] int): 设置 map 的值类型为切片</p>\n<h5 id=\"判断是否有键\"><a class=\"anchor\" href=\"#判断是否有键\">#</a> 判断是否有键</h5>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> my<span class=\"token punctuation\">[</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> ok<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t: %v\\n\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>t, ok := my[&quot;address&quot;]</code></p>\n<p>用这个方式</p>\n<h4 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h4>\n<p>闭包就是函数加引用环境。</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220112172405621.png\" alt=\"image-20220112172405621\" /></p>\n<p>add 函数返回的就是一个函数，但是这个返回的函数会引用外部的变量 x。</p>\n<p>也就是说 <code>f</code>  在其生命周期中，x 会一直存在。</p>\n<p>输出：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220112172511760.png\" alt=\"image-20220112172511760\" /></p>\n<p>闭包其实并不复杂，只要牢记 <code>闭包=函数+引用环境</code> 。</p>\n<h4 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h4>\n<p>尾递归求解斐波拉切数列</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">fab</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">,</span> n2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> n1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">fab</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n1<span class=\"token operator\">+</span>n2<span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fab</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"init\"><a class=\"anchor\" href=\"#init\">#</a> Init</h4>\n<p>go 中有特殊的函数： <code>init</code>  函数，它会在执行 <code>main</code>  函数之前自动执行。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">fab</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init.....\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220112174831802.png\" alt=\"image-20220112174831802\" /></p>\n<p>会先于 main 函数自动执行，并且一个源文件中可以有多个 init 函数。</p>\n<h4 id=\"类型定义和类型别名\"><a class=\"anchor\" href=\"#类型定义和类型别名\">#</a> 类型定义和类型别名</h4>\n<p>类型定义：</p>\n<p><code>type NewType Type</code></p>\n<p>类型别名：</p>\n<p><code>type NewType = Type</code></p>\n<h4 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h4>\n<p><code>未初始化的结构体，成员都是零值 int 0 float 0.0 bool false string nil nil</code></p>\n<p>初始化方式有列表初始化和部分初始化，可以看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdW9rZTM2MC5jb20vdHV0b3JpYWwvZ29sYW5nL3N0cnVjdC1pbml0\">golang 结构体的初始化</span></p>\n<p><code>struct</code>  可以用 <code>new</code>  来初始化：</p>\n<p><code>pb := new(Book)</code></p>\n<p><code>pb</code>  是实例化的 Book 结构。</p>\n<h4 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h4>\n<p>这个接口有点搞。。。</p>\n<p>首先，接口定义：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Shape <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float32</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接口中定义方法类型。</p>\n<p>结构体需要实现接口</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Square <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tsideLen <span class=\"token builtin\">float32</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> Triangle <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tBottom <span class=\"token builtin\">float32</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tHeight <span class=\"token builtin\">float32</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> Shape <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float32</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s Square<span class=\"token punctuation\">)</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float32</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>sideLen <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>sideLen</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t Triangle<span class=\"token punctuation\">)</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float32</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>Bottom<span class=\"token operator\">*</span>t<span class=\"token punctuation\">.</span>Height<span class=\"token operator\">/</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到针对正方形和三角形分别实现了 Area 函数。</p>\n<h5 id=\"接口的使用\"><a class=\"anchor\" href=\"#接口的使用\">#</a> 接口的使用：</h5>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t <span class=\"token operator\">:=</span> Triangle<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">:=</span> Square<span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>shapes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Shape<span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> shape<span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> shapes<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shape.Area(): %v\\n\"</span><span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">.</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> sh Shape</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sh <span class=\"token operator\">=</span> t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sh.Area(): %v\\n\"</span><span class=\"token punctuation\">,</span> sh<span class=\"token punctuation\">.</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sh <span class=\"token operator\">=</span> s</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sh.Area(): %v\\n\"</span><span class=\"token punctuation\">,</span> sh<span class=\"token punctuation\">.</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>也可以用结构体的指针来对接口进行赋值。</p>\n<h5 id=\"嵌套接口\"><a class=\"anchor\" href=\"#嵌套接口\">#</a> 嵌套接口</h5>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> Fly <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> Swim <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">type</span> FlyFish <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tFly</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tSwim</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">type</span> fish <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f fish<span class=\"token punctuation\">)</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flying\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f fish<span class=\"token punctuation\">)</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swimming\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">var</span> flyfish FlyFish</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tflyfish <span class=\"token operator\">=</span> fish<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tflyfish<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tflyfish<span class=\"token punctuation\">.</span><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>FlyFish</code>  是一个嵌套接口，它实现了 Fly 和 Swim 两个接口，但实际上只要把嵌套接口中所有方法都实现就可以了。</p>\n<h4 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> Animal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tname <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tage  <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>animal Animal<span class=\"token punctuation\">)</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>animal Animal<span class=\"token punctuation\">)</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sleep...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">type</span> Dog <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tAnimal</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcolor <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">type</span> Cat <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tAnimal</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcolor <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tdog <span class=\"token operator\">:=</span> Dog<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tAnimal<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"huahua\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tdog<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tdog<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcat <span class=\"token operator\">:=</span> Cat<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tAnimal<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"yuanyuan\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token string\">\"black\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tcat<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tcat<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h4>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"reflect\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// utils.Test()</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">type</span> MyInt <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">var</span> x MyInt <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tz <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tv <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// fmt.Printf(\"%v\", z)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">var</span> a <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tt <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\ta <span class=\"token operator\">=</span> t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tvalue<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> ok<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"can convert\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cant do convert\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tva<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">if</span> ok<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not float32\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "https://songlinlife.top/2022/docker02-Run%E5%91%BD%E4%BB%A4/",
            "url": "https://songlinlife.top/2022/docker02-Run%E5%91%BD%E4%BB%A4/",
            "title": "docker02: Run命令",
            "date_published": "2022-01-08T05:12:30.000Z",
            "content_html": "<h3 id=\"安装docker\"><a class=\"anchor\" href=\"#安装docker\">#</a> 安装 docker</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95ZWFzeS5naXRib29rLmlvL2RvY2tlcl9wcmFjdGljZS9pbnN0YWxsL3VidW50dQ==\">ubuntu 安装 docker</span></p>\n<p>由于我的 linux 开启了 ufw，所以要设置一下。</p>\n<p>/etc/default/ufw 中修改  <code>DEFAULT_FORWARD_PLICY=&quot;ACCEPT&quot;</code> 。</p>\n<h3 id=\"运行docker\"><a class=\"anchor\" href=\"#运行docker\">#</a> 运行 docker</h3>\n<p><code>sudo docker run -it ubuntu /bin/bash</code></p>\n<p><code>-it</code> ：使用一个交互式的 shell 方式进入 container 内。</p>\n<p><code>/bin/bash</code> : 表示使用 bash 命令。</p>\n<p><code>-itd</code> : 容器后台运行。</p>\n<p><code>--name container_name</code> : 命名容器</p>\n<h3 id=\"进入容器\"><a class=\"anchor\" href=\"#进入容器\">#</a> 进入容器</h3>\n<p><code>sudo docker attach id/name  </code> : 进入容器</p>\n<p><code>Ctrl+P+Q</code> ： 退出容器不关闭容器</p>\n<p><code>sudo docker exec -it  id</code> : exec 方式进入容器。</p>\n<p><code>sudo docker exec -d id command</code> : 后台方式执行 command。</p>\n<h3 id=\"重启容器\"><a class=\"anchor\" href=\"#重启容器\">#</a> 重启容器</h3>\n<p><code> sudo docker run --restart=always --name daemon_dave -d ubuntu /bin/bash -c &quot;while true;do echo hello world;sleep 1;done&quot;</code></p>\n<p><code>--restart=always</code>  ：任何情况退出容器就要重启。</p>\n<p><code>sudo docker start id</code> : 启动容器</p>\n<h3 id=\"打印log\"><a class=\"anchor\" href=\"#打印log\">#</a> 打印 log</h3>\n<p><code>sudo docker logs id</code> : 打印日志。</p>\n<p><code>sudo docker logs -f id</code> : 监控日志</p>\n<h3 id=\"查看容器内信息\"><a class=\"anchor\" href=\"#查看容器内信息\">#</a> 查看容器内信息</h3>\n<p><code>sudo docker top id </code> : 查看进程</p>\n<p><code>sudo docker stats id </code> : 查看资源状态。</p>\n<p><code>sudo docker inspect id</code> : 查看容器具体信息</p>\n<h3 id=\"免-sudo-调用-docker-命令方法\"><a class=\"anchor\" href=\"#免-sudo-调用-docker-命令方法\">#</a> 免 SUDO 调用 DOCKER 命令方法</h3>\n<p><code>sudo groupadd docker</code>  #创建 docker 用户组</p>\n<p><code>sudo usermod -aG docker $&#123;USER&#125;</code>  # 当前用户加入 docker 用户组</p>\n<p><code>sudo systemctl restart docker</code>  # 重启 docker 服务</p>\n<p><code>newgrp - docker</code>  # 使设置在当前会话生效</p>\n<h3 id=\"镜像\"><a class=\"anchor\" href=\"#镜像\">#</a> 镜像</h3>\n<p><code>sudo docker search ubuntu</code> ： 搜索镜像</p>\n<p><img data-src=\"https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220108135633873.png\" alt=\"image-20220108135633873\" /></p>\n<p>Official 表示是官方的镜像。</p>\n<p><code>sudo docker pull ubuntu</code> ：拉取镜像</p>\n<p><code>sudo docker images</code></p>\n<p><strong>重命名：</strong></p>\n<p><code>sudo docker tag ubuntu:10.04 old_ubuntu:old</code></p>\n<p>这个重命名实际上是打标签的过程。</p>\n",
            "tags": [
                "容器",
                "docker"
            ]
        }
    ]
}