<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://songlinlife.top</id>
    <title>Life</title>
    <subtitle></subtitle>
    <icon>https://songlinlife.top/images/favicon.ico</icon>
    <link href="https://songlinlife.top" />
    <author>
      <name>Kalice</name>
    </author>
    <updated>2022-03-15T07:12:26.000Z</updated>
    <entry>
        <id>https://songlinlife.top/2022/MIT6-824%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
        <title>MIT6.824：分布式事务</title>
        <link rel="alternate" href="https://songlinlife.top/2022/MIT6-824%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
        <content type="html">&lt;h3 id=&#34;before-or-after-atomicity-coordinating-concurrent-threads&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#before-or-after-atomicity-coordinating-concurrent-threads&#34;&gt;#&lt;/a&gt; Before-or-After Atomicity: Coordinating Concurrent Threads&lt;/h3&gt;
&lt;p&gt;before-or-after 原子性指的是一个并发操作发生在另一个并发操作的之前（before）或者之后（after）对于结果并没有影响。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Concurrent actions have the before-or-after property if their effect from the point of view of their invokers is the same as if the actions occurred either completely before or completely after one another.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时也提到要实现这种 before-or-after actions 的并发正确性，需要在每个 action 使用共享变量时遵循 locking protocol，说白了就是加锁。&lt;/p&gt;
&lt;p&gt;以一个转账为例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315160439407.png&#34; alt=&#34;image-20220315160439407&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A 账号初始有 300 元，B 账户初始为 100 元。现在有这样一个转账：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Trans(A, B, 10)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A 账号向 B 账号转账了 10 元，同时此时有一个 C 账号，其初始金额为 290 元，并且 B 账号向 C 账号转账 25 元：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;25&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Trans(B,C,25)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这两个操作可以并发执行，那么就会出现错误：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315160516865.png&#34; alt=&#34;image-20220315160516865&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;correctness-and-serialization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#correctness-and-serialization&#34;&gt;#&lt;/a&gt; Correctness and Serialization&lt;/h3&gt;
&lt;p&gt;首先必须明确：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is such a correctness concept: coordination among concurrent actions can be considered to be correct if every result is guaranteed to be one that could have been obtained by some purely serial application of those same actions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要 actions 的结果能够被一些串行的应用所执行得到，那么这些并发操作就是正确的。&lt;/p&gt;
&lt;p&gt;我这句话其实没怎么表述清除。。。&lt;/p&gt;
&lt;p&gt;如果一个 action 仅仅由单个线程所执行，并且再执行之前是正确的，那么执行之后也一定是正确的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315163719498.png&#34; alt=&#34;image-20220315163719498&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当有多个 actions 同时并发，如果这些 actions 是 before-or-after 并且执行之前是 correct，那么新状态也是 correct。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315164015861.png&#34; alt=&#34;image-20220315164015861&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里就引出了线性一致性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;serializable: there exists some serial order of those concurrent transactions that would, if followed, lead to the same ending state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有怎么看懂。。。&lt;/p&gt;
&lt;h3 id=&#34;听课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#听课&#34;&gt;#&lt;/a&gt; 听课&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315194427991.png&#34; alt=&#34;image-20220315194427991&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里老师讲了 &lt;code&gt;serializable&lt;/code&gt; ，算是明白了到底是啥。如果一系列事务（这里就是线性）执行可以得到相同结果（这里的结果指的是外部观测得到的结果）&lt;/p&gt;
&lt;p&gt;就像上面的图中所示，T1 和 T2 两个事务执行结果只有两种情况，所以其他观察到的结果就是非线性一致性。&lt;/p&gt;
&lt;h4 id=&#34;消极锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消极锁&#34;&gt;#&lt;/a&gt; 消极锁&lt;/h4&gt;
&lt;h5 id=&#34;simple-lock&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#simple-lock&#34;&gt;#&lt;/a&gt; simple Lock&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315200327884.png&#34; alt=&#34;image-20220315200327884&#34; /&gt;&lt;/p&gt;
&lt;p&gt;简单锁就是在使用 record 之前进行加锁，知道事务结束后才会释放锁，这样有一个好处就是保证了 serializable，但是缺点也很明显，因为不能并发这就意味着其性能很差。&lt;/p&gt;
&lt;h5 id=&#34;two-phase-locking&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#two-phase-locking&#34;&gt;#&lt;/a&gt; Two-Phase Locking&lt;/h5&gt;
&lt;h4 id=&#34;分布式事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式事务&#34;&gt;#&lt;/a&gt; 分布式事务&lt;/h4&gt;
&lt;h5 id=&#34;2pc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2pc&#34;&gt;#&lt;/a&gt; 2PC&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315203835328.png&#34; alt=&#34;image-20220315203835328&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个 2PC 看起来简单，但还是有各种各样的情况需要考虑。&lt;/p&gt;
&lt;p&gt;2PC 协议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;coordinate 发送命令（也就是图中的 get、put），participate 收到命令后就去申请锁。&lt;/li&gt;
&lt;li&gt;接着，coordinate 发送 prepare 指令，如果 participate 没有 fail，数据没有丢失，record 一致性完好，申请到了锁等等，participate 检查自身状态认为自己可以完成命令就返回 yes，否则返回 No。注意在 participate 返回之前，它必须先写 LOG 到磁盘 persist。participate 回复 prepare yes 之后就开始执行操作。&lt;/li&gt;
&lt;li&gt;如果有一个返回 NO，coordinate 就会认为事务失败并且让 client retry。如果 coordinate 收到了所有的 prepare yes，那么它就会把这个事务写入 LOG。之后及时 coordinate crash，它恢复之后也必须执行这个事务。&lt;/li&gt;
&lt;li&gt;接着 coordinate 发送 commit 指令，所有 participate 收到后，就释放锁，并且在 LOG 将操作修改为 commit 状态，这样即使 participate crash 了，那么它也知道自己 commit 了。participate 返回 ACK。&lt;/li&gt;
&lt;li&gt;coordinate 收到所有 ACK 之后就返回 client 事务成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2PC 会导致死锁，在 prepare 阶段后如果 coordinate fail 或者 crash 之后，participate 并不会超时释放锁，它只会一直持有锁，这就导致 time-block。&lt;/p&gt;
&lt;p&gt;2PC 性能很差，一方面由于它需要很多网络，另一方面由于 participate 返回 prepare 之前必须写 LOG，同时 coordinate 发 commit 之前也必须写 LOG。&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <updated>2022-03-15T07:12:26.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/MIT6-824%EF%BC%9AFrangipani-A-Scalable-Distributed-File-System/</id>
        <title>MIT6.824：Frangipani: A Scalable Distributed File System</title>
        <link rel="alternate" href="https://songlinlife.top/2022/MIT6-824%EF%BC%9AFrangipani-A-Scalable-Distributed-File-System/"/>
        <content type="html">&lt;p&gt;这个内容不是重点，而且这篇论文的年纪比我还大，说实话，我读了一部分感觉，收获不大。&lt;/p&gt;
&lt;h3 id=&#34;听课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#听课&#34;&gt;#&lt;/a&gt; 听课&lt;/h3&gt;
&lt;h4 id=&#34;challenge&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenge&#34;&gt;#&lt;/a&gt; Challenge&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315115544252.png&#34; alt=&#34;image-20220315115544252&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cache 一致&lt;/li&gt;
&lt;li&gt;原子性&lt;/li&gt;
&lt;li&gt;crash recovery&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;cache-coherence&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cache-coherence&#34;&gt;#&lt;/a&gt; Cache coherence&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315120915790.png&#34; alt=&#34;image-20220315120915790&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;获得锁的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获得锁的过程&#34;&gt;#&lt;/a&gt; 获得锁的过程&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315143416693.png&#34; alt=&#34;image-20220315143416693&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315123136719.png&#34; alt=&#34;image-20220315123136719&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;atomic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#atomic&#34;&gt;#&lt;/a&gt; ATOMIC&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220315124144566.png&#34; alt=&#34;image-20220315124144566&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里是拿到所有的锁。&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <updated>2022-03-15T03:36:02.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/%E6%96%B0%E6%97%B6%E4%BB%A3/</id>
        <title>新时代</title>
        <link rel="alternate" href="https://songlinlife.top/2022/%E6%96%B0%E6%97%B6%E4%BB%A3/"/>
        <content type="html">&lt;h3 id=&#34;新时代的主要内涵和重大意义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新时代的主要内涵和重大意义&#34;&gt;#&lt;/a&gt; 新时代的主要内涵和重大意义&lt;/h3&gt;
&lt;p&gt;历史性成就和历史性变革：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314143410767.png&#34; alt=&#34;image-20220314143410767&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进入新时代的依据：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314143522931.png&#34; alt=&#34;image-20220314143522931&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314143538184.png&#34; alt=&#34;image-20220314143538184&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314143630414.png&#34; alt=&#34;image-20220314143630414&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314143707504.png&#34; alt=&#34;image-20220314143707504&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;新时代主要内涵：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314143850984.png&#34; alt=&#34;image-20220314143850984&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314143951961.png&#34; alt=&#34;image-20220314143951961&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144041361.png&#34; alt=&#34;image-20220314144041361&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144101541.png&#34; alt=&#34;image-20220314144101541&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进入新时代的重大意义：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144236167.png&#34; alt=&#34;image-20220314144236167&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144303933.png&#34; alt=&#34;image-20220314144303933&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144325545.png&#34; alt=&#34;image-20220314144325545&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;我国社会主要矛盾的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我国社会主要矛盾的转换&#34;&gt;#&lt;/a&gt; 我国社会主要矛盾的转换&lt;/h3&gt;
&lt;p&gt;我国社会主要矛盾的转换的依据&lt;/p&gt;
&lt;p&gt;理论依据：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144609858.png&#34; alt=&#34;image-20220314144609858&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144636855.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我国社会主要矛盾变化的新表述：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144704119.png&#34; alt=&#34;image-20220314144704119&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实践依据：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144813151.png&#34; alt=&#34;image-20220314144813151&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144823476.png&#34; alt=&#34;image-20220314144823476&#34; /&gt;&lt;/p&gt;
&lt;p&gt;主要矛盾的历次变化：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144906765.png&#34; alt=&#34;image-20220314144906765&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144914288.png&#34; alt=&#34;image-20220314144914288&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144930332.png&#34; alt=&#34;image-20220314144930332&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314144945649.png&#34; alt=&#34;image-20220314144945649&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;我国仍处于并将长期处于社会主义初级阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我国仍处于并将长期处于社会主义初级阶段&#34;&gt;#&lt;/a&gt; 我国仍处于并将长期处于社会主义初级阶段&lt;/h3&gt;
&lt;p&gt;社会主义初级阶段理论的主要内容：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145449581.png&#34; alt=&#34;image-20220314145449581&#34; /&gt;&lt;/p&gt;
&lt;p&gt;社会主义发展的长期性和阶段性：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145554777.png&#34; alt=&#34;image-20220314145554777&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145611358.png&#34; alt=&#34;image-20220314145611358&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我国是最大发展中国家的国际地位没有变：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145651562.png&#34; alt=&#34;image-20220314145651562&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145712025.png&#34; alt=&#34;image-20220314145712025&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145732926.png&#34; alt=&#34;image-20220314145732926&#34; /&gt;&lt;/p&gt;
&lt;p&gt;党在社会主义初级阶段的基本路线：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145828831.png&#34; alt=&#34;image-20220314145828831&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145852582.png&#34; alt=&#34;image-20220314145852582&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145918552.png&#34; alt=&#34;image-20220314145918552&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145935586.png&#34; alt=&#34;image-20220314145935586&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314145952669.png&#34; alt=&#34;image-20220314145952669&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150006922.png&#34; alt=&#34;image-20220314150006922&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;中国特色社会主义政治理论和制度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中国特色社会主义政治理论和制度&#34;&gt;#&lt;/a&gt; 中国特色社会主义政治理论和制度&lt;/h3&gt;
&lt;p&gt;中国特色社会主义政治理论：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150559520.png&#34; alt=&#34;image-20220314150559520&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150613747.png&#34; alt=&#34;image-20220314150613747&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150630631.png&#34; alt=&#34;image-20220314150630631&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150659271.png&#34; alt=&#34;image-20220314150659271&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150708876.png&#34; alt=&#34;image-20220314150708876&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150726215.png&#34; alt=&#34;image-20220314150726215&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150810846.png&#34; alt=&#34;image-20220314150810846&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150834035.png&#34; alt=&#34;image-20220314150834035&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150851684.png&#34; alt=&#34;image-20220314150851684&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314150914474.png&#34; alt=&#34;image-20220314150914474&#34; /&gt;&lt;/p&gt;
&lt;p&gt;中国特色社会主义政治制度：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151014465.png&#34; alt=&#34;image-20220314151014465&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151043278.png&#34; alt=&#34;image-20220314151043278&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151101926.png&#34; alt=&#34;image-20220314151101926&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151406265.png&#34; alt=&#34;image-20220314151406265&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151434072.png&#34; alt=&#34;image-20220314151434072&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;用更加健全的制度体系保证人民当家作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用更加健全的制度体系保证人民当家作&#34;&gt;#&lt;/a&gt; 用更加健全的制度体系保证人民当家作&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151601718.png&#34; alt=&#34;image-20220314151601718&#34; /&gt;&lt;/p&gt;
&lt;p&gt;人民当家作主：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151626519.png&#34; alt=&#34;image-20220314151626519&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151641314.png&#34; alt=&#34;image-20220314151641314&#34; /&gt;&lt;/p&gt;
&lt;p&gt;人民当家作主的内涵：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151712254.png&#34; alt=&#34;image-20220314151712254&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151727548.png&#34; alt=&#34;image-20220314151727548&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为什么坚持人民当家作主：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151753281.png&#34; alt=&#34;image-20220314151753281&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314151806862.png&#34; alt=&#34;image-20220314151806862&#34; /&gt;&lt;/p&gt;
&lt;p&gt;社会主义民主政治制度的优势：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152259011.png&#34; alt=&#34;image-20220314152259011&#34; /&gt;&lt;/p&gt;
&lt;p&gt;社会主义民主政治制度的保证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152348489.png&#34; alt=&#34;image-20220314152348489&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152400703.png&#34; alt=&#34;image-20220314152400703&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152414689.png&#34; alt=&#34;image-20220314152414689&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152430910.png&#34; alt=&#34;image-20220314152430910&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152447716.png&#34; alt=&#34;image-20220314152447716&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152549458.png&#34; alt=&#34;image-20220314152549458&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;全面依法治国建设社会主义法治国家&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全面依法治国建设社会主义法治国家&#34;&gt;#&lt;/a&gt; 全面依法治国，建设社会主义法治国家&lt;/h3&gt;
&lt;p&gt;明确全面推进依法治国：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153031519.png&#34; alt=&#34;image-20220314153031519&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152905367.png&#34; alt=&#34;image-20220314152905367&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314152917105.png&#34; alt=&#34;image-20220314152917105&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153106201.png&#34; alt=&#34;image-20220314153106201&#34; /&gt;&lt;/p&gt;
&lt;p&gt;坚定不移走中国特色社会主义法治道路：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153303968.png&#34; alt=&#34;image-20220314153303968&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153331059.png&#34; alt=&#34;image-20220314153331059&#34; /&gt;&lt;/p&gt;
&lt;p&gt;建设社会主义法治国家:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153406778.png&#34; alt=&#34;image-20220314153406778&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153422299.png&#34; alt=&#34;image-20220314153422299&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153439128.png&#34; alt=&#34;image-20220314153439128&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153506113.png&#34; alt=&#34;image-20220314153506113&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153532435.png&#34; alt=&#34;image-20220314153532435&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153546328.png&#34; alt=&#34;image-20220314153546328&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153606840.png&#34; alt=&#34;image-20220314153606840&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153635660.png&#34; alt=&#34;image-20220314153635660&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153652041.png&#34; alt=&#34;image-20220314153652041&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314153700237.png&#34; alt=&#34;image-20220314153700237&#34; /&gt;&lt;/p&gt;
</content>
        <category term="琐事" scheme="https://songlinlife.top/categories/ss/" />
        <updated>2022-03-14T06:33:47.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/MIT6-824-Aurora/</id>
        <title>MIT6.824: Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases</title>
        <link rel="alternate" href="https://songlinlife.top/2022/MIT6-824-Aurora/"/>
        <content type="html">&lt;h3 id=&#34;aurora&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aurora&#34;&gt;#&lt;/a&gt; Aurora&lt;/h3&gt;
&lt;p&gt;就是 cloud scale 级别的数据库。&lt;/p&gt;
&lt;h3 id=&#34;durability-at-scale&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#durability-at-scale&#34;&gt;#&lt;/a&gt; DURABILITY AT SCALE&lt;/h3&gt;
&lt;h4 id=&#34;replication-and-correlated-failures&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#replication-and-correlated-failures&#34;&gt;#&lt;/a&gt; Replication and Correlated Failures&lt;/h4&gt;
&lt;p&gt;在分布式系统中，经常会遇到各种故障，并且这些故障有些是独立的，有些是相关的。一个思路来设计容错的 replicated system 就是使用 quorum-based voting protocol。&lt;/p&gt;
&lt;p&gt;为了满足一致性，也就是能读到最新的数据，一个读操作获得的票数 &lt;code&gt;Vr&lt;/code&gt;  与一个写操作获得的票数 &lt;code&gt;Vw&lt;/code&gt;  的和必须是 &lt;code&gt;Vr + Vw &amp;gt; V&lt;/code&gt; 。这个不等式很好理解，满足了这个不等式那么读操作必然能够读到最新的数据。同时我们也需要满足 &lt;code&gt;Vw &amp;gt; V/2&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是通常为了容错的做法是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A common approach to tolerate the loss of a single node is to replicate data to (V = 3) nodes and rely on a write quorum of 2/3 (Vw = 2) and a read quorum of 2/3 (Vr = 2).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是作者认为这个数量不是足够的。文章中给出了一个容错设计：&lt;/p&gt;
&lt;p&gt;每个 AZ（Availability Zone）中有两个 replicas，并且需要维持 3 个 AZ。整个系统就有 6 票，写操作需要 4 票，读操作需要 3 票。这样实现写容错就只需要一个 AZ + 一个额外节点完好，写操作只需要满足 2 个 AZ 完好就行。&lt;/p&gt;
&lt;h3 id=&#34;the-log-is-the-database&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#the-log-is-the-database&#34;&gt;#&lt;/a&gt; THE LOG IS THE DATABASE&lt;/h3&gt;
&lt;h3 id=&#34;听课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#听课&#34;&gt;#&lt;/a&gt; 听课&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314194722941.png&#34; alt=&#34;image-20220314194722941&#34; /&gt;&lt;/p&gt;
&lt;p&gt;EBS 用 chain 复制的方法&lt;/p&gt;
&lt;h4 id=&#34;db-tutorial&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#db-tutorial&#34;&gt;#&lt;/a&gt; DB tutorial&lt;/h4&gt;
&lt;p&gt;只写 log record 不写 b tree，这样省时间&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314200345601.png&#34; alt=&#34;image-20220314200345601&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;rds&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rds&#34;&gt;#&lt;/a&gt; RDS&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314202015099.png&#34; alt=&#34;image-20220314202015099&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ft-goals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ft-goals&#34;&gt;#&lt;/a&gt; F.T. Goals&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314202734284.png&#34; alt=&#34;image-20220314202734284&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;quorum&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quorum&#34;&gt;#&lt;/a&gt; Quorum&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314212029093.png&#34; alt=&#34;image-20220314212029093&#34; /&gt;&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <updated>2022-03-14T04:04:58.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/linux/MIT6-S081%EF%BC%9AIntroduction/</id>
        <title>MIT6.S081：Introduction</title>
        <link rel="alternate" href="https://songlinlife.top/2022/linux/MIT6-S081%EF%BC%9AIntroduction/"/>
        <content type="html">&lt;h3 id=&#34;写在开头的话&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写在开头的话&#34;&gt;#&lt;/a&gt; 写在开头的话&lt;/h3&gt;
&lt;p&gt;MIT6.824 这门课我已经做完一半内容了，而且 lab 也只剩下最后的 lab4。所以我在想似乎现在是时候开启新的副本了。&lt;/p&gt;
&lt;p&gt;我知道上一个副本我还没打通关，而且 MIT6.824 是大副本，整个 3 月份加上读论文，我也并没有很大把握能够把这么课程干掉。我的规划里面这么课程是作为我的核心课程，自然也要精细一些。但是 6.S081 的难度并没有那么大，如果时间安排的好的话，在 4 月中旬我是可以结束这门课的。&lt;/p&gt;
&lt;p&gt;关于我为什么要学这么课。&lt;/p&gt;
&lt;p&gt;一个很大的原因就是直接关于操作系统的知识太薄弱了，但是如果要走向数据库、分布式方向就必须和底层也就是操作系统打交道。所以操作系统不得不学。这门课程也是一个本科生课程，我的学习能力还是有点自信的。&lt;/p&gt;
&lt;p&gt;MIT6.824 和 MIT6.S081，争取全部在四月中结束。然后就是愉快的 CPP 康复训练了。五月争取学完 CMU445。如果那时候没有找到实习就接着学 CMU721。&lt;/p&gt;
&lt;p&gt;ok，你可以做到的对吧？&lt;/p&gt;
&lt;h3 id=&#34;命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令&#34;&gt;#&lt;/a&gt; 命令&lt;/h3&gt;
&lt;h4 id=&#34;fork&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fork&#34;&gt;#&lt;/a&gt; fork&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314104858521.png&#34; alt=&#34;image-20220314104858521&#34; /&gt;&lt;/p&gt;
&lt;p&gt;fork 在子进程中返回 0，在父进程中返回子进程的 pid。&lt;/p&gt;
&lt;h4 id=&#34;exec&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#exec&#34;&gt;#&lt;/a&gt; exec&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314105419719.png&#34; alt=&#34;image-20220314105419719&#34; /&gt;&lt;/p&gt;
&lt;p&gt;exec 就是将当前进程内存清空，执行新的命令。这里就是会去执行 echo 命令。但是需要注意的是，这里是清空当前进程的内存，而不是另开一个新进程。如果 exec 执行成功，exec 会执行 exit (0)。如果 exec 执行失败，就会执行 exec 接下来的代码，也就是 printf。&lt;/p&gt;
&lt;h4 id=&#34;forkexec&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#forkexec&#34;&gt;#&lt;/a&gt; forkexec&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314110105319.png&#34; alt=&#34;image-20220314110105319&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当前进程 fork 了一个子进程，子进程使用 exec 清空了当前进程内存，并且执行了 echo。如果 exec 执行失败，才会执行下面的 printf 和 exit。&lt;/p&gt;
&lt;p&gt;而父进程使用 wait 等待子进程传回结束的 status。如果子进程执行 exec 结束，也就是 exit (0)，返回 status 0。如果执行 exec 失败就会是 exit (1)。&lt;/p&gt;
&lt;h4 id=&#34;redirect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redirect&#34;&gt;#&lt;/a&gt; redirect&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220314111428220.png&#34; alt=&#34;image-20220314111428220&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里将子进程的 output 重定向 output.txt。主要，fork 会复制父进程的所有文件描述符，但是维护了一个复制的文件描述符表，这意味着即使我们修改了子进程的文件描述符，不会影响到父进程。&lt;/p&gt;
</content>
        <category term="Linux" scheme="https://songlinlife.top/categories/linux/" />
        <updated>2022-03-14T01:55:18.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/GrimoireLab%EF%BC%9A%E5%A1%AB%E5%9D%91%E8%AE%B0/</id>
        <title>GrimoireLab：填坑记</title>
        <link rel="alternate" href="https://songlinlife.top/2022/GrimoireLab%EF%BC%9A%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
        <content type="html">&lt;p&gt;用于记录我在使用 GrimoireLab 遇到的各种问题。&lt;/p&gt;
&lt;h3 id=&#34;搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搭建&#34;&gt;#&lt;/a&gt; 搭建&lt;/h3&gt;
&lt;p&gt;在阿里云的云服务器上搭建的实例。使用的是香港的节点，所以拉取镜像的速度会很快。&lt;/p&gt;
&lt;h4 id=&#34;遇到的坑点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遇到的坑点&#34;&gt;#&lt;/a&gt; 遇到的坑点&lt;/h4&gt;
&lt;p&gt;ElasticSearch 无法启动&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;elasticsearch_1  | max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;报错信息是虚内存不够用，无法启动 Elastic。解决办法：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;figcaption data-lang=&#34;go&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sysctl &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;w vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max_map_count&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;262144&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;食用方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#食用方法&#34;&gt;#&lt;/a&gt; 食用方法&lt;/h3&gt;
&lt;h4 id=&#34;git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt; git&lt;/h4&gt;
&lt;p&gt;git 不需要配置 config 文件，只要在 projects.json 文件中给出地址就行了：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;OpenDigger&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token property&#34;&gt;&#34;meta&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;&#34;title&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;OpenDigger&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token property&#34;&gt;&#34;git&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token string&#34;&gt;&#34;https://github.com/X-lab2017/open-digger&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token string&#34;&gt;&#34;https://github.com/X-lab2017/open-digger-website&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220313165938014.png&#34; alt=&#34;image-20220313165938014&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以点击添加 filter。&lt;/p&gt;
&lt;p&gt;注意：如果是 private repo 需要在 url 中指定&lt;/p&gt;
</content>
        <category term="xlab" scheme="https://songlinlife.top/categories/xlab/" />
        <updated>2022-03-13T08:19:54.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-lab3-KV-Service/</id>
        <title>MIT6.824: lab3 KV Service</title>
        <link rel="alternate" href="https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-lab3-KV-Service/"/>
        <content type="html">&lt;p&gt;终于到了 Lab3 了，写一个 KV 服务🐍&lt;/p&gt;
&lt;h3 id=&#34;要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#要求&#34;&gt;#&lt;/a&gt; 要求&lt;/h3&gt;
&lt;p&gt;lab3 需要构建一个 fault-tolerance key/value storage service。用到之前 lab2 写的 Raft library。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;三个 api 接口： &lt;code&gt;Put(key, value)&lt;/code&gt; ,  &lt;code&gt;Append(key, arg)&lt;/code&gt; , and  &lt;code&gt;Get(key)&lt;/code&gt; 。如果 key 不存在， &lt;code&gt;Get(key)&lt;/code&gt;  返回空 string，并且 &lt;code&gt;append&lt;/code&gt;  与 &lt;code&gt;put&lt;/code&gt;  操作等价。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;each client talks to the service through a  &lt;code&gt;Clerk&lt;/code&gt;  with Put/Append/Get methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现强一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;达成效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220309191901863.png&#34; alt=&#34;image-20220309191901863&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;part-a&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#part-a&#34;&gt;#&lt;/a&gt; Part A&lt;/h3&gt;
&lt;p&gt;每一个 kv server 都关联了一个 raft peer。&lt;/p&gt;
&lt;p&gt;实现 &lt;code&gt;Put&lt;/code&gt; 、 &lt;code&gt;Append&lt;/code&gt; 、 &lt;code&gt;Get&lt;/code&gt; 。kvserver 先 raft 提交这三个 operation，raft log 写这三个操作的序列。&lt;/p&gt;
&lt;p&gt;kv server 由 raft 决定应该执行什么 operation。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Clerk&lt;/code&gt;  并不知道谁是 leader，因此如果 Clerk 发送 RPC 到错的 kvserver，或者不能到达这个 kvserver，那么 Clerk 需要重新发送到另一个 kvserver。&lt;/p&gt;
&lt;p&gt;如果这个命令 commit 之后，那么 raft 会 apply command，亏 server 会先执行的结果返回给 Clerk。&lt;/p&gt;
&lt;p&gt;如果 operation 没有被 commit，那么 server 发送一个 error，然后 &lt;code&gt;Clerk&lt;/code&gt;  需要重试。&lt;/p&gt;
&lt;h4 id=&#34;我的思考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我的思考&#34;&gt;#&lt;/a&gt; 我的思考&lt;/h4&gt;
&lt;p&gt;client 通过 clerk 发送三种 operation，这三种 operation 只能被 leader 来执行。只要是 leader apply 的 operation 一定是 commit，这毫无疑问。现在的问题是如何让 kvserver 来检查这个操作是执行的呢？&lt;/p&gt;
&lt;p&gt;Put 和 Append 操作只能被执行一次不能被多次执行，这一点需要注意。&lt;/p&gt;
&lt;p&gt;对于 command，需要设计一个格式，能够让 kvserver 知道 operation 是什么。因为 command 就是一个 string。&lt;/p&gt;
&lt;p&gt;按照要求也就是说 client 如果没有执行成功某个 operation 就会一直被阻塞。&lt;/p&gt;
&lt;p&gt;我关于 PutAppend 的考虑，因为操作需要去除重复，因为 client 需要并发。所以不能&lt;/p&gt;
&lt;h3 id=&#34;raft实现线性一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft实现线性一致性&#34;&gt;#&lt;/a&gt; Raft 实现线性一致性&lt;/h3&gt;
&lt;p&gt;多用户并发（每个 client 只是调用一个请求）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#39;s OK to assume that a client will make only one call into a Clerk at a time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提升中也说了，可以假设 client 每一次只是 call 一次。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;it&#39;s OK in this case for the server and client to wait indefinitely until the partition heals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说可以让这个 wait 无限制等下去。（等 commit 可以不限时间）&lt;/p&gt;
&lt;p&gt;但是我们能不能操作一下？搞一个超时？&lt;/p&gt;
&lt;p&gt;我没头绪的时候，看到了 Raft 博士论文，真的感动啊。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturespicturesimage-20220307222045412.png&#34; alt=&#34;image-20220307222045412&#34; /&gt;&lt;/p&gt;
&lt;p&gt;按照这个参数写 RPC 就行了。&lt;/p&gt;
&lt;h4 id=&#34;去重复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#去重复&#34;&gt;#&lt;/a&gt; 去重复&lt;/h4&gt;
&lt;p&gt;我们假定每一个 client 每一次只是执行（call）一个操作，并且如果执行失败的话，那么它会阻塞住，并且一直执行这个请求。&lt;/p&gt;
&lt;p&gt;这样去重复就很简单了，我们只需要在 server 端维护一个 lastComandID 就行了，数据结构为 map []&lt;/p&gt;
&lt;h3 id=&#34;39号更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#39号更新&#34;&gt;#&lt;/a&gt; 3.9 号更新&lt;/h3&gt;
&lt;p&gt;最近一个非常严重的 bug 卡了我一天，怎么都没办法处理好。是关于线性一致性的，我一直没有怎么理解线性一致性这就导致我这个 lab 做得很痛苦。&lt;/p&gt;
&lt;p&gt;先看一下 raft 作者对线性一致性的理解：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In linearizability, each operation appears to execute instantaneously, exactly once, at some point between its invocation and its response. This is a strong form of consistency that is simple for clients to reason about, and it disallows commands being processed multiple times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意这个 exactly once， at some point。也就是说所有操作都只能执行一次，并且是原子性瞬时的。这似乎有些奇怪，因为我们明明可以执行多次的，因为当有请求到 kv server 时候我们就进行了一次写 raft log，然后因为超时原因我们又一次向 raft 发送了请求，有一次写了一次 raft log。所以在 apply 阶段，为了实现这个 exactly once 我们需要对操作进行去重复，保证所有操作只能执行一次。&lt;/p&gt;
&lt;p&gt;但是问题还没结束，去重真的保证了线性一致性吗？注意作者这句话：&lt;strong&gt;at some point between its invocation and its response. **  between its invocation and its response. 是关键所在，也就是说我们的执行是要发生在调用和返回之间的。但是在上面的描述中，我们是怎么操作的？如果当超时就&lt;/strong&gt;重新发送请求 **。这意味着那个超时的请求已经结束了，它没有在调用和返回之间执行！&lt;/p&gt;
&lt;p&gt;来看下面这个场景：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220309100623892.png&#34; alt=&#34;image-20220309100623892&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里有三个 client，并发发送请求。现在我们把问题简单化，只是对 log 中的一个变量 x 进行考虑，它初始为空，A1 表示向 x Append 1。R 表示读这个变量 x。&lt;/p&gt;
&lt;p&gt;注意！这里我的线段表示 client&lt;strong&gt; 发起某一个请求到结束的时间&lt;/strong&gt;，这段时间内 client 可能因此超时等原因多次发送重复的请求，知道最终收到答复。&lt;/p&gt;
&lt;p&gt;因为 KV server 首先执行了 A1、A2。所以这时候 client1 先读取 x，它读到了 x 的值为 12。但是因为 rpc 调用等原因，这个读取到的值没有返回给 client。那么 client 肯定会重新发送读请求的。但是因为&lt;strong&gt;去重&lt;/strong&gt;，我们不能再执行这个读操作了，于是我们把这个读到的结果存起来。等下一次 client1 发送读请求的时候直接发送存好的结果。&lt;/p&gt;
&lt;p&gt;ok，client3 此时执行了 A3，x 的值变为 123，那么 client2 再读后就读到了 123. 并且直接返回给了 client2。&lt;/p&gt;
&lt;p&gt;过了一会，client1 也读到了结果，x 值为 12。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;于是这就没有了线性一致性了，因为 client1 读到了一个旧的值！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么会出现这个情况，因为我们违背了：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;each operation appears to execute instantaneously, exactly once, at some point between its invocation and its response)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;client 的读操作持续了很长一段时间，而不是 execute instantaneously。&lt;/p&gt;
&lt;p&gt;我的思考就是，读请求不能进行去重，也就是说它只能在当前的 KV request 得到处理。&lt;/p&gt;
&lt;h3 id=&#34;310号更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#310号更新&#34;&gt;#&lt;/a&gt; 3.10 号更新&lt;/h3&gt;
&lt;p&gt;遇到问题，10 次测试里面总是会一次测试莫名奇妙丢失 log，导致数据在不同的 kv 上同步失败。。。很失败，我打了一天的 debug，还是没有找到原因。&lt;/p&gt;
&lt;p&gt;我知道问题出在我的 raft 层，但是即使我查看了很久，我也没有找我我的 raft 层问题出在哪里。。。。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;leader 选举可能有点问题，导致选举了不应该成为 leader 的节点，致使覆盖了后续的日志。但是这个可能性不大&lt;/li&gt;
&lt;li&gt;AppendEntries 出错，没有 commit 的 log entries 认为 committed 了，这就导致后续这个丢失。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;问题是我没有找到这个导致怎么情况。。。就这样吧，心累了。。。&lt;/p&gt;
&lt;p&gt;而且 3B 是真的过不了，必须代码重构，把 raft 重新写一遍。。。感觉心好累啊。&lt;/p&gt;
&lt;h3 id=&#34;raft重构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft重构&#34;&gt;#&lt;/a&gt; Raft 重构&lt;/h3&gt;
&lt;p&gt;参考代码：&lt;/p&gt;
&lt;h3 id=&#34;312号更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#312号更新&#34;&gt;#&lt;/a&gt; 3.12 号更新&lt;/h3&gt;
&lt;p&gt;愉快打过 lab3&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220312193359692.png&#34; alt=&#34;image-20220312193359692&#34; /&gt;&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <category term="MIT6.824" scheme="https://songlinlife.top/tags/MIT6-824/" />
        <updated>2022-03-07T05:51:07.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-Object-Storage-on-CRAQ-High-throughput-chain-replication-for-read-mostly-workloads/</id>
        <title>MIT6.824: Object Storage on CRAQ High-throughput chain replication for read-mostly workloads</title>
        <link rel="alternate" href="https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-Object-Storage-on-CRAQ-High-throughput-chain-replication-for-read-mostly-workloads/"/>
        <content type="html">&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;说白了就是 CR 的加强版，将读请求分摊到链上的每个 replicas，搭配 zookeeper 实现了分布式容错机制。&lt;/p&gt;
&lt;h3 id=&#34;基本模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本模型&#34;&gt;#&lt;/a&gt; 基本模型&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220306192043325.png&#34; alt=&#34;image-20220306192043325&#34; /&gt;&lt;/p&gt;
&lt;p&gt;CRAQ (Chain Replication with Apportioned Queries), 只会提供两个原语，读和写。&lt;/p&gt;
&lt;p&gt;两种一致性：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强一致性&lt;/strong&gt;：所有读操作都能读到最新的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最终一致性&lt;/strong&gt;：所有节点 apply write order 相同，但是读操作可能读到 stale data。&lt;/p&gt;
&lt;p&gt;CRAQ 能够保证强一致性。&lt;/p&gt;
&lt;h4 id=&#34;chain-replication&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chain-replication&#34;&gt;#&lt;/a&gt; Chain Replication&lt;/h4&gt;
&lt;p&gt;这张图足够解释 Chain Replication：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220307111243918.png&#34; alt=&#34;image-20220307111243918&#34; /&gt;&lt;/p&gt;
&lt;p&gt;所有的 write request 都必须通过 head 来处理，head 处理 write，也就是修改对应的 object。注意每个 object 都有一个 &lt;code&gt;version&lt;/code&gt; 。修改 object 后 version 也会随之改变。当 head 收到了 write 请求之后就会将这个 write operation 通过 chain 传递下去。在 tail 处才会 commit 这个 write，并且把 reply 返回给 client。&lt;/p&gt;
&lt;h4 id=&#34;chain-replication-with-apportioned-queries&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chain-replication-with-apportioned-queries&#34;&gt;#&lt;/a&gt; Chain Replication with Apportioned Queries&lt;/h4&gt;
&lt;p&gt;Object 在 replicas 上有不同的 version，每个 version 有两种状态： &lt;code&gt;clean&lt;/code&gt;  与 &lt;code&gt;dirty&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;clean&lt;/code&gt; ：当 object 被创建时，它的对应 version 是 clean。只有 clean 状态 version 才能被读取。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dirty&lt;/code&gt; ：当 object 被修改后 version 后增加。如果节点不是 tail，那么它需要将这个 version 的 object append。并将这个 version 标为 &lt;code&gt;dirty&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只有 tail 的 committed 才能将 version 从 dirty 转换为 clean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220307113000838.png&#34; alt=&#34;image-20220307113000838&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Figure 3 很好地解释了 Query 方式，对于一个 Query 来说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果查询的这个 object 的最新的 version 是 clean，那么就将这个 object 返回。&lt;/li&gt;
&lt;li&gt;如果对应的 version 是 dirty，那么 replicas 向 Tail 询问哪个 version 是 clean 的。tail 返回 clean 的 version 号。&lt;/li&gt;
&lt;li&gt;replicas 将对应 clean version 的 object 返回给 client。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：如果一个 version 被确认为 clean，它会删除之前所有 dirty version。但 clean version 之后的却不会被删除！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将像图 3 所示，V1 被确认为 clean version，它会删除 V0（如果有 V0 的话），而不会删除 V2。&lt;/p&gt;
&lt;p&gt;通过这样的机制就可以让每一个 replicas 承担 read，并且还保证了&lt;strong&gt;强一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;scaling-craq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scaling-craq&#34;&gt;#&lt;/a&gt; Scaling CRAQ&lt;/h3&gt;
&lt;p&gt;这一块有点模糊，大致是看懂了。。。&lt;/p&gt;
&lt;p&gt;一个 object 的 identifier 有两个组成&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chain identifier&lt;/code&gt; ：决定有哪些节点会构成这条链&lt;/p&gt;
&lt;p&gt;&lt;code&gt;key identifier&lt;/code&gt; ：决定这个 object 在这条链中的唯一标识&lt;/p&gt;
&lt;h4 id=&#34;链放置策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链放置策略&#34;&gt;#&lt;/a&gt; 链放置策略&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220307122506089.png&#34; alt=&#34;image-20220307122506089&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第一种：指定确定数量的 num_datacenters 将会构成链，总共有 chain_size 的链，使用一致性 hash 来决定 datacenter identifier。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220307122714827.png&#34; alt=&#34;image-20220307122714827&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第二种：链的头部是 dc1，链的尾部是 dcN。严格按照这个顺序定义链。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220307122908296.png&#34; alt=&#34;image-20220307122908296&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第二种：虽然链的顺序定义了，但是每个 datacenter 能放置的链数量也是限定的。&lt;/p&gt;
&lt;h4 id=&#34;craq-within-a-datacenter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#craq-within-a-datacenter&#34;&gt;#&lt;/a&gt; CRAQ within a Datacenter&lt;/h4&gt;
&lt;p&gt;一个 datacenter 中如何选择或者说处理多个链通过该 datacenter。这里有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一致性 hash。&lt;/li&gt;
&lt;li&gt;类似于 GFS 的 membership management。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;craq-across-multiple-datacenters&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#craq-across-multiple-datacenters&#34;&gt;#&lt;/a&gt; CRAQ Across Multiple Datacenters&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;CRAQ’s ability to read from any node improves its latency when chains stretch across the wide-area.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CRAQ 能够显著降低延迟，当 CRAO across wide area。&lt;/p&gt;
&lt;h3 id=&#34;后面部分待续&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后面部分待续&#34;&gt;#&lt;/a&gt; 后面部分待续&lt;/h3&gt;
&lt;h3 id=&#34;听课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#听课&#34;&gt;#&lt;/a&gt; 听课&lt;/h3&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <updated>2022-03-06T11:19:37.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-zookeeper/</id>
        <title>MIT6.824: ZooKeeper: Wait-free coordination for Internet-scale systems</title>
        <link rel="alternate" href="https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-zookeeper/"/>
        <content type="html">&lt;h3 id=&#34;lock-free-wait-free-以及-cas&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lock-free-wait-free-以及-cas&#34;&gt;#&lt;/a&gt; lock-free wait-free 以及 CAS&lt;/h3&gt;
&lt;p&gt;读这篇文章需要一点关于 wait-free、lock-free 和 CAS 的前置知识。&lt;/p&gt;
&lt;p&gt;知乎有一篇文章写了关于 wait-free 和 lock-free 的理解：对 wait-free 和 lock-free 的理解 - 我的猪猪呢的文章 - 知乎 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNDI5MjEzMjM=&#34;&gt;https://zhuanlan.zhihu.com/p/342921323&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对于有锁算法：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305122831221.png&#34; alt=&#34;image-20220305122831221&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到在 &lt;code&gt;slip3&lt;/code&gt;  没有任何线程 &lt;code&gt;MakeProgress&lt;/code&gt; 。这就是因为 T2 在 slip2 加了锁，然后可能因为 IO 操作，它在 slips 不再占用 CPU，但由于操作还没有完成，因此 T2 并没有释放锁，导致 T1 和 T3 在 slip3 没有申请到锁也就没有执行。&lt;/p&gt;
&lt;p&gt;lock-free：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305123155562.png&#34; alt=&#34;image-20220305123155562&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以保证每个 slip 都能有线程 MakeProgress。这个怎么实现呢？可以通过 CAS（Compare And Swap）。&lt;/p&gt;
&lt;p&gt;CAS 有三个操作参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存位置 V&lt;/li&gt;
&lt;li&gt;上一次从内存中读到的值 A&lt;/li&gt;
&lt;li&gt;新的值 B&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CAS 的操作过程：将内存位置 V 的值与 A 进行比较，如果相等说明没有其他线程来修改这个值，于是把内存 V 的值更新为 B（swap），如果不相等，说明 V 上的值被修改过了。于是程序回到开始，继续执行比较置换操作。直到成功结束 loop。因此任意时间内，总有进程能够 MakeProgress，而且时间足够长的话所有进程都能执行完。&lt;/p&gt;
&lt;p&gt;而 wait-free 能提供更高的保证：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305150003064.png&#34; alt=&#34;image-20220305150003064&#34; /&gt;&lt;/p&gt;
&lt;p&gt;任意的一个 slip 下，每条线程都能够 MakeProgress。&lt;/p&gt;
&lt;p&gt;Wait-free 被定义为算法在完成最终目标之前，每一个操作都能在有限步内实现。这里的第一个 operation 可以理解为本文的 Make Progress，step 可以理解为 Slip，当线程的每一个 Slip 都在 Make Progress 时，那么针对一个特定的算法就一定能在有限个 Slip 内完成，这是显而易见的。&lt;/p&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Zookeeper，a service for coordinating processes of distributed applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说白了就是一个协调处理分布式 process 的服务。&lt;/p&gt;
&lt;h3 id=&#34;the-zookeeper-service&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#the-zookeeper-service&#34;&gt;#&lt;/a&gt; The ZooKeeper service&lt;/h3&gt;
&lt;h4 id=&#34;znode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#znode&#34;&gt;#&lt;/a&gt; Znode&lt;/h4&gt;
&lt;p&gt;znode 就类似与文件系统，每个节点都是一个 zonde，每个 znode 能可能有 parent 或者 children。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305151252501.png&#34; alt=&#34;image-20220305151252501&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;watch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#watch&#34;&gt;#&lt;/a&gt; watch&lt;/h4&gt;
&lt;p&gt;当 client issue 一个 watch flag 给一个读操作。那么当这个读取的信息发生了改变的时候，就会触发 watch 给这个 client 发送一个 notification。因为我们并不需要告知 client，而只要告知发生了 change 这个事实，因此在一个时间段 change 了什么，发生了几次 change 都不需要考虑。&lt;/p&gt;
&lt;p&gt;值得注意的是，watch 操作是一次性的，执行完通知 watch 就结束了，client 的下一次读可以接着加上一个 watch flag。&lt;/p&gt;
&lt;p&gt;同时，如果当前 replicas 宕机了，client 会转向另一个 replicas，之前所有注册的 watch 都失效，因为 watch table 丢失了。&lt;/p&gt;
&lt;p&gt;这里有一篇文章详细介绍了 zookeeper 的 watch：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sdnFpdXNoaS5naXRodWIuaW8vMjAyMC8wMS8yMi96b29rZWVwZXItMi8=&#34;&gt;https://lvqiushi.github.io/2020/01/22/zookeeper-2/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这张图也写的很好：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/pictureszk-watch-eventType.png&#34; alt=&#34;watch-eventType&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当非 None 事件出现时就会触发 watch，并且 watch 会失效。&lt;/p&gt;
&lt;h4 id=&#34;zookeeper-guarantees&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zookeeper-guarantees&#34;&gt;#&lt;/a&gt; ZooKeeper guarantees&lt;/h4&gt;
&lt;p&gt;zookeeper 有两个基本的 ordering guarantee：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Linearizable write&lt;/code&gt; ：zookeeper 保证所有关于 update（也就是写）的 request 都是 serializabel。（注意它并不包括读）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FIFO client order&lt;/code&gt; ：来自一个 client 所有的 request 执行顺序遵从 client 发送这些 request 的顺序，也就是 FIFO。&lt;/p&gt;
&lt;h4 id=&#34;关于configuration&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于configuration&#34;&gt;#&lt;/a&gt; 关于 configuration&lt;/h4&gt;
&lt;p&gt;zookeeper 使用 leader/worker 机制，这就意味着当 leader 改变的时候，有大量的 configuration 参数也需要改变。但是必须满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 leader 开始对 configuration make change，其他 processes 不应该使用这些已经改变的 configuration。&lt;/li&gt;
&lt;li&gt;如果 leader 在 configuration 整个 update 完了之前就 dead 了，我们不希望这个 partial configuration 被使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于第一个要求，可以使用分布式锁来控制，即 leader 写的时候其他 worker 不应该读。但是分布式锁可能导致性能下降，所以 zookeeper 提出了一个 &lt;code&gt;ready znode&lt;/code&gt;  机制。&lt;/p&gt;
&lt;p&gt;leader 会创建一个 &lt;code&gt;ready&lt;/code&gt;  znode，并且其他 process 都只能通过读这个 znode 来更新 configuration。如果这个 leader 需要更新 configuration，就把 &lt;code&gt;ready&lt;/code&gt;  删除、更新数据并且创建 ready。需要注意的 ready 并不是只有一个，论文中提到可能需要 update 5000 个不同的 znode。&lt;/p&gt;
&lt;p&gt;但是论文中也提到了一个问题，如果一个 client 读到了 ready exist，但是 new leader 在此之后对 ready 进行了 change，那么 client 就会在 change in progress 时候读到数据。&lt;/p&gt;
&lt;p&gt;解决办法：设置 watch flag。zookeeper 可以保证在 make change 之后，在 client 读到新的数据之前一定能够收到 notification。&lt;/p&gt;
&lt;h4 id=&#34;sync&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sync&#34;&gt;#&lt;/a&gt; Sync&lt;/h4&gt;
&lt;p&gt;sync 类似于 Flush 命令，注意 ZooKeeper guarantees，zookeeper 保证 order。在后文里有写这个 read order 指的不只是执行顺序 FIFO，还要有不能回头读的意思。&lt;/p&gt;
&lt;p&gt;sync 做的就是把 read 命令先挂起，然后 replicas 向 leader 拉取新的数据，注意这个新数据并不指的完全新，只是到 read 需要的那个 point 就行了。&lt;/p&gt;
&lt;h4 id=&#34;examples-of-primitives&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#examples-of-primitives&#34;&gt;#&lt;/a&gt; Examples of primitives&lt;/h4&gt;
&lt;h5 id=&#34;configuration-management&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#configuration-management&#34;&gt;#&lt;/a&gt; Configuration Management&lt;/h5&gt;
&lt;p&gt;Zookeeper 需要使用到动态的 configuration，但是它实现这个的方式知识将 config 存在在一个 znode 中，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;z_c&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 。processes 启动后会读取 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;z_c&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 获得配置，并且设置 watch flag。当 configuration 修改之后，process 可以获得 notification 并且读取最新的 configuration。&lt;/p&gt;
&lt;h5 id=&#34;rendezvous&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rendezvous&#34;&gt;#&lt;/a&gt; Rendezvous&lt;/h5&gt;
&lt;p&gt;有时候，client 需要启动一个 master process 和一些 worker process，但是这个 starting processes 是被调度器完成的，因此 client 并没有办法预先知道 master 暴露的端口和地址。Zookeeper 使用一个 Rendezvous znode，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;z_r&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 来解决这一问题。master 启动之后，会把自己提供服务的端口和地址写到 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;z_r&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 中。worker 启动之后就读取这个 znode，并且设置 watch flag。&lt;/p&gt;
&lt;h5 id=&#34;group-membership&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#group-membership&#34;&gt;#&lt;/a&gt; Group Membership&lt;/h5&gt;
&lt;p&gt;这个很好理解，说白了就是为一个 group 设置一个 znode，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;z_g&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.716668em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。当这个 group 的 process 启动时，就会在这个 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;z_g&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.716668em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 下创建子 znode。这些 znode 是 ephemeral node，如果 client fail 或者 session 关闭后，zookeeper 会自动回收。因此，要得到 group 信息只需要看 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;z_g&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.716668em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15139200000000003em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的子节点就行了。同时还可以设置一个 watch flag，当 group information change 时候接收通知。&lt;/p&gt;
&lt;h4 id=&#34;锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#锁&#34;&gt;#&lt;/a&gt; 锁&lt;/h4&gt;
&lt;h5 id=&#34;简单锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单锁&#34;&gt;#&lt;/a&gt; 简单锁&lt;/h5&gt;
&lt;p&gt;最简单的实现锁的方式就是创建一个 ephemeral znode。如果 client 创建该文件成功就意味着获得锁，如果删除该文件就意味着释放锁。但是这就一个问题，如果有很多用户同时在申请锁，那就无法满足按申请顺序获得锁。（Herd Effect）&lt;/p&gt;
&lt;h5 id=&#34;simple-locks-without-herd-effect&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#simple-locks-without-herd-effect&#34;&gt;#&lt;/a&gt; Simple Locks without Herd Effect&lt;/h5&gt;
&lt;p&gt;它的实现方式很巧妙：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305205542785.png&#34; alt=&#34;image-20220305205542785&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申请锁时，先创建 &lt;code&gt;znode l&lt;/code&gt;  下的子 znode。并且设置 Sequential 和 ephemeral。&lt;/li&gt;
&lt;li&gt;获取 &lt;code&gt;znode l&lt;/code&gt;  的所有 children。&lt;/li&gt;
&lt;li&gt;如果 n 是 C 中最低的 znode，那么获得锁。&lt;/li&gt;
&lt;li&gt;查看 n 之前的那个 znode p。&lt;/li&gt;
&lt;li&gt;如果 p 存在那么 wait，否则跳转到 2。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里需要注意，最后跳转是跳转到步骤 2，因为 znode p 对应的那个 client 如果关闭了 session，那么系统会自动回收这个 znode p。也就是说 znode p 不存在并不意味这 p 刚刚释放了锁。&lt;/p&gt;
&lt;h4 id=&#34;readwrite-locks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#readwrite-locks&#34;&gt;#&lt;/a&gt; Read/Write Locks&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305210202530.png&#34; alt=&#34;image-20220305210202530&#34; /&gt;&lt;/p&gt;
&lt;p&gt;看图说话罢了。&lt;/p&gt;
&lt;h3 id=&#34;zookeeper-implementation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zookeeper-implementation&#34;&gt;#&lt;/a&gt; ZooKeeper Implementation&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305155146341.png&#34; alt=&#34;image-20220305155146341&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这块内容没怎么看懂。。。但是这个&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;zxid&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 听课的时候大致听懂了，这个&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;zxid&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 就是为了防止出现 read back 操作。&lt;/p&gt;
&lt;p&gt;每一个 read 操作都在一个&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;zxid&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 上进行，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;zxid&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 只能随着读操作增大，当切换 replicas 的时候，read 操作也要在相同的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;zxid&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 上进行。&lt;/p&gt;
&lt;h3 id=&#34;听课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#听课&#34;&gt;#&lt;/a&gt; 听课&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305173809911.png&#34; alt=&#34;image-20220305173809911&#34; /&gt;&lt;/p&gt;
&lt;p&gt;zookeeper 并没有实现线性一致性，它允许读到 stale data。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220307102215737.png&#34; alt=&#34;image-20220307102215737&#34; /&gt;&lt;/p&gt;
&lt;p&gt;zookeeper 实现 mini-transaction：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data, v = GETDATA(p, watch)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SETDATA(p, data+1, v)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;zookeeper 通过 getdata 会返回当前 data 的 version，setdata 如果 replicas 中 dataversion 一致才能 setdata。&lt;/p&gt;
&lt;p&gt;这就实现了一个 mini-transaction&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <category term="MIT6.824" scheme="https://songlinlife.top/tags/MIT6-824/" />
        <updated>2022-03-05T02:13:48.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/grimoireLab-%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E7%BB%84%E4%BB%B6/</id>
        <title>grimoireLab: 平台管理组件</title>
        <link rel="alternate" href="https://songlinlife.top/2022/grimoireLab-%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E7%BB%84%E4%BB%B6/"/>
        <content type="html">&lt;h3 id=&#34;mordred&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mordred&#34;&gt;#&lt;/a&gt; Mordred&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;SirMordred is the tool used to coordinate the execution of the GrimoireLab platform, via two main configuration files, the  &lt;code&gt;setup.cfg&lt;/code&gt;  and  &lt;code&gt;projects.json&lt;/code&gt; , which are summarized in their corresponding sections.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说这个工具是管理平台用的。主要的配置文件有两个 &lt;code&gt;Setup.cfg&lt;/code&gt;  和 &lt;code&gt;Projects.json&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;setupcfg&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#setupcfg&#34;&gt;#&lt;/a&gt; Setup.cfg&lt;/h4&gt;
&lt;p&gt;这个配置文件用于管理 &lt;code&gt;GrimoireLab&lt;/code&gt;  的 processes。比如设置 log 日志放在哪，SortingHat 和 ElasticSearch 怎么访问，也可以设置 Perceval 的访问令牌。&lt;/p&gt;
&lt;h4 id=&#34;projectsjson&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#projectsjson&#34;&gt;#&lt;/a&gt; Projects.json&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;The projects.json aims at describing the repositories grouped by a project that will be shown on the dashboards.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说这个配置文件用于配置 repos 是如何被 grouped by a project 然后在 dashboard 上显示的。&lt;/p&gt;
&lt;h3 id=&#34;grimoirelab-toolkit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#grimoirelab-toolkit&#34;&gt;#&lt;/a&gt; grimoirelab-toolkit&lt;/h3&gt;
&lt;p&gt;grimoirelab projects 经常用到的包，比如处理日期的函数。&lt;/p&gt;
&lt;h3 id=&#34;grimoirelab-bestiary&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#grimoirelab-bestiary&#34;&gt;#&lt;/a&gt; grimoirelab-bestiary&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A tool to visually manage software development ecosystems description.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用于直观描述软件开发生态的工具。&lt;/p&gt;
&lt;h3 id=&#34;hatstall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hatstall&#34;&gt;#&lt;/a&gt; Hatstall&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Hatstall is a web interface for &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dpdGh1Yi5jb20vZ3JpbW9pcmVsYWIvc29ydGluZ2hhdA==&#34;&gt;SortingHat&lt;/span&gt; databases developed mainly with &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZGphbmdvcHJvamVjdC5jb20v&#34;&gt;Django&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是 SortingHat 的 Web 接口。&lt;/p&gt;
&lt;p&gt;SortingHat 做的工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they might be using several usernames in the same data source (i.e. different emails for git commits)&lt;/li&gt;
&lt;li&gt;to get a whole view, you need to take into account their contribution in different data sources (git, issues, chats, etc.). You need to merge multiple usernames under a single unique identity&lt;/li&gt;
&lt;li&gt;they might be working for several organizations during project life&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Hatstall 就是处理 multi-identites 更简单的工具。&lt;/p&gt;
</content>
        <category term="xlab" scheme="https://songlinlife.top/categories/xlab/" />
        <updated>2022-02-27T12:18:08.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/grimoireLab-%E6%95%B0%E6%8D%AE%E6%B6%88%E8%B4%B9%E7%BB%84%E4%BB%B6/</id>
        <title>grimoireLab: 数据消费组件</title>
        <link rel="alternate" href="https://songlinlife.top/2022/grimoireLab-%E6%95%B0%E6%8D%AE%E6%B6%88%E8%B4%B9%E7%BB%84%E4%BB%B6/"/>
        <content type="html">&lt;h3 id=&#34;kibiter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kibiter&#34;&gt;#&lt;/a&gt; Kibiter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Kibiter&lt;/code&gt;  就是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9raWJhbmEv&#34;&gt; Kibana&lt;/span&gt; 的定制化 fork。&lt;/p&gt;
&lt;p&gt;下图为 kibana：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220227192947022.png&#34; alt=&#34;image-20220227192947022&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到这个就是一个仪表盘。。。&lt;/p&gt;
&lt;h4 id=&#34;功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能&#34;&gt;#&lt;/a&gt; 功能&lt;/h4&gt;
&lt;h5 id=&#34;面板菜单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面板菜单&#34;&gt;#&lt;/a&gt; 面板菜单&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://camo.githubusercontent.com/5719bb8ee2bd3caadb0293bc6c2a4e56c8571ec10dc173b2886d548b32614281/68747470733a2f2f692e696d6775722e636f6d2f36684f346145562e706e67&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;new-visualization-plugins&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new-visualization-plugins&#34;&gt;#&lt;/a&gt; New visualization plugins&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Kibiter&lt;/code&gt;  默认安装了一些可视化插件，比如 Network plugin，允许用户通过图方式查看数据。&lt;/p&gt;
&lt;h3 id=&#34;sigils&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sigils&#34;&gt;#&lt;/a&gt; sigils&lt;/h3&gt;
&lt;p&gt;这个就是一个 Json 文件夹，包含了所有关于 kibana dashboard 的信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Original indexes where the information come from.&lt;/li&gt;
&lt;li&gt;Searches on those indexes that provide a sub-set of the information.&lt;/li&gt;
&lt;li&gt;Widgets either built on top of the original indexes or on top of the searches.&lt;/li&gt;
&lt;li&gt;Final panels that are an aggregation of several widgets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就说就是关于 Dash Board 的配置。&lt;/p&gt;
&lt;h3 id=&#34;kidash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kidash&#34;&gt;#&lt;/a&gt; Kidash&lt;/h3&gt;
&lt;p&gt;这个就是管理 Kibana-related dashboards 的命令行工具。&lt;/p&gt;
&lt;h3 id=&#34;manuscripts&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#manuscripts&#34;&gt;#&lt;/a&gt; Manuscripts&lt;/h3&gt;
&lt;p&gt;这个组件用于自动生成 enrich 数据的 Report。&lt;/p&gt;
</content>
        <category term="xlab" scheme="https://songlinlife.top/categories/xlab/" />
        <updated>2022-02-27T11:26:10.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/grimoireLab-%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/</id>
        <title>grimoireLab: 数据增强相关组件</title>
        <link rel="alternate" href="https://songlinlife.top/2022/grimoireLab-%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
        <content type="html">&lt;h3 id=&#34;grimoireelk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#grimoireelk&#34;&gt;#&lt;/a&gt; GrimoireELK&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GrimoireELK&lt;/code&gt;  就是一个数据增强组件，这个组件基于 ElasticSearch。这个组件的作用有两个。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存储 &lt;code&gt;perceval&lt;/code&gt;  获得的数据，这样就不用反复拉取。&lt;/li&gt;
&lt;li&gt;对原来的数据进行加工和 enrich，使其能被 K 从 bit 而使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于 raw 数据和 enrich 数据可以直接查看 https://github.com/chaoss/grimoirelab-elk，这里不多描述。&lt;/p&gt;
&lt;h3 id=&#34;ceres&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ceres&#34;&gt;#&lt;/a&gt; Ceres&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ceres&lt;/code&gt;  就是一个数据解析工具，他负责解析从 &lt;code&gt;perceval&lt;/code&gt;  获取得到的数据。&lt;/p&gt;
&lt;p&gt;它的工作逻辑如下：&lt;/p&gt;
&lt;h4 id=&#34;eventize&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eventize&#34;&gt;#&lt;/a&gt; Eventize&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;perceval&lt;/code&gt;  会产生 JSON 格式的数据，而 ceres 做的就是 &lt;code&gt;split&lt;/code&gt; 。通过 &lt;code&gt;eventizing&lt;/code&gt; ，ceres 将 json 文件辨析为 Pandas 的 DataFrame 格式。ceres 有两种解析程度，这个后续再看。&lt;/p&gt;
&lt;h4 id=&#34;format&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#format&#34;&gt;#&lt;/a&gt; Format&lt;/h4&gt;
&lt;p&gt;format 功能就是格式转换，比如将时间从 string 转换为 Date 格式。&lt;/p&gt;
&lt;h4 id=&#34;filter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filter&#34;&gt;#&lt;/a&gt; Filter&lt;/h4&gt;
&lt;p&gt;filter 可以用于过滤某一行的信息。&lt;/p&gt;
&lt;h4 id=&#34;data-enrich&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#data-enrich&#34;&gt;#&lt;/a&gt; Data Enrich&lt;/h4&gt;
&lt;p&gt;数据增强，虽然我不知道它是怎么做到的。&lt;/p&gt;
&lt;h3 id=&#34;sorting-hat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sorting-hat&#34;&gt;#&lt;/a&gt; Sorting Hat&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A tool to manage identities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是简介对于 Sorting Hat 的描述，也就是说它是处理 identities 的。但是简介好像没有说这个 identities 到底是什么，好像只说有唯一 uuid，对于每一独特的 identity 可以定义一个 profile。&lt;/p&gt;
&lt;p&gt;identity 可以对应不同时间段的从属关系。&lt;/p&gt;
&lt;p&gt;Sorting Hat 使用 Perceval 的检索数据，并把获得的 identities 保存到数据库中。&lt;/p&gt;
&lt;p&gt;这玩意的用法我还是没怎么搞懂，identites 和 profile 到底怎么搞？&lt;/p&gt;
</content>
        <category term="xlab" scheme="https://songlinlife.top/categories/xlab/" />
        <updated>2022-02-27T09:39:07.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-lab2-Raft/</id>
        <title>MIT6.824: lab2 Raft</title>
        <link rel="alternate" href="https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-lab2-Raft/"/>
        <content type="html">&lt;p&gt;首先我是读了论文之后再写这个 lab 的，但 raft 论文的内容太多了，只能慢慢一点点看。现在还是先把 lab 完成。&lt;/p&gt;
&lt;p&gt;强烈安利：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbFViVkJWenZOVnhoZ2JjSFFCYmtrUQ==&#34;&gt;https://mp.weixin.qq.com/s/lUbVBVzvNVxhgbcHQBbkkQ&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先上图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220305162951465.png&#34; alt=&#34;image-20220305162951465&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4 个小题全部通关，并且并行测试 1000 次无出错。&lt;/p&gt;
&lt;h3 id=&#34;part-2a&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#part-2a&#34;&gt;#&lt;/a&gt; Part 2A&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;任务要求&lt;/strong&gt;：实现选举算法和心跳包。如果旧的 leader 没有问题就让旧的 leader 继续执行，如果旧的 leader 有问题那么就选举新的 leader。&lt;/p&gt;
&lt;p&gt;这意味着我们不用设置 normal term，只要考虑 leader fail 这种情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任务提示&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成 &lt;code&gt;raft.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;RequestVote&lt;/code&gt;   RPC&lt;/li&gt;
&lt;li&gt;实现 &lt;code&gt;AppendEntries&lt;/code&gt;  RPC&lt;/li&gt;
&lt;li&gt;注意不要发生同时进行选举的情况。&lt;/li&gt;
&lt;li&gt;要求 leader 发生心跳包每秒不超过 10 次。&lt;/li&gt;
&lt;li&gt;要求旧的 leader fail 5 秒内完成选举。&lt;/li&gt;
&lt;li&gt;因为 tester 旅程每秒只能发送 10 次心跳，所以 election timeout 必须要大于 paper 里描述的 150-300。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;part2b&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#part2b&#34;&gt;#&lt;/a&gt; Part2B&lt;/h3&gt;
&lt;h4 id=&#34;33更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33更新&#34;&gt;#&lt;/a&gt; 3.3 更新&lt;/h4&gt;
&lt;p&gt;我真的想干死他妈了，折腾了好几天终于无伤打过 LAB2B，运行 100 次也没有出错，这里面的坑点真的很多。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220303115450291.png&#34; alt=&#34;image-20220303115450291&#34; /&gt;&lt;/p&gt;
&lt;p&gt;首先需要明确 committed 是如何被确认的：&lt;/p&gt;
&lt;p&gt;对于 leader 来说：&lt;strong&gt;nextIndex -&amp;gt; matchIndex -&amp;gt; commitIndex -&amp;gt; applyIndex&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there exists an N such that N &amp;gt; commitIndex, a majority of matchIndex[i] ≥ N, and log[N].term == currentTerm:  set commitIndex = N&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚开始我也搞不懂这个 &lt;code&gt;matchIndex&lt;/code&gt;  是什么东西，leader 是通过 check majority matchIndex 并且如果该 log entry 属于当前 term 就确认 committed。&lt;/p&gt;
&lt;p&gt;对于 follower: **preLogIndex -(匹配成功)&amp;gt; len (logs) -compart with leadercommitted&amp;gt; commitIndex -&amp;gt; applyIndex **&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;commitIndex = min(len(logs) , leaderCommitted&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于 follower 来说可以是 leader 告知 committed，也可以是通过 append log 后自己确认，总之这个过程逻辑自洽。&lt;/p&gt;
&lt;p&gt;但是这个有一个很严重的坑点，会导致时不时出现 &lt;strong&gt;index out of range&lt;/strong&gt; 这个错误。这个错误其实有在 raft guide 上写明，但是我当时并没有看懂，导致执行 100 次总有几次报这个 out of range 错误。。。。&lt;/p&gt;
&lt;p&gt;出现这个问题的原因就是 follower 应用了 stale AppendEntries PRC，然后给 leader 发送了 reply success = true。因为 leader 会重复发送 AppendEntries PRC，如果某个 AppendEntries PRC 返回 true 后，leader 就会执行：&lt;strong&gt;nextIndex[server] += len(args.entries)&lt;/strong&gt;，这就导致有时候 leader 会将相同的 AppendEntries PRC 应用两次后，nextIndex [server] += len (args.entries) 也执行两次。最后导致 nextIndex [server] 要超过了 log 的长度。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;figcaption data-lang=&#34;go&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;last &lt;span class=&#34;token operator&#34;&gt;:=&lt;/span&gt; rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;logs&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;PrevLogIndex&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;logs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 难点在于如何判断旧的 rpc&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;last&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Entries&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;last&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 判断要 append 的 log entries 是不是已经 append 上了&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    flag &lt;span class=&#34;token operator&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;last&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; last&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;TermNumber &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Entries&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;TermNumber &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            flag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; flag &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        reply&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XTerm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 表示这个是过时的 rpc&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;还有一个很严重的坑点，就是选举超时重置，它会导致&lt;strong&gt; rejoin of partitioned leader &lt;em&gt;...&lt;/em&gt;&lt;/strong&gt; 这个测试时不时失败，这是因为选举不当，导致 cluster 没有及时选举出 leader。&lt;/p&gt;
&lt;p&gt;这里需要注意，什么时候才会重置 election timeout：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 follower 升级为 candidate 时会重置。&lt;/li&gt;
&lt;li&gt;当 follower 投出自己的一票时会重置。&lt;/li&gt;
&lt;li&gt;当 follower 接受到 leader 的 appendEntries PRC 时会重置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种情况很简单，就是因为超时才会升级为 candidate，所以成为 candidate 后必须重置。&lt;/p&gt;
&lt;p&gt;第二情况有些复杂，如果一个 leader 或者 candidate 接受到一个 vote request，其中 rf.currentTerm &amp;lt; args.Term。这说明该 leader 或者 candidate 已经 out of date，必须强制转换为 follower，注意，强制转换为 follower 并不代表它可以重置它自身的 election timeout。只有满足严格选举要求，把自己的票投出去后才可以重置。follower 在每一个 Term 有且只有一张选票！但 server 进行 term 提升后就可以分配一张新选票。&lt;/p&gt;
&lt;p&gt;第三种情况其实和第二种情况类似，appendEntries PRC 只能由 leader 发出，一旦当前 server 确认其自身的 currentTerm &amp;lt;= args.Term 就会把选举时间重置。&lt;/p&gt;
&lt;p&gt;只要注意这两个问题：旧 AppendEntries 和 election timeout，就可以轻松 pass all test 了！&lt;/p&gt;
&lt;h3 id=&#34;part-2c&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#part-2c&#34;&gt;#&lt;/a&gt; Part 2C&lt;/h3&gt;
&lt;p&gt;这个 lab 要求我们实现 persistence。&lt;/p&gt;
&lt;h4 id=&#34;33更新-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33更新-2&#34;&gt;#&lt;/a&gt; 3.3 更新&lt;/h4&gt;
&lt;p&gt;无伤通关，就很 nice！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220303191029815.png&#34; alt=&#34;image-20220303191029815&#34; /&gt;&lt;/p&gt;
&lt;p&gt;执行超过 100 次，仍然这么坚挺！太佩服我自己了，嘿嘿😄&lt;/p&gt;
&lt;p&gt;这个基本思路很简单，就是实现 &lt;code&gt;persist&lt;/code&gt; ，然后把 &lt;code&gt;persist()&lt;/code&gt;  插入到 persist state 变换的地方，通过 figure 2 不难知道：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220303172723928.png&#34; alt=&#34;image-20220303172723928&#34; /&gt;&lt;/p&gt;
&lt;p&gt;只要这三个变量改变的时候，我们就插入 &lt;code&gt;persist&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是这里也有一个坑点，这就 appendEntries RPC 会因为网络出错，下面我来描述一下出错情境：&lt;/p&gt;
&lt;p&gt;首先明确，因为我们会不断重复发 AppendEntries RPC，这就导致 follower 需要检查，这个 AppendEntries RPC 是否已经过时，如果过时就返回 false，如果没过时就返回 true&lt;/p&gt;
&lt;h5 id=&#34;testfigure8unreliable2c报错返回true的appendentriesrpc丢失问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#testfigure8unreliable2c报错返回true的appendentriesrpc丢失问题&#34;&gt;#&lt;/a&gt; TestFigure8Unreliable2C 报错，返回 true 的 AppendEntriesRPC 丢失问题&lt;/h5&gt;
&lt;p&gt;原因在于，leader 首先发送了一份 entries，follower 通过 AppendEntries 收到了这份 Entries。follower 检查到这个 AppendEntries 中携带的 Entries 没有被 Append 到自己的 logs 中，于是它 append，并返回 true。但是这个本该返回 true 的 AppendEntries RPC 因为网络没有返回（永久丢失，或者返回很慢，leader 超时不再接受），leader 于是又重新发送了一份相同的 Entries。follower 检查到这个 AppendEntries 中携带的 Entries 之前已经 Append 过了，于是它返回给 leader false。leader 收到 false 后于是重复发送，于是整个系统陷入了 &lt;code&gt;living lock&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;：当 follower 检测到 stale AppendEntriesRPC 时，它告诉 leader，这个 RPC 过时了，并且同时返回 follower 自己的 &lt;code&gt;len(logs)&lt;/code&gt;  也就是 &lt;code&gt;XIndex&lt;/code&gt; 。leader 检查到过时的 RPC，它通过检查 &lt;code&gt;reply.XIndex == len(args.Entris) + rf.nextIndex[server]&lt;/code&gt;  ，如果满足说明它没有接受到那个返回 true 的 AppendEntries，于是它将 &lt;code&gt;rf.nextIndex[server] = reply.Xindex&lt;/code&gt; 。至此，我们就能够解决返回 true 的 AppendEntriesRPC 丢失问题。&lt;/p&gt;
&lt;h5 id=&#34;unreliable-churn-out-of-range-问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unreliable-churn-out-of-range-问题&#34;&gt;#&lt;/a&gt; unreliable churn out of range 问题&lt;/h5&gt;
&lt;p&gt;原因在于，网络太混乱了。在上面我们提到，返回 true 的 AppendEntriesRPC 会因为网络丢失，然后 leader 一直陷入活锁。我们的解决办法是告诉 leader，这个 AppendEntries 过时了，leader 来检查需不需要修改 &lt;code&gt;rf.nextIndex&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;但是！！！&lt;/p&gt;
&lt;p&gt;你有没有想过，因为网络很乱，如果 stale appendEntriesRPC 要比那个返回 true 的 AppendEntriesRPC 先返回呢？leader 对于 stale AppendEntriesRPC，它会认为自己之前的那个返回 True 的 AppendEntriesRPC 丢失了。于是 leader 修改了自己的 nextIndex。但是那个返回 true 的 AppendEntries 因为网络还可以，最后还是成功返回了。leader 于是又修改了自己的 &lt;code&gt;nextIndex&lt;/code&gt; 。这就导致了 out of range 的出现，并且这个问题是偶发性的，因为这属于网络中的极端情况。&lt;/p&gt;
&lt;p&gt;我们的解决办法也很简单，如果 leader 要修改自己的 nextIndex，必须满足：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reply.XIndex == len(args.Entries) + rf.nextIndex[server]&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;testfigure8unreliable2c稀有out-of-range&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#testfigure8unreliable2c稀有out-of-range&#34;&gt;#&lt;/a&gt; TestFigure8Unreliable2C 稀有 out of range&lt;/h5&gt;
&lt;p&gt;因为我的 log 日志的 index 是从 1 开始的，于是在初始化时候，我会默认将 index = 0 设置为 0， applyindex =0 , commitIndex= 0。&lt;/p&gt;
&lt;p&gt;但是在设置 nextIndex，因为日志不匹配，我就需要遍历找到最优的 Index，但是这里我的遍历条件是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for i = len(rf.logs) - 1; i &amp;gt;= 0; i--&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这就会导致在很罕见的情况下，i 会被归为 0，而我们用 0 给 nextIndex 赋值，就导致 preLogIndex 变成了 - 1。这就会出现 out of range。但这个情况很少见，100 次里能出现 1 次？&lt;/p&gt;
&lt;p&gt;改成： &lt;code&gt;for i = len(rf.logs) - 1; i &amp;gt;= 1; i--&lt;/code&gt;  就行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;都是细节！真的太细了。。。。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;part2d&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#part2d&#34;&gt;#&lt;/a&gt; Part2D&lt;/h3&gt;
&lt;p&gt;这个 lab 要求我们完成 log compaction。&lt;/p&gt;
&lt;p&gt;需要实现 &lt;code&gt;Snapshot(index int, snapshot []byte)&lt;/code&gt; ，tester 来定期调用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220303200330913.png&#34; alt=&#34;image-20220303200330913&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;无伤通关34更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无伤通关34更新&#34;&gt;#&lt;/a&gt; 无伤通关！！！！！（3.4 更新）&lt;/h4&gt;
&lt;p&gt;终于无伤通关了 lab2 了，真的服了我自己了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220304214412025.png&#34; alt=&#34;image-20220304214412025&#34; /&gt;&lt;/p&gt;
&lt;p&gt;批量测试还在跑，但是问题不大，嘿嘿。&lt;/p&gt;
&lt;p&gt;2D 其实很简单，就是需要将原来的索引进行替换，我的选择是写两个转换函数：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;figcaption data-lang=&#34;go&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rf &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;Raft&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Convert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; index &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lastIncludedIndex&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rf &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;Raft&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Reconvert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; index &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; rf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lastIncludedIndex&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在刚开始我的想法是，因为每一次做 snap 都会切断 logs，于是需要考虑处理空 log 日志的情况，但是其实没有必要，如果考虑空 log 会导致整个代码逻辑变得非常复杂。&lt;/p&gt;
&lt;p&gt;解决方法：每一次做 snapshot 得到新的 log 时候，我们在 logs 前面插入一个空 log entry，并且它的 term 等于 &lt;code&gt;lastIncludeTerm&lt;/code&gt; 。于是我们之前写的代码就只要一点点改变。&lt;/p&gt;
&lt;p&gt;第二个坑点就是，选择什么时候调用 Installsnapshot。我最开始想的是在 sendAppendEntries 在这个函数的返回逻辑部分进行处理，但是由于 RPC 是建立在 UDP 上的，整个网络异常混乱，导致可能多个 Installsnapshot 调用之间顺序很乱，不利于我们的思考。&lt;/p&gt;
&lt;p&gt;解决办法：把调用 Installsnapshot 放到 heartbeat 函数里，让每一次 heartbeat 考虑要不要调用 installsnapshot。&lt;/p&gt;
&lt;h4 id=&#34;installsnapshot-rpc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#installsnapshot-rpc&#34;&gt;#&lt;/a&gt; Installsnapshot RPC&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220304215521240.png&#34; alt=&#34;image-20220304215521240&#34; /&gt;&lt;/p&gt;
&lt;p&gt;按照要求实现这个 RPC 就行了，需要注意因为整个网络不可信，我们需要验证这个 InstallSnapshot 是否已经过时。&lt;/p&gt;
&lt;h3 id=&#34;遗留的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遗留的问题&#34;&gt;#&lt;/a&gt; 遗留的问题&lt;/h3&gt;
&lt;p&gt;这是我做这个 lab 发现的一个很奇妙的现象，但我完成了 2D 的时候，回过头我检查之前的 ABC 测试，发现 B 测试中的 *😗 RPC byte count 测试出现 RPC byte count failed。&lt;/p&gt;
&lt;p&gt;这个问题是因为，整个网络是 UDP 的，会出现这么一种情况：RPC 包发出去后，因为 UDP 广播，被自己立即接受了，并返回。这样就使得整个网络变得异常臃肿。&lt;/p&gt;
&lt;p&gt;这个 Bug 出现的原因是因为，我在代码中增加了这样一个逻辑，一旦检查到自己发出的 RPC 包被自己接收后就 return。&lt;/p&gt;
&lt;p&gt;但是我至今也没搞懂，为什么不行！&lt;/p&gt;
&lt;p&gt;这个问题，未来的我，你可以解决的对吧？😏&lt;/p&gt;
&lt;h3 id=&#34;raft-basic&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft-basic&#34;&gt;#&lt;/a&gt; Raft Basic&lt;/h3&gt;
&lt;p&gt;将 servers 分为三种状态：leader、follower 和 candidate。&lt;/p&gt;
&lt;p&gt;follower 是消极的，他们只能响应 leader 或者 candidate 的请求。candidate 是选举时产生的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226123046018.png&#34; alt=&#34;image-20220226123046018&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226123113136.png&#34; alt=&#34;image-20220226123113136&#34; /&gt;&lt;/p&gt;
&lt;p&gt;就像图中描述的，term 分为两个阶段 election 和 normal。每个 term 都有对于的 current term number。&lt;strong&gt;如果 candidate 或者 leader 发现他的 term 过时了，那么他们会自动变为 follows。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RequestVote RPCs 在选举时由 candidate 进行初始化，并且 AppendEntries RPCs 被 leader 初始化用于复制 log entries 和提供 heartbeat（就是空的 AppendEntries）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记住 raft 中的节点其实就是状态机！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220228220844868.png&#34; alt=&#34;image-20220228220844868&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里我有一个想法，因为是 state machine，由于 raft 层记录了 lastApply，而且 state machine 只能 apply committed entries。所有的机子都会 apply 相同的 committed entries。因此这里可能会出现重复响应情况，比如 client 发送请求给 leader，leader committed 请求后返回给 client 响应之后马上挂掉了，raft 通过选举产生了新的 leader，那么新的 leader 可能会让 state machine 重复 apply，也就是重复发送响应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是这没有问题！重复是 tcp 层应该解决的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LastApply 永远应该小于或等于 committed index！&lt;/p&gt;
&lt;h3 id=&#34;leader选举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leader选举&#34;&gt;#&lt;/a&gt; Leader 选举&lt;/h3&gt;
&lt;p&gt;server 开启，初始状态为 follower，并且如果他收到 &lt;code&gt;leader&lt;/code&gt;  或者 &lt;code&gt;candidate&lt;/code&gt;  的有效 RPCs，那么就会一直维持 follower。如果 follower 在 election timeout 内没有收到任何 RPCs，那么他就会增加 current term 并且成为 candidate 开启选举。&lt;/p&gt;
&lt;h4 id=&#34;follower&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#follower&#34;&gt;#&lt;/a&gt; follower&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226150941941.png&#34; alt=&#34;image-20220226150941941&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;candidate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#candidate&#34;&gt;#&lt;/a&gt; candidate&lt;/h4&gt;
&lt;p&gt;通过 RequestVote RPC 同时向集群中所有的 server 要求投票。&lt;/p&gt;
&lt;h5 id=&#34;requestvote-rpc的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#requestvote-rpc的结构&#34;&gt;#&lt;/a&gt; RequestVote RPC 的结构：&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226150031701.png&#34; alt=&#34;image-20220226150031701&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;candidate需要做的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#candidate需要做的&#34;&gt;#&lt;/a&gt; candidate 需要做的：&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226150232338.png&#34; alt=&#34;image-20220226150232338&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里其实还少些了一个很重要的条件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Current terms are exchanged whenever servers communicate; if one server’s current term is smaller than the other’s, then it updates its current term to the larger value. If a candidate or leader discovers that its term is out of date, it immediately reverts to follower state. If a server receives a request with a stale term number, it rejects the request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就说如果 leader 或者 candidate 发现有人的 current term number 比它的还要大，那么就自动变成 follower，这个特性很重要！&lt;/p&gt;
&lt;h4 id=&#34;关于randomized-election-timeouts&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于randomized-election-timeouts&#34;&gt;#&lt;/a&gt; 关于 randomized election timeouts&lt;/h4&gt;
&lt;p&gt;论文中提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;raft uses randomized election timeouts to ensure that split votes are rare and that they are resolved quickly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个一直困恼我，整个随机 election timeouts 是如何解决 split votes。因为有一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This spreads out the servers so that in most cases only a single server will time out; it wins the election and sends heartbeats before any other servers time out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段话的意思是说先 timeout 的 server 会获得选举胜利。这里就有一个疑问为什么先 timeout 的 server 一定会获得选举胜利。其实要搞懂还得看 follower。follower 做了一件事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a follower receives no communication over a period of time called the election timeout, then it assumes there is no viable leader and begins an election to choose a new leader.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果 follower 在 &lt;code&gt;election timeout&lt;/code&gt;  没有收到 leader 或 candidate 的 rpc，那么它会开启选举，注意这里的超时时间是 &lt;code&gt;election timeout&lt;/code&gt; 。也就是说过 leader 挂了的话，那么 &lt;code&gt;election timeout&lt;/code&gt;  最小的那个机子就会先意识到，于是他成为 candidate 并且向其他 server 发送 RequestVote RPC。而 raft 的投票机制就是先来先到规则，先发起投票的那个 server 很有可能可以赢得选举。&lt;/p&gt;
&lt;p&gt;candidate 初始化也做了一件事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each candidate restarts its randomized election timeout at the start of an&lt;br /&gt;
election, and it waits for that timeout to elapse before starting the next election&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;candidate 初始化后也会重新随机初始化这个 &lt;code&gt;election timeout&lt;/code&gt; 。如果在这个阶段发生了 split vote 情况，那么 &lt;code&gt;election timeout&lt;/code&gt;  最小的 candidate 就会率先超时，并且开启新的投票，于是其他 candidate 看到新的 RequestVote 中的 &lt;code&gt;current term&lt;/code&gt;  大于自身的 term number，于是这些 candidate 就会自动变成 followers 并给新的 candidate 投票。于是 splitvote 问题就可以很好地解决了！&lt;/p&gt;
&lt;h3 id=&#34;state&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#state&#34;&gt;#&lt;/a&gt; State&lt;/h3&gt;
&lt;h4 id=&#34;所有的server都有的状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#所有的server都有的状态&#34;&gt;#&lt;/a&gt; 所有的 server 都有的状态&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;committedIndex&lt;/code&gt; ：这就是 logs 中 committed highest log entry index，这个初始化为 0。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log[]&lt;/code&gt; ：log 初始化中会把 index 为 0 初始化，也就是后续添加 entry 的 index 都是从 1 开始。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lastApplied&lt;/code&gt; ：index of highes log entry applied to state machine。通过 heartbeat 发送了 entry 之后受到了 confirm，确定是 committed 之后就可以执行了。这个 lab 可能不会涉及。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;commitIndex&lt;/code&gt; ：通过 heartbeat 得到回复，leader 就可以确认 committed 了。&lt;/p&gt;
&lt;h4 id=&#34;leader-维护的状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#leader-维护的状态&#34;&gt;#&lt;/a&gt; leader 维护的状态&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;matchIndex[]&lt;/code&gt; ：对于每个 server，需要复制的最高 log entry index，初始化为 0。我还没搞懂这个最高需要被复制为啥要初始化为 0。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nextIndex[]&lt;/code&gt; : leader 会保存下一个为 server 发送了 log entry 的 index。这里的 index 我直接设定为 log 的索引。（初始化为 &lt;code&gt;len(logs)&lt;/code&gt; ）&lt;/p&gt;
&lt;h3 id=&#34;关于54-safety&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于54-safety&#34;&gt;#&lt;/a&gt; 关于 5.4 Safety&lt;/h3&gt;
&lt;p&gt;有个大前提：leader 可以无限 append log，但是它不能通过选举然后增大自己的 term。&lt;/p&gt;
&lt;h4 id=&#34;严格选举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#严格选举&#34;&gt;#&lt;/a&gt; 严格选举&lt;/h4&gt;
&lt;p&gt;Raft 保证新选举出来的 leader 必须拥有之前 term 所有的 committed entries，也就是说 log entries 只能通过 leader 流向 follower 而不能从 follower 流向 leader。&lt;/p&gt;
&lt;p&gt;这里 candidate 赢得选举的条件有所不同。&lt;/p&gt;
&lt;p&gt;candidate 在请求投票时，会发送自己的 last log entry 和 follower 的 last log entry 进行对比。如果 candidate last log 的 term 要大，获得 term 相同时 candidate log entry 的 index 要大，则认为 candidate 是优先的，这时候才能进行投票。&lt;/p&gt;
&lt;h4 id=&#34;committed规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#committed规则&#34;&gt;#&lt;/a&gt; committed 规则&lt;/h4&gt;
&lt;p&gt;论文的 figure 8 给出了这样一个情况：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220228215916592.png&#34; alt=&#34;image-20220228215916592&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;c&lt;/code&gt;  情况下， &lt;code&gt;s1&lt;/code&gt;  作为 leader 将 index 2 复制给了 s2、s3。然后问题来了，这样 index 2 就是一个 committed entry 了，但是如果 s1 这时候挂掉，s5 参与到选举，由于 s5 在 term3 时候赢得了选举，所以他有 term3 的 log entry，那么 s5 在 &lt;code&gt;d&lt;/code&gt;  情况可以赢得 term5 选举，并把 index 2 复制给了其他 server。可以看到此时的 index 2 的 term 变成了 3。之前的 committed 被覆盖了！&lt;/p&gt;
&lt;p&gt;于是 raft 规定，只有当前 term 的 log entries 才能通过计算 replicas 数的方式进行 &lt;code&gt;committed&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这里又会有新的问题出现了！如果一个 command 对应了 log entries 是之前的 term，那么及时当前 leader 收到了 majority 的 confirm，那么 leader 也不能 apply 这个 log entry。一直到当前的 term 下来了 new command。那么这个旧 term 下的 log entry 才会得到 confirm。&lt;/p&gt;
&lt;h4 id=&#34;safety-argument&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#safety-argument&#34;&gt;#&lt;/a&gt; Safety argument&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;针对 figure 9 的情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220228224051518.png&#34; alt=&#34;image-20220228224051518&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我对于这张图的理解&lt;/p&gt;
&lt;p&gt;如果 s5 可以获得大部分选票的话，那么至少会出现 s3 这种既收到了之前 leader 的 log entry。请注意，论文描述严格选举有一个前提，那就是：赢得选举的 server 必须要在 majority 中保证 up-to-date log entry。这意味着 leader 如果自己任期内的 committed entry 一直是 up-to-date。也就是说 s5 不可能通过选举！&lt;/p&gt;
&lt;p&gt;有一说一，还是有的抽象。。。。&lt;/p&gt;
&lt;h4 id=&#34;timing-and-availability&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#timing-and-availability&#34;&gt;#&lt;/a&gt; Timing and availability&lt;/h4&gt;
&lt;p&gt;需要保证&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;broadcastTime≪electionTimeout≪MTBF&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;broadcastTime&lt;/code&gt;  就是平行发送 RPCs 的平均发送时间 + 接受响应时间。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;electionTimeout&lt;/code&gt; ：这个就是之前提到了选举超时。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MTBF&lt;/code&gt;  ：the average time between failures for a single server&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MTBFs are several months or more&lt;/strong&gt;，所以这个不等式很容易满足&lt;/p&gt;
&lt;h3 id=&#34;log-compaction&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#log-compaction&#34;&gt;#&lt;/a&gt; Log compaction&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220301092739411.png&#34; alt=&#34;image-20220301092739411&#34; /&gt;&lt;/p&gt;
&lt;p&gt;raft 的 snap 机制用于压缩日志，其实它也很简单。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;last included index&lt;/code&gt;  就是 the last entry the state machine had applied，就是 last apply index，注意，只有 committed 的 entry 才会被 apply，而 raft 可以确保所有 committed entry 都会在 state machine 得到 apply。&lt;/p&gt;
&lt;p&gt;** 并且这个 snapshot 还包含 state machine state！** 这是创建 snap 的最大开销。&lt;/p&gt;
&lt;p&gt;所以之前已经 apply 的 log entry 实际上已经没啥太大帮助了，我们只需要保存 last 用于 AppendEntries consistency check。&lt;/p&gt;
&lt;p&gt;对于特殊情况，比如 leader 现在需要废弃 log entries，但是这些 log entries 中还有一些没有发送给某个 follower，比如 follower server 执行很慢，这个 server 刚刚加入网络。。。&lt;/p&gt;
&lt;p&gt;于是这是 leader 会调用 InstallSnapShot RPC：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220301095816047.png&#34; alt=&#34;image-20220301095816047&#34; /&gt;&lt;/p&gt;
&lt;p&gt;leader 通过发送 chunk 方式，把 snapshot 发送给 follower。&lt;/p&gt;
&lt;p&gt;如果 follower 的 last log entry 比接收到的 snapshot 里的 last index 还要 stale，那么 follower 就把全部 log entrie 给扔了。如果 follower pre index 和 snap 里的 last index 重合，那么就只丢弃之前的。&lt;/p&gt;
&lt;p&gt;snapshot 的创建规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;固定 log size 触发创建 snapshot。&lt;/li&gt;
&lt;li&gt;copy-on-write 技术用于创建。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;听讲&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#听讲&#34;&gt;#&lt;/a&gt; 听讲&lt;/h3&gt;
&lt;p&gt;使用 condition&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226202117673.png&#34; alt=&#34;image-20220226202117673&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226202457559.png&#34; alt=&#34;image-20220226202457559&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226210149391.png&#34; alt=&#34;image-20220226210149391&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220226210527368.png&#34; alt=&#34;image-20220226210527368&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220227155319505.png&#34; alt=&#34;image-20220227155319505&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这张图很好地解答了我的疑惑，raft 中的 server 只能是 leader 来对外提供服务，从 client 发送请求到 leader 响应过程分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client 向 server 发送请求，发送给 follower 的请求会被 follower 转发给 leader。&lt;/li&gt;
&lt;li&gt;leader 把 client command 写在 log 中，并通过 Append Entites RPC 发送给其他 followers。&lt;/li&gt;
&lt;li&gt;followers 返回确认消息，如果集群中 majority 都响应了，也就是说 leader 知道了 cluster 中大部分节点就收到了这些 log entity，那么对应的 entity 就是 &lt;code&gt;committed&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;leader 确认 entity 是 committed 之后，就会开始执行 entity 对应的 command，并把执行这个 command 再次发送给 followers。&lt;/li&gt;
&lt;li&gt;followers 收到确认执行 request 之后开始执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我之前想到的 split partition 问题就可以很好解决了，如果集群分裂为两个 partition，然后各自都有 leader，那么对于 min partition 来说，leader 收不到 majority 的确认，因此 leader 没法执行指令。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220301110023351.png&#34; alt=&#34;image-20220301110023351&#34; /&gt;&lt;/p&gt;
&lt;p&gt;raft 使用 fast backup 方法。&lt;/p&gt;
&lt;h3 id=&#34;线性一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性一致性&#34;&gt;#&lt;/a&gt; 线性一致性&lt;/h3&gt;
&lt;h4 id=&#34;什么是线性一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是线性一致性&#34;&gt;#&lt;/a&gt; &lt;strong&gt;什么是线性一致性？&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Linearizable semantics&lt;/strong&gt; （Linearizability）(each operation appears to execute instantaneously, exactly once, at some point between its invocation and its response)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在一个线性一致性的系统里面，任何操作都可能在调用或者返回之间原子和瞬间执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线性一致性，Linearizability，也称为原子一致性（atomic consistency），强一致性（strong consistency）等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也就是通常所说的 CAP 理论中的 C&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现线性一致性需要满足三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;瞬间完成（原子性）&lt;/li&gt;
&lt;li&gt;发生在 Inv 和 Resp 两个事件之间&lt;/li&gt;
&lt;li&gt;反映出 “最新” 的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1 和 2 很好理解，但 “最新” 怎么理解呢？其实很简单就看写操作：&lt;br /&gt;
&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220301144626139.png&#34; alt=&#34;image-20220301144626139&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在图中，x 的值被写操作划分为 3 个区域，每个区域内对应最新的值，也就是说 “最新” 并不代表&lt;strong&gt;确定&lt;/strong&gt;！&lt;/p&gt;
&lt;h4 id=&#34;raft里的线性一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#raft里的线性一致性&#34;&gt;#&lt;/a&gt; Raft 里的线性一致性&lt;/h4&gt;
&lt;p&gt;在 raft 里是这样定义的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一个 client 的操作不能并发。&lt;/li&gt;
&lt;li&gt;如果读操作观察到写操作，那么读操作必须等待写操作完成之后才能执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样我们就可以把下面这种情况拆开，变成一个线性一致的操作。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturespicturespicturesimage-20220301122149285.png&#34; alt=&#34;image-20220301122149285&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;遇到的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遇到的问题&#34;&gt;#&lt;/a&gt; 遇到的问题&lt;/h3&gt;
&lt;h4 id=&#34;227日更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#227日更新&#34;&gt;#&lt;/a&gt; 2.27 日更新：&lt;/h4&gt;
&lt;p&gt;成功完成了 Lab2A，但是还遗留了一个问题，那就是为什么限制选举执行时间才能通过 test，按道理只要选举超时之后，之前选举的结果就会被废弃的。。。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Test (2A): initial election ...
labgob warning: Decoding into a non-default variable/field Term may not work
  ... Passed --   3.0  3   56    6872    0
Test (2A): election after network failure ...
  ... Passed --   9.2  3  238   17813    0
Test (2A): multiple elections ...
  ... Passed --   6.5  7  642   55493    0
PASS
ok  	6.824/raft	18.733s

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;31号更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31号更新&#34;&gt;#&lt;/a&gt; 3.1 号更新&lt;/h4&gt;
&lt;p&gt;raft 在 leader 当选之后会立即在 leader 的 log 中生成一条 no-hup 日志并通过 heartbeat 传递给其他 server。但是在 MIT6.824 实验中没办法实现 no-hup。&lt;/p&gt;
&lt;h4 id=&#34;34-更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-更新&#34;&gt;#&lt;/a&gt; 3.4 更新&lt;/h4&gt;
&lt;p&gt;愉快通关！&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <category term="MIT6.824" scheme="https://songlinlife.top/tags/MIT6-824/" />
        <updated>2022-02-26T03:38:28.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/Artur-%E8%B0%83%E5%BA%A6%E5%99%A8/</id>
        <title>Artur: 调度器</title>
        <link rel="alternate" href="https://songlinlife.top/2022/Artur-%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
        <content type="html">&lt;p&gt;这玩意有点像我之前写过的 MapReduce，也是单 master 负责调度，多 worker 负责执行 task。并且一个 worker 只允许执行一个任务，但执行完任务后可以重新申请 task。&lt;/p&gt;
&lt;p&gt;Artur 就是负责之前 &lt;code&gt;perceval&lt;/code&gt;  任务的调度，分为 &lt;code&gt;arthurd&lt;/code&gt;  和  &lt;code&gt;arthurw&lt;/code&gt; 。 &lt;code&gt;arthurd&lt;/code&gt;  也就是服务端，负责 assign task。而  &lt;code&gt;arturw&lt;/code&gt;  负责申请 task 然后执行。&lt;/p&gt;
&lt;h3 id=&#34;配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置文件&#34;&gt;#&lt;/a&gt; 配置文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Arturd&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight ini&#34;&gt;&lt;figcaption data-lang=&#34;ini&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token section-name selector&#34;&gt;arthur&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;archive_path&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;/tmp/.arthur/archive&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;log_path&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;/tmp/logs/arthurd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;no_archive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;sync_mode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token section-name selector&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;127.0.0.1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;8080&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token section-name selector&#34;&gt;elasticsearch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;es_index&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;http://localhost:9200/items&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token section-name selector&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key attr-name&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token value attr-value&#34;&gt;redis://localhost/8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以指定 port，用于提供服务。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Arturw&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;arthurw -d redis://localhost/8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接给 redis 数据库地址。&lt;/p&gt;
&lt;h3 id=&#34;添加task&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加task&#34;&gt;#&lt;/a&gt; 添加 task&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat tasks.json
&amp;#123;
    &amp;quot;tasks&amp;quot;: [
        &amp;#123;
            &amp;quot;task_id&amp;quot;: &amp;quot;arthur.git&amp;quot;,
            &amp;quot;backend&amp;quot;: &amp;quot;git&amp;quot;,
            &amp;quot;backend_args&amp;quot;: &amp;#123;
                &amp;quot;gitpath&amp;quot;: &amp;quot;/tmp/git/arthur.git/&amp;quot;,
                &amp;quot;uri&amp;quot;: &amp;quot;https://github.com/chaoss/grimoirelab-kingarthur.git&amp;quot;,
                &amp;quot;from_date&amp;quot;: &amp;quot;2015-03-01&amp;quot;
            &amp;#125;,
            &amp;quot;category&amp;quot;: &amp;quot;commit&amp;quot;,
            &amp;quot;scheduler&amp;quot;: &amp;#123;
                &amp;quot;delay&amp;quot;: 10
            &amp;#125;
        &amp;#125;,
        &amp;#123;
            &amp;quot;task_id&amp;quot;: &amp;quot;bugzilla_mozilla&amp;quot;,
            &amp;quot;backend&amp;quot;: &amp;quot;bugzillarest&amp;quot;,
            &amp;quot;backend_args&amp;quot;: &amp;#123;
                &amp;quot;url&amp;quot;: &amp;quot;https://bugzilla.mozilla.org/&amp;quot;,
                &amp;quot;from_date&amp;quot;: &amp;quot;2016-09-19&amp;quot;
            &amp;#125;,
            &amp;quot;category&amp;quot;: &amp;quot;bug&amp;quot;,
            &amp;quot;archive&amp;quot;: &amp;#123;
                &amp;quot;fetch_from_archive&amp;quot;: true,
                &amp;quot;archived_after&amp;quot;: &amp;quot;2018-02-26 09:00&amp;quot;
            &amp;#125;,
            &amp;quot;scheduler&amp;quot;: &amp;#123;
                &amp;quot;delay&amp;quot;: 60,
                &amp;quot;max_retries&amp;quot;: 5
            &amp;#125;
        &amp;#125;
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后发送：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; --data @tasks.json http://127.0.0.1:8080/add
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以这很 restful。&lt;/p&gt;
&lt;h3 id=&#34;后续&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后续&#34;&gt;#&lt;/a&gt; 后续&lt;/h3&gt;
&lt;p&gt;本来想自己运行一下的，但是呃呃我的 redis 镜像一直拉不下来，就懒得弄了。&lt;/p&gt;
</content>
        <category term="xlab" scheme="https://songlinlife.top/categories/xlab/" />
        <updated>2022-02-25T13:46:15.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/Graal-%E5%AD%98%E5%82%A8%E5%BA%93%E5%88%86%E6%9E%90%E5%99%A8/</id>
        <title>Graal: 存储库分析器</title>
        <link rel="alternate" href="https://songlinlife.top/2022/Graal-%E5%AD%98%E5%82%A8%E5%BA%93%E5%88%86%E6%9E%90%E5%99%A8/"/>
        <content type="html">&lt;p&gt;Graal leverages on the Git backend of &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NoYW9zcy9ncmltb2lyZWxhYi1wZXJjZXZhbA==&#34;&gt;Perceval&lt;/span&gt; and enhances it to set up ad-hoc source code analysis. Thus, it fetches the commits from a Git repository and provides a mechanism to plug third party tools/libraries focused on source code analysis.&lt;/p&gt;
&lt;p&gt;Graal 就是使用了之前提到的 perceval 组件的 git backend。拉取 repo 的 commits 并且提供一种方法使用第三方工具用于源码分析。&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#how-it-works&#34;&gt;#&lt;/a&gt; How it works&lt;/h2&gt;
&lt;p&gt;就是拉取一个 git repo 镜像以及 commits 的 meta data。通过创建工作树来执行 checkout 操作。Graal 获取 json 后，分为三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filter。通过 json 文档，选择或者丢弃 commit。然后在工作树上用 commit hash 来执行 checkout 操作。&lt;/li&gt;
&lt;li&gt;Analyze。就是引入分析工具。&lt;/li&gt;
&lt;li&gt;Post-process。最后一步处理 json 文档，比如删除或者重命名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装教程&#34;&gt;#&lt;/a&gt; 安装教程&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NoYW9zcy9ncmltb2lyZWxhYi1ncmFhbA==&#34;&gt;https://github.com/chaoss/grimoirelab-graal&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;常见后端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见后端&#34;&gt;#&lt;/a&gt; 常见后端&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;CoCom&lt;/strong&gt;: 代码复杂度分析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CoDep&lt;/strong&gt;：解析 python 模块的依赖并且转换为 json 格式，而且还可以使用 graph 可视化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CoQua&lt;/strong&gt;：检查代码的质量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CoVuln&lt;/strong&gt;：检查代码的安全性比如将在的 sql 注入、shell 注入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CoLic&lt;/strong&gt; ：扫描代码并且提取 licens 和版权信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CoLang&lt;/strong&gt; ：获得 git repo 的代码语言分布洞察。&lt;/p&gt;
&lt;h3 id=&#34;用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用法&#34;&gt;#&lt;/a&gt; 用法&lt;/h3&gt;
&lt;p&gt;和 &lt;code&gt;perceval&lt;/code&gt;  相类似：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ graal cocom https://github.com/chaoss/grimoirelab-perceval --git-path /tmp/graal-cocom &amp;gt; /graal-cocom.test
Starting the quest for the Graal.
Git worktree /tmp/... created!
Fetching commits: ...
Git worktree /tmp/... deleted!
Fetch process completed: .. commits inspected
Quest completed.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;python中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中&#34;&gt;#&lt;/a&gt; python 中：&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#! /usr/bin/env python3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; graal&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;backends&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cocom &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; CoCom&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# URL for the git repo to analyze&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repo_uri &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ’http&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;github&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;chaoss&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;grimoirelab&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;perceval’&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# directory where to mirror the repo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repo_dir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ’&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;tmp&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;graal&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;cocom’&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Cocom object initialization&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; CoCom&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;uri&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;repo_uri&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; git_path&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;repo_dir&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# fetch all commits&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;commits &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;commit &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; commit &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; cc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fetch&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="xlab" scheme="https://songlinlife.top/categories/xlab/" />
        <updated>2022-02-25T12:08:11.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-The-Design-of-a-Practical-System-for-Fault-Tolerant-Virtual-Machines/</id>
        <title>MIT6.824: The Design of a Practical System for Fault-Tolerant Virtual Machines</title>
        <link rel="alternate" href="https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-The-Design-of-a-Practical-System-for-Fault-Tolerant-Virtual-Machines/"/>
        <content type="html">&lt;h3 id=&#34;错误容忍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#错误容忍&#34;&gt;#&lt;/a&gt; 错误容忍&lt;/h3&gt;
&lt;h3 id=&#34;论文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#论文&#34;&gt;#&lt;/a&gt; 论文&lt;/h3&gt;
&lt;h4 id=&#34;primarybackup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#primarybackup&#34;&gt;#&lt;/a&gt; primary/backup&lt;/h4&gt;
&lt;p&gt;这篇 paper 提出了一种 VM 错误容忍的方法，简单来说就是设置 Primary/backup。primary 用于提供服务，而 backup 用于做 primary 的备份。如果 primary 挂掉之后，那么 backup 能够自动地接管服务，给外界 client 一种没有发生过故障的错觉。&lt;/p&gt;
&lt;p&gt;该方法的核心思想就是保证 primary 和 backup 状态相同，方法也很简单。primary 执行什么操作，backup 也执行什么操作。如果有一个不确定的信息，那么这些信息会被 primary 传送给 backup。这样保证若 backup 和 primary 一直状态相同。&lt;/p&gt;
&lt;p&gt;The Design of a Practical System for Fault-Tolerant&lt;/p&gt;
&lt;h4 id=&#34;基本设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本设计&#34;&gt;#&lt;/a&gt; 基本设计&lt;/h4&gt;
&lt;p&gt;首先是 shared disk 架构，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225110519498.png&#34; alt=&#34;image-20220225110519498&#34; /&gt;&lt;/p&gt;
&lt;p&gt;只有 primary 会被暴露在网络中，所以 client 的输入都会输出给 primary。primary 的所有输出都通过 logging channel 给传送给 backup。&lt;/p&gt;
&lt;p&gt;确定操作的三个要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;primary 必须捕获确定的和非确定的信息。&lt;/li&gt;
&lt;li&gt;确地将输入和不确定信息应用到 backup&lt;/li&gt;
&lt;li&gt;不能降低性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ft协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ft协议&#34;&gt;#&lt;/a&gt; FT 协议&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225113932596.png&#34; alt=&#34;image-20220225113932596&#34; /&gt;&lt;/p&gt;
&lt;p&gt;primary 将 output operation 传递给 backup，并推迟 output，知道 backup 返回确认。但是这也有一个问题，如果 primary 发送 output operation 后立即挂了，那么 output 也会被发送 2 次。但是 tcp 协议可以处理这些重复包。&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <category term="MIT6.824" scheme="https://songlinlife.top/tags/MIT6-824/" />
        <updated>2022-02-25T02:18:21.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/xlab/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Perceval/</id>
        <title>数据采集组件——Perceval</title>
        <link rel="alternate" href="https://songlinlife.top/2022/xlab/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Perceval/"/>
        <content type="html">&lt;h1 id=&#34;数据采集组件perceval&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据采集组件perceval&#34;&gt;#&lt;/a&gt; 数据采集组件 ——Perceval&lt;/h1&gt;
&lt;h3 id=&#34;官方文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#官方文档&#34;&gt;#&lt;/a&gt; 官方文档&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wZXJjZXZhbC5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3Qv&#34;&gt;https://perceval.readthedocs.io/en/latest/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NoYW9zcy9ncmltb2lyZWxhYi1wZXJjZXZhbA==&#34;&gt;Perceval&lt;/span&gt; is a Python module for retrieving data from repositories related to software development. It works with many data sources, from git repositories and GitHub projects to mailing lists, Gerrit or StackOverflow, In this chapter, you will learn the basics of working with Perceval, including how to use it to retrieve information from some kinds of repositories. You’re on your way to software development analysis!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;perceval&lt;/code&gt;  就是 &lt;code&gt;grimoirelab&lt;/code&gt;  的数据源采集组件，也就是最基础的组件。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip3 install perceval
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者也可以用 docker 方式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it grimoirelab/perceval
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;食用方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#食用方式&#34;&gt;#&lt;/a&gt; 食用方式&lt;/h3&gt;
&lt;p&gt;这个工具说白了就是采集工具，它支持的后端有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    askbot           Fetch questions and answers from Askbot site
    bugzilla         Fetch bugs from a Bugzilla server
    bugzillarest     Fetch bugs from a Bugzilla server (&amp;gt;=5.0) using its REST API
    confluence       Fetch contents from a Confluence server
    discourse        Fetch posts from Discourse site
    dockerhub        Fetch repository data from Docker Hub site
    gerrit           Fetch reviews from a Gerrit server
    git              Fetch commits from Git
    github           Fetch issues, pull requests and repository information from GitHub
    gitlab           Fetch issues, merge requests from GitLab
    gitter           Fetch messages from a Gitter room
    googlehits       Fetch hits from Google API
    groupsio         Fetch messages from Groups.io
    hyperkitty       Fetch messages from a HyperKitty archiver
    jenkins          Fetch builds from a Jenkins server
    jira             Fetch issues from JIRA issue tracker
    launchpad        Fetch issues from Launchpad issue tracker
    mattermost       Fetch posts from a Mattermost server
    mbox             Fetch messages from MBox files
    mediawiki        Fetch pages and revisions from a MediaWiki site
    meetup           Fetch events from a Meetup group
    nntp             Fetch articles from a NNTP news group
    pagure           Fetch issues from Pagure
    phabricator      Fetch tasks from a Phabricator site
    pipermail        Fetch messages from a Pipermail archiver
    redmine          Fetch issues from a Redmine server
    rocketchat       Fetch messages from a Rocket.Chat channel
    rss              Fetch entries from a RSS feed server
    slack            Fetch messages from a Slack channel
    stackexchange    Fetch questions from StackExchange sites
    supybot          Fetch messages from Supybot log files
    telegram         Fetch messages from the Telegram server
    twitter          Fetch tweets from the Twitter Search API
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有点意外，我没有想到连 Twitter 都能支持。。。。&lt;/p&gt;
&lt;h4 id=&#34;git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;#&lt;/a&gt; git&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;time perceval git https://github.com/grimoirelab/perceval.git \
  --git-path /tmp/perceval.git &amp;gt; /tmp/perceval.test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这条命令会将拉取到的 git commit 数据保存到对应了文件，格式为 json。&lt;/p&gt;
&lt;p&gt;同时还支持 python 脚本的方式：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#! /usr/bin/env python3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; perceval&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;backends&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;core&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;git &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# url for the git repo to analyze&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repo_url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;http://github.com/grimoirelab/perceval.git&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# directory for letting Perceval clone the git repo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repo_dir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/tmp/perceval.git&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# create a Git object, pointing to repo_url, using repo_dir for cloning&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repo &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Git&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;uri&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;repo_url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gitpath&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;repo_dir&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# fetch all commits as an iterator, and iterate it printing each hash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; commit &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; repo&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fetch&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;commit&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;commit&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;github&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt; github&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; perceval github grimoirelab perceval --sleep-for-rate \
    -t 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 &amp;gt; ~/tmp/github.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 perceval  backend repoOwner 这种方式来获取数据&lt;/p&gt;
&lt;p&gt;通过  &lt;code&gt;--category issue&lt;/code&gt;  来指定获取 issue 信息，值得注意的是 github 会把 pr 当做 issue 进行处理，所以也会自动得到所有 pr 信息。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-获取数据格式&#34;&gt;&amp;#123;
    &amp;quot;backend_name&amp;quot;: &amp;quot;GitHub&amp;quot;,
    &amp;quot;backend_version&amp;quot;: &amp;quot;0.27.0&amp;quot;,
    &amp;quot;category&amp;quot;: &amp;quot;issue&amp;quot;,
    &amp;quot;classified_fields_filtered&amp;quot;: null,
    &amp;quot;data&amp;quot;: &amp;#123;
        &amp;quot;active_lock_reason&amp;quot;: null,
        &amp;quot;assignee&amp;quot;: null,
        &amp;quot;assignee_data&amp;quot;: &amp;#123;&amp;#125;,
        &amp;quot;assignees&amp;quot;: [],
        &amp;quot;assignees_data&amp;quot;: [],
        &amp;quot;author_association&amp;quot;: &amp;quot;CONTRIBUTOR&amp;quot;,
        &amp;quot;body&amp;quot;: &amp;quot;Based on Sphynx, prepared for ReadTheDocs.\n\nRight now, this produces (from jgbarah/perceval repository) [this documentation in ReadTheDocs](http://perceval.readthedocs.org). Once this PR is accepted, I plan to switch ReadTheDocs to point to this repostory (master branch), so that the documentation gets rebuilt every time changes are made to the source code.\n\nThe configuration (docs/conf.py) include lines for running sphinx-apidoc, which generates automatically the docs/perceval.rst file, which is the entry point for the automatically generated documentation, produced based on the docstring comments in the source code.\n\nThe file index.rst is still a bare bones schema. It should be completed in a later patch, with more detailed information about Perceval itself.\n&amp;quot;,
        &amp;quot;closed_at&amp;quot;: &amp;quot;2016-01-04T13:51:56Z&amp;quot;,
        &amp;quot;comments&amp;quot;: 0,
        &amp;quot;comments_data&amp;quot;: [],
        &amp;quot;comments_url&amp;quot;: &amp;quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/comments&amp;quot;,
        &amp;quot;created_at&amp;quot;: &amp;quot;2016-01-03T23:46:04Z&amp;quot;,
        &amp;quot;draft&amp;quot;: false,
        &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/events&amp;quot;,
        &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/chaoss/grimoirelab-perceval/pull/3&amp;quot;,
        &amp;quot;id&amp;quot;: 124679251,
        &amp;quot;labels&amp;quot;: [],
        &amp;quot;labels_url&amp;quot;: &amp;quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/labels&amp;#123;/name&amp;#125;&amp;quot;,
        &amp;quot;locked&amp;quot;: false,
        &amp;quot;milestone&amp;quot;: null,
        &amp;quot;node_id&amp;quot;: &amp;quot;MDExOlB1bGxSZXF1ZXN0NTQ5MzUxODA=&amp;quot;,
        &amp;quot;number&amp;quot;: 3,
        &amp;quot;performed_via_github_app&amp;quot;: null,
        &amp;quot;pull_request&amp;quot;: &amp;#123;
            &amp;quot;diff_url&amp;quot;: &amp;quot;https://github.com/chaoss/grimoirelab-perceval/pull/3.diff&amp;quot;,
            &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/chaoss/grimoirelab-perceval/pull/3&amp;quot;,
            &amp;quot;merged_at&amp;quot;: null,
            &amp;quot;patch_url&amp;quot;: &amp;quot;https://github.com/chaoss/grimoirelab-perceval/pull/3.patch&amp;quot;,
            &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/3&amp;quot;
        &amp;#125;,
        &amp;quot;reactions&amp;quot;: &amp;#123;
            &amp;quot;+1&amp;quot;: 0,
            &amp;quot;-1&amp;quot;: 0,
            &amp;quot;confused&amp;quot;: 0,
            &amp;quot;eyes&amp;quot;: 0,
            &amp;quot;heart&amp;quot;: 0,
            &amp;quot;hooray&amp;quot;: 0,
            &amp;quot;laugh&amp;quot;: 0,
            &amp;quot;rocket&amp;quot;: 0,
            &amp;quot;total_count&amp;quot;: 0,
            &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/reactions&amp;quot;
        &amp;#125;,
        &amp;quot;reactions_data&amp;quot;: [],
        &amp;quot;repository_url&amp;quot;: &amp;quot;https://api.github.com/repos/chaoss/grimoirelab-perceval&amp;quot;,
        &amp;quot;state&amp;quot;: &amp;quot;closed&amp;quot;,
        &amp;quot;timeline_url&amp;quot;: &amp;quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3/timeline&amp;quot;,
        &amp;quot;title&amp;quot;: &amp;quot;Config files for a documentation, using Sphinx.&amp;quot;,
        &amp;quot;updated_at&amp;quot;: &amp;quot;2016-01-04T17:42:23Z&amp;quot;,
        &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/3&amp;quot;,
        &amp;quot;user&amp;quot;: &amp;#123;
            &amp;quot;avatar_url&amp;quot;: &amp;quot;https://avatars.githubusercontent.com/u/1039693?v=4&amp;quot;,
            &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/events&amp;#123;/privacy&amp;#125;&amp;quot;,
            &amp;quot;followers_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/followers&amp;quot;,
            &amp;quot;following_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/following&amp;#123;/other_user&amp;#125;&amp;quot;,
            &amp;quot;gists_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/gists&amp;#123;/gist_id&amp;#125;&amp;quot;,
            &amp;quot;gravatar_id&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/jgbarah&amp;quot;,
            &amp;quot;id&amp;quot;: 1039693,
            &amp;quot;login&amp;quot;: &amp;quot;jgbarah&amp;quot;,
            &amp;quot;node_id&amp;quot;: &amp;quot;MDQ6VXNlcjEwMzk2OTM=&amp;quot;,
            &amp;quot;organizations_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/orgs&amp;quot;,
            &amp;quot;received_events_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/received_events&amp;quot;,
            &amp;quot;repos_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/repos&amp;quot;,
            &amp;quot;site_admin&amp;quot;: false,
            &amp;quot;starred_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/starred&amp;#123;/owner&amp;#125;&amp;#123;/repo&amp;#125;&amp;quot;,
            &amp;quot;subscriptions_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/subscriptions&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;User&amp;quot;,
            &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah&amp;quot;
        &amp;#125;,
        &amp;quot;user_data&amp;quot;: &amp;#123;
            &amp;quot;avatar_url&amp;quot;: &amp;quot;https://avatars.githubusercontent.com/u/1039693?v=4&amp;quot;,
            &amp;quot;bio&amp;quot;: null,
            &amp;quot;blog&amp;quot;: &amp;quot;http://gsyc.es/~jgb&amp;quot;,
            &amp;quot;company&amp;quot;: null,
            &amp;quot;created_at&amp;quot;: &amp;quot;2011-09-09T21:47:40Z&amp;quot;,
            &amp;quot;email&amp;quot;: null,
            &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/events&amp;#123;/privacy&amp;#125;&amp;quot;,
            &amp;quot;followers&amp;quot;: 100,
            &amp;quot;followers_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/followers&amp;quot;,
            &amp;quot;following&amp;quot;: 0,
            &amp;quot;following_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/following&amp;#123;/other_user&amp;#125;&amp;quot;,
            &amp;quot;gists_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/gists&amp;#123;/gist_id&amp;#125;&amp;quot;,
            &amp;quot;gravatar_id&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;hireable&amp;quot;: null,
            &amp;quot;html_url&amp;quot;: &amp;quot;https://github.com/jgbarah&amp;quot;,
            &amp;quot;id&amp;quot;: 1039693,
            &amp;quot;location&amp;quot;: null,
            &amp;quot;login&amp;quot;: &amp;quot;jgbarah&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;Jesus M. Gonzalez-Barahona&amp;quot;,
            &amp;quot;node_id&amp;quot;: &amp;quot;MDQ6VXNlcjEwMzk2OTM=&amp;quot;,
            &amp;quot;organizations&amp;quot;: [
                &amp;#123;
                    &amp;quot;avatar_url&amp;quot;: &amp;quot;https://avatars.githubusercontent.com/u/1843608?v=4&amp;quot;,
                    &amp;quot;description&amp;quot;: null,
                    &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/orgs/MetricsGrimoire/events&amp;quot;,
                    &amp;quot;hooks_url&amp;quot;: &amp;quot;https://api.github.com/orgs/MetricsGrimoire/hooks&amp;quot;,
                    &amp;quot;id&amp;quot;: 1843608,
                    &amp;quot;issues_url&amp;quot;: &amp;quot;https://api.github.com/orgs/MetricsGrimoire/issues&amp;quot;,
                    &amp;quot;login&amp;quot;: &amp;quot;MetricsGrimoire&amp;quot;,
                    &amp;quot;members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/MetricsGrimoire/members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;node_id&amp;quot;: &amp;quot;MDEyOk9yZ2FuaXphdGlvbjE4NDM2MDg=&amp;quot;,
                    &amp;quot;public_members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/MetricsGrimoire/public_members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;repos_url&amp;quot;: &amp;quot;https://api.github.com/orgs/MetricsGrimoire/repos&amp;quot;,
                    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/orgs/MetricsGrimoire&amp;quot;
                &amp;#125;,
                &amp;#123;
                    &amp;quot;avatar_url&amp;quot;: &amp;quot;https://avatars.githubusercontent.com/u/1918070?v=4&amp;quot;,
                    &amp;quot;description&amp;quot;: null,
                    &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/orgs/Bitergia/events&amp;quot;,
                    &amp;quot;hooks_url&amp;quot;: &amp;quot;https://api.github.com/orgs/Bitergia/hooks&amp;quot;,
                    &amp;quot;id&amp;quot;: 1918070,
                    &amp;quot;issues_url&amp;quot;: &amp;quot;https://api.github.com/orgs/Bitergia/issues&amp;quot;,
                    &amp;quot;login&amp;quot;: &amp;quot;Bitergia&amp;quot;,
                    &amp;quot;members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/Bitergia/members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;node_id&amp;quot;: &amp;quot;MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=&amp;quot;,
                    &amp;quot;public_members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/Bitergia/public_members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;repos_url&amp;quot;: &amp;quot;https://api.github.com/orgs/Bitergia/repos&amp;quot;,
                    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/orgs/Bitergia&amp;quot;
                &amp;#125;,
                &amp;#123;
                    &amp;quot;avatar_url&amp;quot;: &amp;quot;https://avatars.githubusercontent.com/u/2191340?v=4&amp;quot;,
                    &amp;quot;description&amp;quot;: null,
                    &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/orgs/VizGrimoire/events&amp;quot;,
                    &amp;quot;hooks_url&amp;quot;: &amp;quot;https://api.github.com/orgs/VizGrimoire/hooks&amp;quot;,
                    &amp;quot;id&amp;quot;: 2191340,
                    &amp;quot;issues_url&amp;quot;: &amp;quot;https://api.github.com/orgs/VizGrimoire/issues&amp;quot;,
                    &amp;quot;login&amp;quot;: &amp;quot;VizGrimoire&amp;quot;,
                    &amp;quot;members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/VizGrimoire/members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;node_id&amp;quot;: &amp;quot;MDEyOk9yZ2FuaXphdGlvbjIxOTEzNDA=&amp;quot;,
                    &amp;quot;public_members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/VizGrimoire/public_members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;repos_url&amp;quot;: &amp;quot;https://api.github.com/orgs/VizGrimoire/repos&amp;quot;,
                    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/orgs/VizGrimoire&amp;quot;
                &amp;#125;,
                &amp;#123;
                    &amp;quot;avatar_url&amp;quot;: &amp;quot;https://avatars.githubusercontent.com/u/3017044?v=4&amp;quot;,
                    &amp;quot;description&amp;quot;: null,
                    &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/orgs/AlertProject/events&amp;quot;,
                    &amp;quot;hooks_url&amp;quot;: &amp;quot;https://api.github.com/orgs/AlertProject/hooks&amp;quot;,
                    &amp;quot;id&amp;quot;: 3017044,
                    &amp;quot;issues_url&amp;quot;: &amp;quot;https://api.github.com/orgs/AlertProject/issues&amp;quot;,
                    &amp;quot;login&amp;quot;: &amp;quot;AlertProject&amp;quot;,
                    &amp;quot;members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/AlertProject/members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;node_id&amp;quot;: &amp;quot;MDEyOk9yZ2FuaXphdGlvbjMwMTcwNDQ=&amp;quot;,
                    &amp;quot;public_members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/AlertProject/public_members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;repos_url&amp;quot;: &amp;quot;https://api.github.com/orgs/AlertProject/repos&amp;quot;,
                    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/orgs/AlertProject&amp;quot;
                &amp;#125;,
                &amp;#123;
                    &amp;quot;avatar_url&amp;quot;: &amp;quot;https://avatars.githubusercontent.com/u/16151805?v=4&amp;quot;,
                    &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
                    &amp;quot;events_url&amp;quot;: &amp;quot;https://api.github.com/orgs/grimoirelab/events&amp;quot;,
                    &amp;quot;hooks_url&amp;quot;: &amp;quot;https://api.github.com/orgs/grimoirelab/hooks&amp;quot;,
                    &amp;quot;id&amp;quot;: 16151805,
                    &amp;quot;issues_url&amp;quot;: &amp;quot;https://api.github.com/orgs/grimoirelab/issues&amp;quot;,
                    &amp;quot;login&amp;quot;: &amp;quot;grimoirelab&amp;quot;,
                    &amp;quot;members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/grimoirelab/members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;node_id&amp;quot;: &amp;quot;MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1&amp;quot;,
                    &amp;quot;public_members_url&amp;quot;: &amp;quot;https://api.github.com/orgs/grimoirelab/public_members&amp;#123;/member&amp;#125;&amp;quot;,
                    &amp;quot;repos_url&amp;quot;: &amp;quot;https://api.github.com/orgs/grimoirelab/repos&amp;quot;,
                    &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/orgs/grimoirelab&amp;quot;
                &amp;#125;
            ],
            &amp;quot;organizations_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/orgs&amp;quot;,
            &amp;quot;public_gists&amp;quot;: 0,
            &amp;quot;public_repos&amp;quot;: 41,
            &amp;quot;received_events_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/received_events&amp;quot;,
            &amp;quot;repos_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/repos&amp;quot;,
            &amp;quot;site_admin&amp;quot;: false,
            &amp;quot;starred_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/starred&amp;#123;/owner&amp;#125;&amp;#123;/repo&amp;#125;&amp;quot;,
            &amp;quot;subscriptions_url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah/subscriptions&amp;quot;,
            &amp;quot;twitter_username&amp;quot;: null,
            &amp;quot;type&amp;quot;: &amp;quot;User&amp;quot;,
            &amp;quot;updated_at&amp;quot;: &amp;quot;2022-02-16T16:51:43Z&amp;quot;,
            &amp;quot;url&amp;quot;: &amp;quot;https://api.github.com/users/jgbarah&amp;quot;
        &amp;#125;
    &amp;#125;,
    &amp;quot;origin&amp;quot;: &amp;quot;https://github.com/grimoirelab/perceval&amp;quot;,
    &amp;quot;perceval_version&amp;quot;: &amp;quot;0.17.16&amp;quot;,
    &amp;quot;search_fields&amp;quot;: &amp;#123;
        &amp;quot;item_id&amp;quot;: &amp;quot;124679251&amp;quot;,
        &amp;quot;owner&amp;quot;: &amp;quot;grimoirelab&amp;quot;,
        &amp;quot;repo&amp;quot;: &amp;quot;perceval&amp;quot;
    &amp;#125;,
    &amp;quot;tag&amp;quot;: &amp;quot;https://github.com/grimoirelab/perceval&amp;quot;,
    &amp;quot;timestamp&amp;quot;: 1645709133.739694,
    &amp;quot;updated_on&amp;quot;: 1451929343.0,
    &amp;quot;uuid&amp;quot;: &amp;quot;c403532b196ed4020cc86d001feb091c009d3d26&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;获取器的架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取器的架构&#34;&gt;#&lt;/a&gt; 获取器的架构&lt;/h3&gt;
&lt;p&gt;Client: interacts directly with the data source.&lt;/p&gt;
&lt;p&gt;Backend: orchestrates the fetching process by using the Client.&lt;/p&gt;
&lt;p&gt;CommandLine: defines the arguments to initialize and run the Backend from the command line.&lt;/p&gt;
</content>
        <category term="xlab" scheme="https://songlinlife.top/categories/xlab/" />
        <updated>2022-02-24T13:54:45.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-GFS/</id>
        <title>MIT6.824: GFS</title>
        <link rel="alternate" href="https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-GFS/"/>
        <content type="html">&lt;h3 id=&#34;gfsgoogle-file-system&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gfsgoogle-file-system&#34;&gt;#&lt;/a&gt; GFS（Google File System）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In this paper, we present file system interface extensions designed to support distributed applications, discuss many aspects of our design, and report measurements from both micro-benchmarks and real world use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章介绍旨在&lt;strong&gt;支持分布式应用程序的文件系统接口扩展&lt;/strong&gt;，讨论了我们设计的许多方面，并报告了从微基准测试和真实世界使用两方面的测量结果。&lt;/p&gt;
&lt;h4 id=&#34;keywords&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#keywords&#34;&gt;#&lt;/a&gt; Keywords&lt;/h4&gt;
&lt;p&gt;Fault tolerance, scalability, data storage, clustered storage&lt;/p&gt;
&lt;h4 id=&#34;introduction&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt; Introduction&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;constant monitoring, error detection, fault tolerance, and automatic recovery must be integral to the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者认为持续监控，错误检测，故障容忍，自动恢复是系统的关键所在。&lt;/p&gt;
&lt;h4 id=&#34;设计理念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计理念&#34;&gt;#&lt;/a&gt; 设计理念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;系统由许多便宜的机器组成，所以经常会有 fail 情况，监控、检测、故障恢复是日常。&lt;/li&gt;
&lt;li&gt;系统会存储很多 GB 级别的大文件。&lt;/li&gt;
&lt;li&gt;读负载主要分为两种：大流式读和小的随机读。&lt;/li&gt;
&lt;li&gt;写负载通常是 append data。也就是说文件是被 append 而不是修改。因此一个文件一旦写完之后就很少被修改。&lt;/li&gt;
&lt;li&gt;系统实现了多客户端并发 append 同一个文件&lt;/li&gt;
&lt;li&gt;高稳定带宽比低延迟更重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构&#34;&gt;#&lt;/a&gt; 架构&lt;/h4&gt;
&lt;p&gt;一个 master 机（以及多个 master 机的 remote 副本），多个 chunkservers，以及多个 clients。&lt;/p&gt;
&lt;p&gt;每一个 chunk 有 64M，并且被一个 64bit 的 chunk handle 给唯一标识。chunkhandle 是 chunk 创建时由 master 机分配的，并且如果 client 要访问 chunk 并且持有 chunk handle。&lt;/p&gt;
&lt;h4 id=&#34;读操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读操作&#34;&gt;#&lt;/a&gt; 读操作&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;client 将 filename 和 byte offset 转成 chunk index。&lt;/li&gt;
&lt;li&gt;client 向 master 发送 request，包含 chunk index 和 filename&lt;/li&gt;
&lt;li&gt;master 返回 chunk handle 和副本的 location。&lt;/li&gt;
&lt;li&gt;client 使用 filename 和 chunk index 作为 key，将 master 返回的数据作为 value，缓存起来。这样 client 在一段时间内就可以不用再和 master 沟通了。&lt;/li&gt;
&lt;li&gt;client 访问距离它最近的 replicas。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;metadata&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#metadata&#34;&gt;#&lt;/a&gt; MetaData&lt;/h4&gt;
&lt;p&gt;三种主要的 MetaData：the file and chunk namespaces, the mapping from files to chunks, and the locations of each chunk’s replicas。&lt;/p&gt;
&lt;p&gt;主要 MetaData 都是存放在 Master 机的内存中，但是 &lt;code&gt;namespace&lt;/code&gt;  和 &lt;code&gt;mapping&lt;/code&gt;  是会写到 local disk 的 log 中，并且在 remote 机中存放备份。但是 location 不会有持续存储。&lt;/p&gt;
&lt;p&gt;因为集群经常会有机器加入、宕机、重启等情况，所以持续化存储 location 不是一个好的选择，最好还是周期性询问 chunkservers。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223133116965.png&#34; alt=&#34;image-20220223133116965&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;consistent和defined&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#consistent和defined&#34;&gt;#&lt;/a&gt; consistent 和 defined&lt;/h4&gt;
&lt;p&gt;如果所有 client 看到相同的数据，就被认为是 consistent。&lt;/p&gt;
&lt;p&gt;如果文件数据改动后，file region 还是 consistent 的，并且所有 client 都会看到 mutation writes 的全部内容，那么就说明 region 是_defined_。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225093959514.png&#34; alt=&#34;image-20220225093959514&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于 GFS 来说，write 和 append 虽然都是 mutation 但是他们还是有不同的。&lt;/p&gt;
&lt;h4 id=&#34;write和append&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#write和append&#34;&gt;#&lt;/a&gt; Write 和 Append&lt;/h4&gt;
&lt;p&gt;说实话我读第一遍论文时候搞不懂为什么 write 操作是 undefined 但 consistent 而 Record Append 操作是 defined 但 inconsistent。其实这个不同点就是 GFS 设计的巧妙之处，write chunk 操作需要制定 offset，而 Append 操作则不用。&lt;/p&gt;
&lt;p&gt;教授关于 Append 操作的这个例子讲的很好：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225095400456.png&#34; alt=&#34;image-20220225095400456&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于 append 操作，如果第一次 Append 操作失败之后，那么会重新发起 append 请求，也就是 primary 再写一遍然后让其他副本也写一遍，那么问题就来了，之前的 Append 操作中，有的 replicas 成功写入了 data，有的没有。失败的操作不会要求这些 replicas 删除之前 append 失败操作写的数据，而是重新再尾部进行 Append，并且要求同一个 Records 在所有的 replicas 中具有相同的 offset。那么很显然上述的三个 replicas 中数据是不一致的，但我们可以看到每一个 append 操作写的数据，数据不会被覆盖，那么他就是一个 defined 操作。&lt;/p&gt;
&lt;p&gt;对于 write 操作，因为所有 client 机并发写相同的 offset，那么及时失败后，有的 replicas 写了，有的没有，那么在下一次重新发起 Write 操作中，会写覆盖掉之前写的数据。因此 write 操作是一致的，并且因为写覆盖，我们没法知道到底是什么序列写的，所有是 undefined。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220225094811181.png&#34; alt=&#34;image-20220225094811181&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;snapshot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#snapshot&#34;&gt;#&lt;/a&gt; snapshot&lt;/h4&gt;
&lt;p&gt;说实话，我没看懂块引用。。。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223150359437.png&#34; alt=&#34;image-20220223150359437&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;上课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上课&#34;&gt;#&lt;/a&gt; 上课&lt;/h3&gt;
&lt;p&gt;consistency 会导致 low performance&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223182829839.png&#34; alt=&#34;image-20220223182829839&#34; /&gt;&lt;/p&gt;
&lt;p&gt;不好的分布式系统：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223184155101.png&#34; alt=&#34;image-20220223184155101&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220223185145057.png&#34; alt=&#34;image-20220223185145057&#34; /&gt;&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <category term="MIT6.824" scheme="https://songlinlife.top/tags/MIT6-824/" />
        <updated>2022-02-23T02:56:45.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-mapreduce/</id>
        <title>MIT6.824: mapreduce</title>
        <link rel="alternate" href="https://songlinlife.top/2022/%E5%88%86%E5%B8%83%E5%BC%8F/MIT6-824-mapreduce/"/>
        <content type="html">&lt;h3 id=&#34;开新坑了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开新坑了&#34;&gt;#&lt;/a&gt; 开新坑了！&lt;/h3&gt;
&lt;p&gt;令人感叹，自己虽然开了很多个坑，但是能够完成的却很少，这次的 MIT6.824 是我确定学的一门课程，要想入门分布式绕不开的一门课，没办法，老老实实学一次，把所有的 lab 做完，这就是我的目标！&lt;/p&gt;
&lt;h3 id=&#34;论文阅读&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#论文阅读&#34;&gt;#&lt;/a&gt; 论文阅读&lt;/h3&gt;
&lt;p&gt;因为这门课必须要看论文，所以就很痛苦。。。&lt;/p&gt;
&lt;h4 id=&#34;问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题&#34;&gt;#&lt;/a&gt; 问题&lt;/h4&gt;
&lt;p&gt;原有的计算是很简单的，但是因为数据很大需要做成分布式系统，所以如何 &lt;code&gt;并行化计算&lt;/code&gt; 、 &lt;code&gt;分发数据&lt;/code&gt; 和 &lt;code&gt;处理故障&lt;/code&gt; 等问题使得原本简单的计算变得晦涩难懂，需要大量复杂的代码来处理这些问题。&lt;/p&gt;
&lt;h4 id=&#34;mapreduce函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mapreduce函数&#34;&gt;#&lt;/a&gt; MapReduce 函数&lt;/h4&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;figcaption data-lang=&#34;go&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; String value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// key: document name&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// value: document contents&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; each word w in value&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token function&#34;&gt;EmitIntermediate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;w&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Iterator values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// key: a word&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// values: a list of counts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; each v in values&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	result &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ParseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;Emit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;AsString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;map 用于发射中间键值对，而 reduce 函数则负责对中间键值对中相同的 key 进行 aggregate 处理。&lt;/p&gt;
&lt;h4 id=&#34;执行概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行概述&#34;&gt;#&lt;/a&gt; 执行概述&lt;/h4&gt;
&lt;p&gt;首先明确 map 机和 reduce 机组成了一个分布式系统，所以这里有一个 master 机用于 assign 任务。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 raw data 切分为 M 个 splits。每一个 split 大小可以由用户进行指定。&lt;/li&gt;
&lt;li&gt;master 机将 map 任务和 reduce 任务分别自拍给不同的 workers。&lt;/li&gt;
&lt;li&gt;map 机读取 input split，通过 &lt;code&gt;Map&lt;/code&gt;  函数将 k/v 对进行输出。这些中间键值对缓存在 map 机的内存中。&lt;/li&gt;
&lt;li&gt;这些缓存的键值对会定期存本地磁盘，同时会被分区函数分为 R 个 regions。可以用 hash (key) mod R。local disk 的位置会被发送给 master 即，master 机来告诉 reduce 机存储位置。&lt;/li&gt;
&lt;li&gt;reduce 机被 master 机告知存储位置后，通过 rpc 远程调用来读取有 map 机制造的缓存 kv 中间对。当 reduce 机读取完了所有的数据后，会通过 sort 操作来将相同 key 进行 group。因为中间数据可以过大，以至于难以读入到内存中，因此 sort 操作是必须的。&lt;/li&gt;
&lt;li&gt;reduce 即使用 &lt;code&gt;Reduce&lt;/code&gt;  函数来对这些数据进行处理，并将数据输出到最终的分区。&lt;/li&gt;
&lt;li&gt;当 mapreduce 操作执行完毕后，master 机负责唤醒用户程序，并把 MapReduce 调用输出返回给用户程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220220115958846.png&#34; alt=&#34;image-20220220115958846&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用例子&#34;&gt;#&lt;/a&gt; 使用例子&lt;/h4&gt;
&lt;p&gt;计算 URL 的频率，这个就和 wordcount 函数相同。&lt;/p&gt;
&lt;p&gt;ReverseWeb-Link Graph: map 函数输出 &amp;lt;target, source&amp;gt;，target 是对应的 url，而 source 就是 target url 出现的网页 URL，而 reduce 负责将 source 进行 concat，输出 &amp;lt; target, list (source)&amp;gt;&lt;/p&gt;
&lt;p&gt;Inverted Index: 和上面的例子类似。&lt;/p&gt;
&lt;h3 id=&#34;分布式系统的特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式系统的特性&#34;&gt;#&lt;/a&gt; 分布式系统的特性&lt;/h3&gt;
&lt;h4 id=&#34;错误容忍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#错误容忍&#34;&gt;#&lt;/a&gt; 错误容忍&lt;/h4&gt;
&lt;p&gt;Availability：即使一些机器发生了故障，系统依旧可以提供无误的服务，注意，如果很多机器都宕机，available system 仍然会停止运行，但得到修复后，系统可以继续正确运行。&lt;/p&gt;
&lt;p&gt;Recoverability：系统发生故障后，经过修复仍然可以正确运行，因此 Availability 就包含了系统需要 Recoverability。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220221152942785.png&#34; alt=&#34;image-20220221152942785&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;lab1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lab1&#34;&gt;#&lt;/a&gt; LAB1&lt;/h3&gt;
&lt;h4 id=&#34;job&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#job&#34;&gt;#&lt;/a&gt; Job&lt;/h4&gt;
&lt;p&gt;实现分布式 MapReduce，包含两个程序，master 和 worker。worker 和 master 之间通信通过 RPC，每个 worker process 将会向 master 询问任务，读取任务输入，执行任务，并将任务结果输出到一个或多个文件中。如果 worker 不不能在 10s 的时间内完成任务，master 需要将任务分配给另一个 worker。&lt;/p&gt;
&lt;p&gt;执行过程：&lt;/p&gt;
&lt;p&gt;生成插件&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;figcaption data-lang=&#34;go&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;go&lt;/span&gt; build &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;buildmode&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;plugin &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;mrapps&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;wc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;go&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 main 目录下执行：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;figcaption data-lang=&#34;go&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;go&lt;/span&gt; run mrmaster&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;go&lt;/span&gt; pg&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个就是 master 函数&lt;/p&gt;
&lt;p&gt;执行 worker&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;figcaption data-lang=&#34;go&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;go&lt;/span&gt; run mrworker&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;go&lt;/span&gt; wc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;so&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;需要遵守的规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需要遵守的规则&#34;&gt;#&lt;/a&gt; 需要遵守的规则&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;map 函数传递的中间 key 需要分配到 nReduce 个 bucket 中，而 &lt;code&gt;NReduce&lt;/code&gt;  这个参数会被 &lt;code&gt;main/mrmaster.go&lt;/code&gt;  传递给 &lt;code&gt;MakeMaster()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;结果需要保持为 &lt;code&gt;mr-out-X&lt;/code&gt;  这种格式，其中 &lt;code&gt;X&lt;/code&gt;  是 &lt;code&gt;reduce&lt;/code&gt;  的编号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mr-out-x&lt;/code&gt;  文件中每一行记录了 reduce 的输出，并且格式为  &lt;code&gt;%v %v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能改动这三个文件 &lt;code&gt;mr/worker.go&lt;/code&gt; ,  &lt;code&gt;mr/master.go&lt;/code&gt; ,  &lt;code&gt;mr/rpc.go&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;worker 需要把 map 的中间结果保存到当前目录中。&lt;/li&gt;
&lt;li&gt;mr/master.go 中需要实现 &lt;code&gt;Done()&lt;/code&gt;  方法，如果返回 &lt;code&gt;true&lt;/code&gt;  表示 MapReduce 任务执行完成，  &lt;code&gt;mrmaster.go&lt;/code&gt;  才会退出。&lt;/li&gt;
&lt;li&gt;worker 还需要实现 &lt;code&gt;call&lt;/code&gt;  方法，如果 worker 不能和 master 进行沟通，那么 worker 就会终止。（还可以实现一个 pseudo-task，这个任务就是”please exit&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;提示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提示&#34;&gt;#&lt;/a&gt; 提示&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mr/worker.go&lt;/code&gt;  通过 RPC 向 master 进行 task，master 发送一个还没进过 map 的文件名，然后 worker 就开始读取这个文件并调用 Map 函数。&lt;/li&gt;
&lt;li&gt;Map 和 Reduce 函数不用自己写，已经在 plugin 保重实现了。&lt;/li&gt;
&lt;li&gt;每次都要先 ``go build -buildmode=plugin ../mrapps/wc.go`&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mr-X-Y&lt;/code&gt;  的方式给中间文件命名，X 值 Map task， Y 指 Reduce task。&lt;/li&gt;
&lt;li&gt;kv 键值对可以使用 json 文件格式进行存储。&lt;/li&gt;
&lt;li&gt;The map part of your worker can use the  &lt;code&gt;ihash(key)&lt;/code&gt;  function (in  &lt;code&gt;worker.go&lt;/code&gt; ) to pick the reduce task for a given key。也就是说 &lt;code&gt;ihash&lt;/code&gt;  方式在 map 阶段就知道这个 key 该由哪个 reduce 进行处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mrsequential.go&lt;/code&gt;  的代码可以借鉴。&lt;strong&gt;注意 sort。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;master 作为 RPC 服务器，它是并发的，所以到注意加锁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go build -race&lt;/code&gt;  可以用作检查并发。&lt;/li&gt;
&lt;li&gt;所有的 map 执行完毕之后 reduce 才会执行，所以 reduce worker 需要等待。&lt;/li&gt;
&lt;li&gt;对于执行超时的 worker，master 需要重新分配任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mrapps/crash.go&lt;/code&gt;  用于检测崩溃回复。&lt;/li&gt;
&lt;li&gt;map 函数先用一个临时文件写中间数据，当所有的数据写完之后，在将文件名自动重命名。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;遇到的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遇到的问题&#34;&gt;#&lt;/a&gt; 遇到的问题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;taskstate 0 空闲 1 处理中 2 处理完毕&lt;/li&gt;
&lt;li&gt;坑点：只有当前 worker 执行完了一个 maptask 或者 reduce task 才能再执行 map 或者 reduce task。不能在一个 worker 机上同时并发执行多个 Map 或 reduce 函数。&lt;/li&gt;
&lt;li&gt;写中间文件需要使用 os.O_TRUNC，不然执行 sh 脚本会出错。&lt;/li&gt;
&lt;li&gt;最后的测试点只能用 Sock 方式进行 rpc，不能用 tcp 方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;repo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#repo&#34;&gt;#&lt;/a&gt; Repo&lt;/h4&gt;
&lt;p&gt;代码放在了 github 上：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NvbmdsaW5MaWZlL01hcFJlZHVjZQ==&#34;&gt;MapReduce&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;完成了所有测试点：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image-2021-wu.oss-cn-beijing.aliyuncs.com/blogs/picturesimage-20220224114038738.png&#34; alt=&#34;image-20220224114038738&#34; /&gt;&lt;/p&gt;
</content>
        <category term="分布式" scheme="https://songlinlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/" />
        <category term="MIT6.824" scheme="https://songlinlife.top/tags/MIT6-824/" />
        <updated>2022-02-20T02:28:51.000Z</updated>
    </entry>
    <entry>
        <id>https://songlinlife.top/2022/Bot/Bot-%E8%8E%B7%E5%8F%96%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE/</id>
        <title>Bot: 获取基础数据</title>
        <link rel="alternate" href="https://songlinlife.top/2022/Bot/Bot-%E8%8E%B7%E5%8F%96%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE/"/>
        <content type="html">&lt;h3 id=&#34;筛选账号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#筛选账号&#34;&gt;#&lt;/a&gt; 筛选账号&lt;/h3&gt;
&lt;p&gt;我的初始想法是先获取头部前 10000 名活跃的 github 账号。&lt;/p&gt;
&lt;p&gt;github 日志数据有的 action 种类：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;PublicEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;WatchEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;started&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IssueCommentEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;created&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ForkEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;PullRequestEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;opened&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;CreateEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;DeleteEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;PullRequestEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;closed&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;PushEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IssuesEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;reopened&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IssuesEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;closed&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;PullRequestReviewCommentEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;created&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IssuesEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;opened&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MemberEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;added&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;CommitCommentEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ReleaseEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;published&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;GollumEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;PullRequestEvent&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;&#34;action&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;reopened&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;对于这些行为，我目前还没法确认哪些是 github bot 账号不能有的。&lt;/p&gt;
&lt;p&gt;所以，我打算先直接计算这些行为的数，然后确定 bot。&lt;/p&gt;
&lt;h4 id=&#34;根据日期和行为数进行筛选&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据日期和行为数进行筛选&#34;&gt;#&lt;/a&gt; 根据日期和行为数进行筛选&lt;/h4&gt;
&lt;p&gt;先筛选  &lt;code&gt;2020-6-20&lt;/code&gt;  到 &lt;code&gt;2020-6-26&lt;/code&gt;  的这一周数据。&lt;/p&gt;
</content>
        <category term="Bot" scheme="https://songlinlife.top/categories/Bot/" />
        <updated>2022-02-19T08:46:11.000Z</updated>
    </entry>
</feed>
